//--------------------------------------------------------------------------------
// exmaple_fast_string_sub.cpp
// 高速文字列操作テスト
//
// Gakimaru's researched and standard library for C++ - GASHA
//   Copyright (c) 2014 Itagaki Mamoru
//   Released under the MIT license.
//     https://github.com/gakimaru/gasha_examples/blob/master/LICENSE
//--------------------------------------------------------------------------------

#include "example_fast_string.h"//高速文字列操作テスト

#include <gasha/type_traits.h>//型特性ユーティリティ：extentof()

#include <cstddef>//std::size_t
#include <cstring>//strlen(), std::memcpy()

GASHA_USING_NAMESPACE;//ネームスペース使用

//----------------------------------------
//高速文字列操作テスト用データ
static const char* s_str[] =
{
	"",
	"1",
	"12",
	"123",
	"1234",
	"12345",
	"123456",
	"1234567",
	"12345678",
	"123456789",
	"1234567890",
	"12345678901",
	"123456789012",
	"1234567890123",
	"12345678901234",
	"123456789012345",
	"1234567890123456",
	"12345678901234567",
	"123456789012345678",
	"1234567890123456789",
	"12345678901234567890",
	"123456789012345678901",
	"1234567890123456789012",
	"12345678901234567890123",
	"123456789012345678901234",
	"1234567890123456789012345",
	"12345678901234567890123456",
	"123456789012345678901234567",
	"1234567890123456789012345678",
	"12345678901234567890123456789",
	"123456789012345678901234567890",
	"1234567890123456789012345678901",
	"12345678901234567890123456789012",
	"123456789012345678901234567890123",
	"1234567890123456789012345678901234",
	"12345678901234567890123456789012345",
	"123456789012345678901234567890123456",
	"1234567890123456789012345678901234567",
	"12345678901234567890123456789012345678",
	"123456789012345678901234567890123456789",
	"1234567890123456789012345678901234567890",
	"12345678901234567890123456789012345678901",
	"123456789012345678901234567890123456789012",
	"1234567890123456789012345678901234567890123",
	"12345678901234567890123456789012345678901234",
	"123456789012345678901234567890123456789012345",
	"1234567890123456789012345678901234567890123456",
	"12345678901234567890123456789012345678901234567",
	"123456789012345678901234567890123456789012345678",
	"1234567890123456789012345678901234567890123456789",
	"12345678901234567890123456789012345678901234567890",
	"123456789012345678901234567890123456789012345678901",
	"1234567890123456789012345678901234567890123456789012",
	"12345678901234567890123456789012345678901234567890123",
	"123456789012345678901234567890123456789012345678901234",
	"1234567890123456789012345678901234567890123456789012345",
	"12345678901234567890123456789012345678901234567890123456",
	"123456789012345678901234567890123456789012345678901234567",
	"1234567890123456789012345678901234567890123456789012345678",
	"12345678901234567890123456789012345678901234567890123456789",
	"123456789012345678901234567890123456789012345678901234567890",
	"1234567890123456789012345678901234567890123456789012345678901",
	"12345678901234567890123456789012345678901234567890123456789012",
	"123456789012345678901234567890123456789012345678901234567890123",
	"1234567890123456789012345678901234567890123456789012345678901234",
	"12345678901234567890123456789012345678901234567890123456789012345",
	"123456789012345678901234567890123456789012345678901234567890123456",
	"1234567890123456789012345678901234567890123456789012345678901234567",
	"12345678901234567890123456789012345678901234567890123456789012345678",
	"123456789012345678901234567890123456789012345678901234567890123456789",
	"1234567890123456789012345678901234567890123456789012345678901234567890",
	"12345678901234567890123456789012345678901234567890123456789012345678901",
	"123456789012345678901234567890123456789012345678901234567890123456789012",
	"1234567890123456789012345678901234567890123456789012345678901234567890123",
	"12345678901234567890123456789012345678901234567890123456789012345678901234",
	"123456789012345678901234567890123456789012345678901234567890123456789012345",
	"1234567890123456789012345678901234567890123456789012345678901234567890123456",
	"12345678901234567890123456789012345678901234567890123456789012345678901234567",
	"123456789012345678901234567890123456789012345678901234567890123456789012345678",
	"1234567890123456789012345678901234567890123456789012345678901234567890123456789",
	"12345678901234567890123456789012345678901234567890123456789012345678901234567890",
	"12312312312312312312312312312312312312312312312312312312312312312312312312312312",
	"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
};
static const std::size_t STR_SET_NUM = GASHA_EXTENT1OF(s_str);
static std::size_t s_strLen[STR_SET_NUM];//constexprが使えるなら extent1of(str)で良い

//テスト用データ初期化
void initStrSet()
{
	for (std::size_t i = 0; i < STR_SET_NUM; ++i)
		s_strLen[i] = GASHA_ strlen(s_str[i]);
}

//テスト用データ数取得
std::size_t getStrSetNum()
{
	return STR_SET_NUM;
}

//テスト用データ取得
const char* getStr(char* buff, const std::size_t no, const int dummy)
{
	std::memcpy(buff, s_str[no], s_strLen[no] + 1);
	return buff;
}

//テスト用データ長取得
const std::size_t getStrLen(const std::size_t no, const int dummy)
{
	return s_strLen[no];
}

// End of file
