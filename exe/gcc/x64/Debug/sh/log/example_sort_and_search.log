============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=49 / record(s)=100]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=51 / record(s)=100]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=49 / record(s)=100]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=100]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=33 / record(s)=100]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=100]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=48 / record(s)=100]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000120572 sec.
Array is ordered. [record(s)=100]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000009100 sec.
Array is ordered. [record(s)=100]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000008666 sec.
Array is ordered. [record(s)=100]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000003141 sec.
Array is ordered. [record(s)=100]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000006500 sec.
Array is ordered. [record(s)=100]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000003683 sec.
Array is ordered. [record(s)=100]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000008017 sec.
Array is ordered. [record(s)=100]
Array is stable.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.000159679 sec.
* Average time     = 0.000022811 sec.
* Min time         = 0.000003141 sec.
* Max time         = 0.000120572 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000013433 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000011700 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000016791 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000006500 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000007042 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000017008 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000013107 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.000085581 sec.
* Average time     = 0.000012226 sec.
* Min time         = 0.000006500 sec.
* Max time         = 0.000017008 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000011916 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000011700 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000011483 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000006283 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000007150 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000006175 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000022207 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.000076914 sec.
* Average time     = 0.000010988 sec.
* Min time         = 0.000006175 sec.
* Max time         = 0.000022207 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000011699 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000011591 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000011375 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000006283 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000007150 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000005958 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000011158 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.000065214 sec.
* Average time     = 0.000009316 sec.
* Min time         = 0.000005958 sec.
* Max time         = 0.000011699 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000012241 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000011808 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000012566 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000006283 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000007042 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000005850 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000011267 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.000067057 sec.
* Average time     = 0.000009580 sec.
* Min time         = 0.000005850 sec.
* Max time         = 0.000012566 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000021558 sec.
Array is ordered. [record(s)=100]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000013217 sec.
Array is ordered. [record(s)=100]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000012567 sec.
Array is ordered. [record(s)=100]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000007583 sec.
Array is ordered. [record(s)=100]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000010617 sec.
Array is ordered. [record(s)=100]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000008558 sec.
Array is ordered. [record(s)=100]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000011916 sec.
Array is ordered. [record(s)=100]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.000086016 sec.
* Average time     = 0.000012288 sec.
* Min time         = 0.000007583 sec.
* Max time         = 0.000021558 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000137471 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2567 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000098797 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2692 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000090022 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2369 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000001083 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000155020 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=4851 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000029682 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=195 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000143537 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=3428 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 0.000655612 sec.
* Average time     = 0.000093659 sec.
* Min time         = 0.000001083 sec.
* Max time         = 0.000155020 sec.
* Total Swapped    =     16102 count(s)
* Average  Swapped =      2300 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      4851 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000093164 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2567 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000095655 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2692 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000085689 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2369 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000001083 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000210810 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=4851 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000006825 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=195 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000114504 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=3428 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 0.000607730 sec.
* Average time     = 0.000086819 sec.
* Min time         = 0.000001083 sec.
* Max time         = 0.000210810 sec.
* Total Swapped    =     16102 count(s)
* Average  Swapped =      2300 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      4851 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001253379 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2567 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000156537 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2692 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000121872 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2369 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000003467 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000165312 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=4851 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000121113 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=195 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000141371 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=3428 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.001963051 sec.
* Average time     = 0.000280436 sec.
* Min time         = 0.000003467 sec.
* Max time         = 0.001253379 sec.
* Total Swapped    =     16102 count(s)
* Average  Swapped =      2300 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      4851 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000045823 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=1217 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000050807 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=1200 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000051132 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=1156 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000018850 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=432 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000047124 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=1204 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000038240 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=615 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000047123 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=1103 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.000299099 sec.
* Average time     = 0.000042728 sec.
* Min time         = 0.000018850 sec.
* Max time         = 0.000051132 sec.
* Total Swapped    =      6927 count(s)
* Average  Swapped =       989 count(s)
* Min Swapped      =       432 count(s)
* Max Swapped      =      1217 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000016141 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=205 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000016358 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=222 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000014841 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=193 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000005633 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000009967 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=106 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000012025 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=105 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000013866 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=206 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.000088831 sec.
* Average time     = 0.000012690 sec.
* Min time         = 0.000005633 sec.
* Max time         = 0.000016358 sec.
* Total Swapped    =      1037 count(s)
* Average  Swapped =       148 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =       222 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000088505 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2567 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000105622 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2692 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000121005 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2369 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000001300 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000164228 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=4851 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000008450 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=195 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000129021 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=3428 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 0.000618131 sec.
* Average time     = 0.000088304 sec.
* Min time         = 0.000001300 sec.
* Max time         = 0.000164228 sec.
* Total Swapped    =     16102 count(s)
* Average  Swapped =      2300 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      4851 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000022424 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=177 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000019500 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=186 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000033691 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=184 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000008883 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=33 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000010725 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=83 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000008017 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=34 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000018525 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=196 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.000121765 sec.
* Average time     = 0.000017395 sec.
* Min time         = 0.000008017 sec.
* Max time         = 0.000033691 sec.
* Total Swapped    =       893 count(s)
* Average  Swapped =       127 count(s)
* Min Swapped      =        33 count(s)
* Max Swapped      =       196 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000029790 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=94 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000033258 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=91 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000030008 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=96 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000023941 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000033365 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=83 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000027191 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000035532 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=95 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.000213085 sec.
* Average time     = 0.000030441 sec.
* Min time         = 0.000023941 sec.
* Max time         = 0.000035532 sec.
* Total Swapped    =       462 count(s)
* Average  Swapped =        66 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =        96 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000037699 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=611 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000031199 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=602 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000056331 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=632 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000039540 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=876 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000027300 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=509 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000037915 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=827 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000027841 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=563 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.000257825 sec.
* Average time     = 0.000036832 sec.
* Min time         = 0.000027300 sec.
* Max time         = 0.000056331 sec.
* Total Swapped    =      4620 count(s)
* Average  Swapped =       660 count(s)
* Min Swapped      =       509 count(s)
* Max Swapped      =       876 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000045390 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=93 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000058715 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=93 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000042899 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=88 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000001516 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000111255 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=99 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000007692 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=99 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000067165 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=95 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.000334632 sec.
* Average time     = 0.000047805 sec.
* Min time         = 0.000001516 sec.
* Max time         = 0.000111255 sec.
* Total Swapped    =       567 count(s)
* Average  Swapped =        81 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =        99 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000020691 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=198 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000018849 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=202 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000018633 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=180 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000003142 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000011917 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=160 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000009425 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=83 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000017333 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=197 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.000099990 sec.
* Average time     = 0.000014284 sec.
* Min time         = 0.000003142 sec.
* Max time         = 0.000020691 sec.
* Total Swapped    =      1020 count(s)
* Average  Swapped =       145 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =       202 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000056765 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=249 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000057957 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=251 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000052323 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=234 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000002708 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000080598 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=275 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000009966 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=102 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000065323 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=255 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.000325640 sec.
* Average time     = 0.000046520 sec.
* Min time         = 0.000002708 sec.
* Max time         = 0.000080598 sec.
* Total Swapped    =      1366 count(s)
* Average  Swapped =       195 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =       275 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000016683 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=151 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000016358 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=160 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000013325 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=141 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000001625 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000006716 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=56 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000004333 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=8 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000015383 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=171 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.000074423 sec.
* Average time     = 0.000010632 sec.
* Min time         = 0.000001625 sec.
* Max time         = 0.000016683 sec.
* Total Swapped    =       687 count(s)
* Average  Swapped =        98 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =       171 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000031525 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=99 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000020799 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=100 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000021341 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=98 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000018524 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000021991 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=100 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000019066 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000021233 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=99 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.000154479 sec.
* Average time     = 0.000022068 sec.
* Min time         = 0.000018524 sec.
* Max time         = 0.000031525 sec.
* Total Swapped    =       500 count(s)
* Average  Swapped =        71 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =       100 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 100 Count(s)
Total Array size   = 8000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.000159679/  0.000022811/  0.000003141/  0.000120572
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.000085581/  0.000012226/  0.000006500/  0.000017008
- std::sort(inline-func):   0.000076914/  0.000010988/  0.000006175/  0.000022207
- std::sort(functor):       0.000065214/  0.000009316/  0.000005958/  0.000011699
- std::sort(lambda):        0.000067057/  0.000009580/  0.000005850/  0.000012566
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.000086016/  0.000012288/  0.000007583/  0.000021558
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           0.000655612/  0.000093659/  0.000001083/  0.000155020      16102/       2300/          0/       4851
- Shaker sort<S>:           0.000607730/  0.000086819/  0.000001083/  0.000210810      16102/       2300/          0/       4851
- Odd-Even sort<S>:         0.001963051/  0.000280436/  0.000003467/  0.001253379      16102/       2300/          0/       4851
- Shear sort:               0.000299099/  0.000042728/  0.000018850/  0.000051132       6927/        989/        432/       1217
- Comb sort:                0.000088831/  0.000012690/  0.000005633/  0.000016358       1037/        148/          0/        222
- Gnome sort<S>:            0.000618131/  0.000088304/  0.000001300/  0.000164228      16102/       2300/          0/       4851
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.000121765/  0.000017395/  0.000008017/  0.000033691        893/        127/         33/        196
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.000213085/  0.000030441/  0.000023941/  0.000035532        462/         66/          0/         96
- Heap sort:                0.000257825/  0.000036832/  0.000027300/  0.000056331       4620/        660/        509/        876
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.000334632/  0.000047805/  0.000001516/  0.000111255        567/         81/          0/         99
- Shell sort:               0.000099990/  0.000014284/  0.000003142/  0.000020691       1020/        145/          0/        202
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.000325640/  0.000046520/  0.000002708/  0.000080598       1366/        195/          0/        275
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.000074423/  0.000010632/  0.000001625/  0.000016683        687/         98/          0/        171
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.000154479/  0.000022068/  0.000018524/  0.000031525        500/         71/          0/        100
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=151)
(result1=151)
(result3=151)
(result4=151)
(result5=151)
(result6=151)
(result8=151)
(result9=151)
(result10=151)
(result11=141)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=(nil))
    (data1_def=(nil))
    (data2_def=(nil))
    (data3_def=(nil))
    (data4_def=(nil))
    (data5_def=(nil))
    (data8_def=(nil))
    (data9_def=(nil))
    (data10_def=(nil))
    (data11_def=(nil))
  linearSearch(*array_shuffle1, search_predicate);
    (data=(nil))
    (data1=(nil))
    (data2=(nil))
    (data3=(nil))
    (data4=(nil))
    (data5=(nil))
    (data8=(nil))
    (data9=(nil))
    (data10=(nil))
    (data11=(nil))
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=(nil))
    (data1_val=(nil))
    (data2_val=(nil))
    (data3_val=(nil))
    (data4_val=(nil))
    (data5_val=(nil))
    (data8_val=(nil))
    (data9_val=(nil))
    (data10_val=(nil))
    (data11_val=(nil))
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x1b2a6f0)
    (data1_def=0x1b2a6f0)
    (data2_def=0x1b2a6f0)
    (data3_def=0x1b2a6f0)
    (data4_def=0x1b2a6f0)
    (data5_def=0x1b2a6f0)
    (data8_def=0x1b2a6f0)
    (data9_def=0x1b2a6f0)
    (data10_def=0x1b2a6f0)
    (data11_def=0x1b2a6f0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x1b2a6f0)
    (data1=0x1b2a6f0)
    (data2=0x1b2a6f0)
    (data3=0x1b2a6f0)
    (data4=0x1b2a6f0)
    (data5=0x1b2a6f0)
    (data8=0x1b2a6f0)
    (data9=0x1b2a6f0)
    (data10=0x1b2a6f0)
    (data11=0x1b2a6f0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x1b2a6f0)
    (data1_val=0x1b2a6f0)
    (data2_val=0x1b2a6f0)
    (data3_val=0x1b2a6f0)
    (data4_val=0x1b2a6f0)
    (data5_val=0x1b2a6f0)
    (data8_val=0x1b2a6f0)
    (data9_val=0x1b2a6f0)
    (data10_val=0x1b2a6f0)
    (data11_val=0x1b2a6f0)
target=0, linearSearch=[0, 22]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x1b2ad30)
    (data1_def=0x1b2ad30)
    (data2_def=0x1b2ad30)
    (data3_def=0x1b2ad30)
    (data4_def=0x1b2ad30)
    (data5_def=0x1b2ad30)
    (data8_def=0x1b2ad30)
    (data9_def=0x1b2ad30)
    (data10_def=0x1b2ad30)
    (data11_def=0x1b2ad30)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x1b2ad30)
    (data1=0x1b2ad30)
    (data2=0x1b2ad30)
    (data3=0x1b2ad30)
    (data4=0x1b2ad30)
    (data5=0x1b2ad30)
    (data8=0x1b2ad30)
    (data9=0x1b2ad30)
    (data10=0x1b2ad30)
    (data11=0x1b2ad30)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x1b2ad30)
    (data1_val=0x1b2ad30)
    (data2_val=0x1b2ad30)
    (data3_val=0x1b2ad30)
    (data4_val=0x1b2ad30)
    (data5_val=0x1b2ad30)
    (data8_val=0x1b2ad30)
    (data9_val=0x1b2ad30)
    (data10_val=0x1b2ad30)
    (data11_val=0x1b2ad30)
target=2, linearSearch=[2, 42]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x1b2a830)
    (data1_def=0x1b2a830)
    (data2_def=0x1b2a830)
    (data3_def=0x1b2a830)
    (data4_def=0x1b2a830)
    (data5_def=0x1b2a830)
    (data8_def=0x1b2a830)
    (data9_def=0x1b2a830)
    (data10_def=0x1b2a830)
    (data11_def=0x1b2a830)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x1b2a830)
    (data1=0x1b2a830)
    (data2=0x1b2a830)
    (data3=0x1b2a830)
    (data4=0x1b2a830)
    (data5=0x1b2a830)
    (data8=0x1b2a830)
    (data9=0x1b2a830)
    (data10=0x1b2a830)
    (data11=0x1b2a830)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x1b2a830)
    (data1_val=0x1b2a830)
    (data2_val=0x1b2a830)
    (data3_val=0x1b2a830)
    (data4_val=0x1b2a830)
    (data5_val=0x1b2a830)
    (data8_val=0x1b2a830)
    (data9_val=0x1b2a830)
    (data10_val=0x1b2a830)
    (data11_val=0x1b2a830)
target=6, linearSearch=[6, 26]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x1b2a650)
    (data1_def=0x1b2a650)
    (data2_def=0x1b2a650)
    (data3_def=0x1b2a650)
    (data4_def=0x1b2a650)
    (data5_def=0x1b2a650)
    (data8_def=0x1b2a650)
    (data9_def=0x1b2a650)
    (data10_def=0x1b2a650)
    (data11_def=0x1b2a650)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x1b2a650)
    (data1=0x1b2a650)
    (data2=0x1b2a650)
    (data3=0x1b2a650)
    (data4=0x1b2a650)
    (data5=0x1b2a650)
    (data8=0x1b2a650)
    (data9=0x1b2a650)
    (data10=0x1b2a650)
    (data11=0x1b2a650)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x1b2a650)
    (data1_val=0x1b2a650)
    (data2_val=0x1b2a650)
    (data3_val=0x1b2a650)
    (data4_val=0x1b2a650)
    (data5_val=0x1b2a650)
    (data8_val=0x1b2a650)
    (data9_val=0x1b2a650)
    (data10_val=0x1b2a650)
    (data11_val=0x1b2a650)
target=14, linearSearch=[14, 20]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x1b2a4c0)
    (data1_def=0x1b2a4c0)
    (data2_def=0x1b2a4c0)
    (data3_def=0x1b2a4c0)
    (data4_def=0x1b2a4c0)
    (data5_def=0x1b2a4c0)
    (data8_def=0x1b2a4c0)
    (data9_def=0x1b2a4c0)
    (data10_def=0x1b2a4c0)
    (data11_def=0x1b2a4c0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x1b2a4c0)
    (data1=0x1b2a4c0)
    (data2=0x1b2a4c0)
    (data3=0x1b2a4c0)
    (data4=0x1b2a4c0)
    (data5=0x1b2a4c0)
    (data8=0x1b2a4c0)
    (data9=0x1b2a4c0)
    (data10=0x1b2a4c0)
    (data11=0x1b2a4c0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x1b2a4c0)
    (data1_val=0x1b2a4c0)
    (data2_val=0x1b2a4c0)
    (data3_val=0x1b2a4c0)
    (data4_val=0x1b2a4c0)
    (data5_val=0x1b2a4c0)
    (data8_val=0x1b2a4c0)
    (data9_val=0x1b2a4c0)
    (data10_val=0x1b2a4c0)
    (data11_val=0x1b2a4c0)
target=30, linearSearch=[30, 15]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=(nil))
    (data1_def=(nil))
    (data2_def=(nil))
    (data3_def=(nil))
    (data4_def=(nil))
    (data5_def=(nil))
    (data8_def=(nil))
    (data9_def=(nil))
    (data10_def=(nil))
    (data11_def=(nil))
  linearSearch(*array_shuffle1, search_predicate);
    (data=(nil))
    (data1=(nil))
    (data2=(nil))
    (data3=(nil))
    (data4=(nil))
    (data5=(nil))
    (data8=(nil))
    (data9=(nil))
    (data10=(nil))
    (data11=(nil))
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=(nil))
    (data1_val=(nil))
    (data2_val=(nil))
    (data3_val=(nil))
    (data4_val=(nil))
    (data5_val=(nil))
    (data8_val=(nil))
    (data9_val=(nil))
    (data10_val=(nil))
    (data11_val=(nil))
target=62, linearSearch=nullptr
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=(nil))
    (data1_def=(nil))
    (data2_def=(nil))
    (data3_def=(nil))
    (data4_def=(nil))
    (data5_def=(nil))
    (data8_def=(nil))
    (data9_def=(nil))
    (data10_def=(nil))
    (data11_def=(nil))
  linearSearch(*array_shuffle1, search_predicate);
    (data=(nil))
    (data1=(nil))
    (data2=(nil))
    (data3=(nil))
    (data4=(nil))
    (data5=(nil))
    (data8=(nil))
    (data9=(nil))
    (data10=(nil))
    (data11=(nil))
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=(nil))
    (data1_val=(nil))
    (data2_val=(nil))
    (data3_val=(nil))
    (data4_val=(nil))
    (data5_val=(nil))
    (data8_val=(nil))
    (data9_val=(nil))
    (data10_val=(nil))
    (data11_val=(nil))
target=126, linearSearch=nullptr
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=(nil))
    (data1_def=(nil))
    (data2_def=(nil))
    (data3_def=(nil))
    (data4_def=(nil))
    (data5_def=(nil))
    (data8_def=(nil))
    (data9_def=(nil))
    (data10_def=(nil))
    (data11_def=(nil))
  linearSearch(*array_shuffle1, search_predicate);
    (data=(nil))
    (data1=(nil))
    (data2=(nil))
    (data3=(nil))
    (data4=(nil))
    (data5=(nil))
    (data8=(nil))
    (data9=(nil))
    (data10=(nil))
    (data11=(nil))
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=(nil))
    (data1_val=(nil))
    (data2_val=(nil))
    (data3_val=(nil))
    (data4_val=(nil))
    (data5_val=(nil))
    (data8_val=(nil))
    (data9_val=(nil))
    (data10_val=(nil))
    (data11_val=(nil))
target=254, linearSearch=nullptr

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=(nil))
    (data1_def=(nil))
    (data2_def=(nil))
    (data3_def=(nil))
    (data4_def=(nil))
    (data5_def=(nil))
    (data8_def=(nil))
    (data9_def=(nil))
   (data10_def=(nil))
    (data11_def=(nil))
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=(nil))
    (data1=(nil))
    (data2=(nil))
    (data3=(nil))
    (data4=(nil))
    (data5=(nil))
    (data8=(nil))
    (data9=(nil))
    (data10=(nil))
    (data11=(nil))
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=(nil))
    (data1_val=(nil))
    (data2_val=(nil))
    (data3_val=(nil))
    (data4_val=(nil))
    (data5_val=(nil))
    (data8_val=(nil))
    (data9_val=(nil))
    (data10_val=(nil))
    (data11_val=(nil))
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x1b2a010)
    (data1_def=0x1b2a010)
    (data2_def=0x1b2a010)
    (data3_def=0x1b2a010)
    (data4_def=0x1b2a010)
    (data5_def=0x1b2a010)
    (data8_def=0x1b2a010)
    (data9_def=0x1b2a010)
   (data10_def=0x1b2a010)
    (data11_def=0x1b2a010)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x1b2a010)
    (data1=0x1b2a010)
    (data2=0x1b2a010)
    (data3=0x1b2a010)
    (data4=0x1b2a010)
    (data5=0x1b2a010)
    (data8=0x1b2a010)
    (data9=0x1b2a010)
    (data10=0x1b2a010)
    (data11=0x1b2a010)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x1b2a010)
    (data1_val=0x1b2a010)
    (data2_val=0x1b2a010)
    (data3_val=0x1b2a010)
    (data4_val=0x1b2a010)
    (data5_val=0x1b2a010)
    (data8_val=0x1b2a010)
    (data9_val=0x1b2a010)
    (data10_val=0x1b2a010)
    (data11_val=0x1b2a010)
target=0, binarySearch=[0, 91]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x1b2a1f0)
    (data1_def=0x1b2a1f0)
    (data2_def=0x1b2a1f0)
    (data3_def=0x1b2a1f0)
    (data4_def=0x1b2a1f0)
    (data5_def=0x1b2a1f0)
    (data8_def=0x1b2a1f0)
    (data9_def=0x1b2a1f0)
   (data10_def=0x1b2a1f0)
    (data11_def=0x1b2a1f0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x1b2a1f0)
    (data1=0x1b2a1f0)
    (data2=0x1b2a1f0)
    (data3=0x1b2a1f0)
    (data4=0x1b2a1f0)
    (data5=0x1b2a1f0)
    (data8=0x1b2a1f0)
    (data9=0x1b2a1f0)
    (data10=0x1b2a1f0)
    (data11=0x1b2a1f0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x1b2a1f0)
    (data1_val=0x1b2a1f0)
    (data2_val=0x1b2a1f0)
    (data3_val=0x1b2a1f0)
    (data4_val=0x1b2a1f0)
    (data5_val=0x1b2a1f0)
    (data8_val=0x1b2a1f0)
    (data9_val=0x1b2a1f0)
    (data10_val=0x1b2a1f0)
    (data11_val=0x1b2a1f0)
target=2, binarySearch=[2, 68]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x1b2a5b0)
    (data1_def=0x1b2a5b0)
    (data2_def=0x1b2a5b0)
    (data3_def=0x1b2a5b0)
    (data4_def=0x1b2a5b0)
    (data5_def=0x1b2a5b0)
    (data8_def=0x1b2a5b0)
    (data9_def=0x1b2a5b0)
   (data10_def=0x1b2a5b0)
    (data11_def=0x1b2a5b0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x1b2a5b0)
    (data1=0x1b2a5b0)
    (data2=0x1b2a5b0)
    (data3=0x1b2a5b0)
    (data4=0x1b2a5b0)
    (data5=0x1b2a5b0)
    (data8=0x1b2a5b0)
    (data9=0x1b2a5b0)
    (data10=0x1b2a5b0)
    (data11=0x1b2a5b0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x1b2a5b0)
    (data1_val=0x1b2a5b0)
    (data2_val=0x1b2a5b0)
    (data3_val=0x1b2a5b0)
    (data4_val=0x1b2a5b0)
    (data5_val=0x1b2a5b0)
    (data8_val=0x1b2a5b0)
    (data9_val=0x1b2a5b0)
    (data10_val=0x1b2a5b0)
    (data11_val=0x1b2a5b0)
target=6, binarySearch=[6, 67]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x1b2ad30)
    (data1_def=0x1b2ad30)
    (data2_def=0x1b2ad30)
    (data3_def=0x1b2ad30)
    (data4_def=0x1b2ad30)
    (data5_def=0x1b2ad30)
    (data8_def=0x1b2ad30)
    (data9_def=0x1b2ad30)
   (data10_def=0x1b2ad30)
    (data11_def=0x1b2ad30)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x1b2ad30)
    (data1=0x1b2ad30)
    (data2=0x1b2ad30)
    (data3=0x1b2ad30)
    (data4=0x1b2ad30)
    (data5=0x1b2ad30)
    (data8=0x1b2ad30)
    (data9=0x1b2ad30)
    (data10=0x1b2ad30)
    (data11=0x1b2ad30)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x1b2ad30)
    (data1_val=0x1b2ad30)
    (data2_val=0x1b2ad30)
    (data3_val=0x1b2ad30)
    (data4_val=0x1b2ad30)
    (data5_val=0x1b2ad30)
    (data8_val=0x1b2ad30)
    (data9_val=0x1b2ad30)
    (data10_val=0x1b2ad30)
    (data11_val=0x1b2ad30)
target=14, binarySearch=[14, 82]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x1b2bc30)
    (data1_def=0x1b2bc30)
    (data2_def=0x1b2bc30)
    (data3_def=0x1b2bc30)
    (data4_def=0x1b2bc30)
    (data5_def=0x1b2bc30)
    (data8_def=0x1b2bc30)
    (data9_def=0x1b2bc30)
   (data10_def=0x1b2bc30)
    (data11_def=0x1b2bc30)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x1b2bc30)
    (data1=0x1b2bc30)
    (data2=0x1b2bc30)
    (data3=0x1b2bc30)
    (data4=0x1b2bc30)
    (data5=0x1b2bc30)
    (data8=0x1b2bc30)
    (data9=0x1b2bc30)
    (data10=0x1b2bc30)
    (data11=0x1b2bc30)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x1b2bc30)
    (data1_val=0x1b2bc30)
    (data2_val=0x1b2bc30)
    (data3_val=0x1b2bc30)
    (data4_val=0x1b2bc30)
    (data5_val=0x1b2bc30)
    (data8_val=0x1b2bc30)
    (data9_val=0x1b2bc30)
    (data10_val=0x1b2bc30)
    (data11_val=0x1b2bc30)
target=30, binarySearch=[30, 59]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=(nil))
    (data1_def=(nil))
    (data2_def=(nil))
    (data3_def=(nil))
    (data4_def=(nil))
    (data5_def=(nil))
    (data8_def=(nil))
    (data9_def=(nil))
   (data10_def=(nil))
    (data11_def=(nil))
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=(nil))
    (data1=(nil))
    (data2=(nil))
    (data3=(nil))
    (data4=(nil))
    (data5=(nil))
    (data8=(nil))
    (data9=(nil))
    (data10=(nil))
    (data11=(nil))
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=(nil))
    (data1_val=(nil))
    (data2_val=(nil))
    (data3_val=(nil))
    (data4_val=(nil))
    (data5_val=(nil))
    (data8_val=(nil))
    (data9_val=(nil))
    (data10_val=(nil))
    (data11_val=(nil))
target=62, binarySearch=nullptr
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=(nil))
    (data1_def=(nil))
    (data2_def=(nil))
    (data3_def=(nil))
    (data4_def=(nil))
    (data5_def=(nil))
    (data8_def=(nil))
    (data9_def=(nil))
   (data10_def=(nil))
    (data11_def=(nil))
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=(nil))
    (data1=(nil))
    (data2=(nil))
    (data3=(nil))
    (data4=(nil))
    (data5=(nil))
    (data8=(nil))
    (data9=(nil))
    (data10=(nil))
    (data11=(nil))
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=(nil))
    (data1_val=(nil))
    (data2_val=(nil))
    (data3_val=(nil))
    (data4_val=(nil))
    (data5_val=(nil))
    (data8_val=(nil))
    (data9_val=(nil))
    (data10_val=(nil))
    (data11_val=(nil))
target=126, binarySearch=nullptr
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=(nil))
    (data1_def=(nil))
    (data2_def=(nil))
    (data3_def=(nil))
    (data4_def=(nil))
    (data5_def=(nil))
    (data8_def=(nil))
    (data9_def=(nil))
   (data10_def=(nil))
    (data11_def=(nil))
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=(nil))
    (data1=(nil))
    (data2=(nil))
    (data3=(nil))
    (data4=(nil))
    (data5=(nil))
    (data8=(nil))
    (data9=(nil))
    (data10=(nil))
    (data11=(nil))
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=(nil))
    (data1_val=(nil))
    (data2_val=(nil))
    (data3_val=(nil))
    (data4_val=(nil))
    (data5_val=(nil))
    (data8_val=(nil))
    (data9_val=(nil))
    (data10_val=(nil))
    (data11_val=(nil))
target=254, binarySearch=nullptr
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=0.009583638 sec.
