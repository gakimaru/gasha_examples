============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=5004 / record(s)=10000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=5040 / record(s)=10000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=4994 / record(s)=10000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=10000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=3333 / record(s)=10000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=10000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=4943 / record(s)=10000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001231000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001238000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001227000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000303000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000479000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000294000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001009000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.005781000 sec.
* Average time     = 0.000825857 sec.
* Min time         = 0.000294000 sec.
* Max time         = 0.001238000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000872000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000877000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000919000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000390000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001685000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000678000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001389000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.006810000 sec.
* Average time     = 0.000972857 sec.
* Min time         = 0.000390000 sec.
* Max time         = 0.001685000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000774000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001005000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000772000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000239000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001446000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000245000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000733000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.005214000 sec.
* Average time     = 0.000744857 sec.
* Min time         = 0.000239000 sec.
* Max time         = 0.001446000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000698000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000883000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000798000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000293000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001302000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000275000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000727000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.004976000 sec.
* Average time     = 0.000710857 sec.
* Min time         = 0.000275000 sec.
* Max time         = 0.001302000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000713000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000697000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000698000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000278000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001359000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000317000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000910000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.004972000 sec.
* Average time     = 0.000710286 sec.
* Min time         = 0.000278000 sec.
* Max time         = 0.001359000 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001213000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001177000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001160000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000894000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000981000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000898000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001163000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.007486000 sec.
* Average time     = 0.001069429 sec.
* Min time         = 0.000894000 sec.
* Max time         = 0.001213000 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.396237000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24928612 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.317762000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24785773 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.329840000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25072530 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000023000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.486177000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.066325000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.405899000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37273739 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 2.002263000 sec.
* Average time     = 0.286037571 sec.
* Min time         = 0.000023000 sec.
* Max time         = 0.486177000 sec.
* Total Swapped    = 162065650 count(s)
* Average  Swapped =  23152235 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.303518000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24928612 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.308389000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24785773 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.294924000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25072530 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000036000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.492146000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000333000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.402208000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37273739 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 1.801554000 sec.
* Average time     = 0.257364857 sec.
* Min time         = 0.000036000 sec.
* Max time         = 0.492146000 sec.
* Total Swapped    = 162065650 count(s)
* Average  Swapped =  23152235 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.102752000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24928612 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.113174000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24785773 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.145928000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25072530 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000016000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.156247000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.032182000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.170102000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37273739 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.720401000 sec.
* Average time     = 0.102914429 sec.
* Min time         = 0.000016000 sec.
* Max time         = 0.170102000 sec.
* Total Swapped    = 162065650 count(s)
* Average  Swapped =  23152235 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.006492000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1907513 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.006365000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1900610 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.009933000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1913805 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001398000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=494802 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.003962000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1474414 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001550000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=514605 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.005979000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1895833 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.035679000 sec.
* Average time     = 0.005097000 sec.
* Min time         = 0.001398000 sec.
* Max time         = 0.009933000 sec.
* Total Swapped    =  10101582 count(s)
* Average  Swapped =   1443083 count(s)
* Min Swapped      =    494802 count(s)
* Max Swapped      =   1913805 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001127000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=56744 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001125000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57503 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001111000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57626 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000511000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000673000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=18345 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000590000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=7303 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001147000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=58579 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.006284000 sec.
* Average time     = 0.000897714 sec.
* Min time         = 0.000511000 sec.
* Max time         = 0.001147000 sec.
* Total Swapped    =    256100 count(s)
* Average  Swapped =     36585 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     58579 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.236924000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24928612 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.248390000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24785773 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.249454000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25072530 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000062000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.500953000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000186000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.360729000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37273739 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 1.596698000 sec.
* Average time     = 0.228099714 sec.
* Min time         = 0.000062000 sec.
* Max time         = 0.500953000 sec.
* Total Swapped    = 162065650 count(s)
* Average  Swapped =  23152235 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000901000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33316 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000881000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33617 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000813000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33331 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000229000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000245000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000206000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000853000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=35947 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.004128000 sec.
* Average time     = 0.000589714 sec.
* Min time         = 0.000206000 sec.
* Max time         = 0.000901000 sec.
* Total Swapped    =    151211 count(s)
* Average  Swapped =     21601 count(s)
* Min Swapped      =      3333 count(s)
* Max Swapped      =     35947 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.078359000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9987 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.081426000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9993 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.081396000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9995 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.082528000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.097946000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.077139000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.081132000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9987 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.579926000 sec.
* Average time     = 0.082846571 sec.
* Min time         = 0.077139000 sec.
* Max time         = 0.097946000 sec.
* Total Swapped    =     48298 count(s)
* Average  Swapped =      6899 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001785000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129453 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001766000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129590 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001845000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129406 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.002172000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=218680 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001401000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=116627 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.002276000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=213143 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001693000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=123233 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.012938000 sec.
* Average time     = 0.001848286 sec.
* Min time         = 0.001401000 sec.
* Max time         = 0.002276000 sec.
* Total Swapped    =   1060132 count(s)
* Average  Swapped =    151447 count(s)
* Min Swapped      =    116627 count(s)
* Max Swapped      =    218680 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.138322000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9988 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.137548000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9992 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.132204000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9988 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000022000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.287447000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000143000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.223484000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9986 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.919170000 sec.
* Average time     = 0.131310000 sec.
* Min time         = 0.000022000 sec.
* Max time         = 0.287447000 sec.
* Total Swapped    =     59952 count(s)
* Average  Swapped =      8564 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001402000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48881 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001358000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48400 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001497000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49161 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000139000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000522000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=37222 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000203000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=5156 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001300000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49801 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.006421000 sec.
* Average time     = 0.000917286 sec.
* Min time         = 0.000139000 sec.
* Max time         = 0.001497000 sec.
* Total Swapped    =    238621 count(s)
* Average  Swapped =     34088 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     49801 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.092112000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58247 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.092649000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58256 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.093492000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58341 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000050000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.193074000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=60442 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000167000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.146666000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58237 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.618210000 sec.
* Average time     = 0.088315714 sec.
* Min time         = 0.000050000 sec.
* Max time         = 0.193074000 sec.
* Total Swapped    =    303529 count(s)
* Average  Swapped =     43361 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     60442 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000806000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31094 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000743000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=30961 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000724000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31118 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000021000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000168000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=6022 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000140000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1024 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000749000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=34513 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.003351000 sec.
* Average time     = 0.000478714 sec.
* Min time         = 0.000021000 sec.
* Max time         = 0.000806000 sec.
* Total Swapped    =    134732 count(s)
* Average  Swapped =     19247 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     34513 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000435000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000340000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000337000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000109000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000194000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000116000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000319000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.001850000 sec.
* Average time     = 0.000264286 sec.
* Min time         = 0.000109000 sec.
* Max time         = 0.000435000 sec.
* Total Swapped    =     50002 count(s)
* Average  Swapped =      7143 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     10000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 10000 Count(s)
Total Array size   = 800000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.005781000/  0.000825857/  0.000294000/  0.001238000
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.006810000/  0.000972857/  0.000390000/  0.001685000
- std::sort(inline-func):   0.005214000/  0.000744857/  0.000239000/  0.001446000
- std::sort(functor):       0.004976000/  0.000710857/  0.000275000/  0.001302000
- std::sort(lambda):        0.004972000/  0.000710286/  0.000278000/  0.001359000
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.007486000/  0.001069429/  0.000894000/  0.001213000
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           2.002263000/  0.286037571/  0.000023000/  0.486177000  162065650/   23152235/          0/   49985001
- Shaker sort<S>:           1.801554000/  0.257364857/  0.000036000/  0.492146000  162065650/   23152235/          0/   49985001
- Odd-Even sort<S>:         0.720401000/  0.102914429/  0.000016000/  0.170102000  162065650/   23152235/          0/   49985001
- Shear sort:               0.035679000/  0.005097000/  0.001398000/  0.009933000   10101582/    1443083/     494802/    1913805
- Comb sort:                0.006284000/  0.000897714/  0.000511000/  0.001147000     256100/      36585/          0/      58579
- Gnome sort<S>:            1.596698000/  0.228099714/  0.000062000/  0.500953000  162065650/   23152235/          0/   49985001
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.004128000/  0.000589714/  0.000206000/  0.000901000     151211/      21601/       3333/      35947
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.579926000/  0.082846571/  0.077139000/  0.097946000      48298/       6899/          0/       9995
- Heap sort:                0.012938000/  0.001848286/  0.001401000/  0.002276000    1060132/     151447/     116627/     218680
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.919170000/  0.131310000/  0.000022000/  0.287447000      59952/       8564/          0/       9999
- Shell sort:               0.006421000/  0.000917286/  0.000139000/  0.001497000     238621/      34088/          0/      49801
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.618210000/  0.088315714/  0.000050000/  0.193074000     303529/      43361/          0/      60442
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.003351000/  0.000478714/  0.000021000/  0.000806000     134732/      19247/          0/      34513
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.001850000/  0.000264286/  0.000109000/  0.000435000      50002/       7143/          0/      10000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=31094)
(result1=31094)
(result3=31094)
(result4=31094)
(result5=31094)
(result6=31094)
(result8=31094)
(result9=31094)
(result10=31094)
(result11=31462)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=(nil))
    (data1_def=(nil))
    (data2_def=(nil))
    (data3_def=(nil))
    (data4_def=(nil))
    (data5_def=(nil))
    (data8_def=(nil))
    (data9_def=(nil))
    (data10_def=(nil))
    (data11_def=(nil))
  linearSearch(*array_shuffle1, search_predicate);
    (data=(nil))
    (data1=(nil))
    (data2=(nil))
    (data3=(nil))
    (data4=(nil))
    (data5=(nil))
    (data8=(nil))
    (data9=(nil))
    (data10=(nil))
    (data11=(nil))
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=(nil))
    (data1_val=(nil))
    (data2_val=(nil))
    (data3_val=(nil))
    (data4_val=(nil))
    (data5_val=(nil))
    (data8_val=(nil))
    (data9_val=(nil))
    (data10_val=(nil))
    (data11_val=(nil))
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x7ffcf3795ed0)
    (data1_def=0x7ffcf3795ed0)
    (data2_def=0x7ffcf3795ed0)
    (data3_def=0x7ffcf3795ed0)
    (data4_def=0x7ffcf3795ed0)
    (data5_def=0x7ffcf3795ed0)
    (data8_def=0x7ffcf3795ed0)
    (data9_def=0x7ffcf3795ed0)
    (data10_def=0x7ffcf3795ed0)
    (data11_def=0x7ffcf3795ed0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x7ffcf3795ed0)
    (data1=0x7ffcf3795ed0)
    (data2=0x7ffcf3795ed0)
    (data3=0x7ffcf3795ed0)
    (data4=0x7ffcf3795ed0)
    (data5=0x7ffcf3795ed0)
    (data8=0x7ffcf3795ed0)
    (data9=0x7ffcf3795ed0)
    (data10=0x7ffcf3795ed0)
    (data11=0x7ffcf3795ed0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x7ffcf3795ed0)
    (data1_val=0x7ffcf3795ed0)
    (data2_val=0x7ffcf3795ed0)
    (data3_val=0x7ffcf3795ed0)
    (data4_val=0x7ffcf3795ed0)
    (data5_val=0x7ffcf3795ed0)
    (data8_val=0x7ffcf3795ed0)
    (data9_val=0x7ffcf3795ed0)
    (data10_val=0x7ffcf3795ed0)
    (data11_val=0x7ffcf3795ed0)
target=0, linearSearch=[0, 1276]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x7ffcf378b610)
    (data1_def=0x7ffcf378b610)
    (data2_def=0x7ffcf378b610)
    (data3_def=0x7ffcf378b610)
    (data4_def=0x7ffcf378b610)
    (data5_def=0x7ffcf378b610)
    (data8_def=0x7ffcf378b610)
    (data9_def=0x7ffcf378b610)
    (data10_def=0x7ffcf378b610)
    (data11_def=0x7ffcf378b610)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x7ffcf378b610)
    (data1=0x7ffcf378b610)
    (data2=0x7ffcf378b610)
    (data3=0x7ffcf378b610)
    (data4=0x7ffcf378b610)
    (data5=0x7ffcf378b610)
    (data8=0x7ffcf378b610)
    (data9=0x7ffcf378b610)
    (data10=0x7ffcf378b610)
    (data11=0x7ffcf378b610)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x7ffcf378b610)
    (data1_val=0x7ffcf378b610)
    (data2_val=0x7ffcf378b610)
    (data3_val=0x7ffcf378b610)
    (data4_val=0x7ffcf378b610)
    (data5_val=0x7ffcf378b610)
    (data8_val=0x7ffcf378b610)
    (data9_val=0x7ffcf378b610)
    (data10_val=0x7ffcf378b610)
    (data11_val=0x7ffcf378b610)
target=2, linearSearch=[2, 736]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x7ffcf378cf60)
    (data1_def=0x7ffcf378cf60)
    (data2_def=0x7ffcf378cf60)
    (data3_def=0x7ffcf378cf60)
    (data4_def=0x7ffcf378cf60)
    (data5_def=0x7ffcf378cf60)
    (data8_def=0x7ffcf378cf60)
    (data9_def=0x7ffcf378cf60)
    (data10_def=0x7ffcf378cf60)
    (data11_def=0x7ffcf378cf60)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x7ffcf378cf60)
    (data1=0x7ffcf378cf60)
    (data2=0x7ffcf378cf60)
    (data3=0x7ffcf378cf60)
    (data4=0x7ffcf378cf60)
    (data5=0x7ffcf378cf60)
    (data8=0x7ffcf378cf60)
    (data9=0x7ffcf378cf60)
    (data10=0x7ffcf378cf60)
    (data11=0x7ffcf378cf60)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x7ffcf378cf60)
    (data1_val=0x7ffcf378cf60)
    (data2_val=0x7ffcf378cf60)
    (data3_val=0x7ffcf378cf60)
    (data4_val=0x7ffcf378cf60)
    (data5_val=0x7ffcf378cf60)
    (data8_val=0x7ffcf378cf60)
    (data9_val=0x7ffcf378cf60)
    (data10_val=0x7ffcf378cf60)
    (data11_val=0x7ffcf378cf60)
target=6, linearSearch=[6, 817]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x7ffcf3780bc0)
    (data1_def=0x7ffcf3780bc0)
    (data2_def=0x7ffcf3780bc0)
    (data3_def=0x7ffcf3780bc0)
    (data4_def=0x7ffcf3780bc0)
    (data5_def=0x7ffcf3780bc0)
    (data8_def=0x7ffcf3780bc0)
    (data9_def=0x7ffcf3780bc0)
    (data10_def=0x7ffcf3780bc0)
    (data11_def=0x7ffcf3780bc0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x7ffcf3780bc0)
    (data1=0x7ffcf3780bc0)
    (data2=0x7ffcf3780bc0)
    (data3=0x7ffcf3780bc0)
    (data4=0x7ffcf3780bc0)
    (data5=0x7ffcf3780bc0)
    (data8=0x7ffcf3780bc0)
    (data9=0x7ffcf3780bc0)
    (data10=0x7ffcf3780bc0)
    (data11=0x7ffcf3780bc0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x7ffcf3780bc0)
    (data1_val=0x7ffcf3780bc0)
    (data2_val=0x7ffcf3780bc0)
    (data3_val=0x7ffcf3780bc0)
    (data4_val=0x7ffcf3780bc0)
    (data5_val=0x7ffcf3780bc0)
    (data8_val=0x7ffcf3780bc0)
    (data9_val=0x7ffcf3780bc0)
    (data10_val=0x7ffcf3780bc0)
    (data11_val=0x7ffcf3780bc0)
target=14, linearSearch=[14, 191]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x7ffcf37c3790)
    (data1_def=0x7ffcf37c3790)
    (data2_def=0x7ffcf37c3790)
    (data3_def=0x7ffcf37c3790)
    (data4_def=0x7ffcf37c3790)
    (data5_def=0x7ffcf37c3790)
    (data8_def=0x7ffcf37c3790)
    (data9_def=0x7ffcf37c3790)
    (data10_def=0x7ffcf37c3790)
    (data11_def=0x7ffcf37c3790)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x7ffcf37c3790)
    (data1=0x7ffcf37c3790)
    (data2=0x7ffcf37c3790)
    (data3=0x7ffcf37c3790)
    (data4=0x7ffcf37c3790)
    (data5=0x7ffcf37c3790)
    (data8=0x7ffcf37c3790)
    (data9=0x7ffcf37c3790)
    (data10=0x7ffcf37c3790)
    (data11=0x7ffcf37c3790)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x7ffcf37c3790)
    (data1_val=0x7ffcf37c3790)
    (data2_val=0x7ffcf37c3790)
    (data3_val=0x7ffcf37c3790)
    (data4_val=0x7ffcf37c3790)
    (data5_val=0x7ffcf37c3790)
    (data8_val=0x7ffcf37c3790)
    (data9_val=0x7ffcf37c3790)
    (data10_val=0x7ffcf37c3790)
    (data11_val=0x7ffcf37c3790)
target=30, linearSearch=[30, 3608]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x7ffcf37a8710)
    (data1_def=0x7ffcf37a8710)
    (data2_def=0x7ffcf37a8710)
    (data3_def=0x7ffcf37a8710)
    (data4_def=0x7ffcf37a8710)
    (data5_def=0x7ffcf37a8710)
    (data8_def=0x7ffcf37a8710)
    (data9_def=0x7ffcf37a8710)
    (data10_def=0x7ffcf37a8710)
    (data11_def=0x7ffcf37a8710)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x7ffcf37a8710)
    (data1=0x7ffcf37a8710)
    (data2=0x7ffcf37a8710)
    (data3=0x7ffcf37a8710)
    (data4=0x7ffcf37a8710)
    (data5=0x7ffcf37a8710)
    (data8=0x7ffcf37a8710)
    (data9=0x7ffcf37a8710)
    (data10=0x7ffcf37a8710)
    (data11=0x7ffcf37a8710)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x7ffcf37a8710)
    (data1_val=0x7ffcf37a8710)
    (data2_val=0x7ffcf37a8710)
    (data3_val=0x7ffcf37a8710)
    (data4_val=0x7ffcf37a8710)
    (data5_val=0x7ffcf37a8710)
    (data8_val=0x7ffcf37a8710)
    (data9_val=0x7ffcf37a8710)
    (data10_val=0x7ffcf37a8710)
    (data11_val=0x7ffcf37a8710)
target=62, linearSearch=[62, 2224]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x7ffcf379bc40)
    (data1_def=0x7ffcf379bc40)
    (data2_def=0x7ffcf379bc40)
    (data3_def=0x7ffcf379bc40)
    (data4_def=0x7ffcf379bc40)
    (data5_def=0x7ffcf379bc40)
    (data8_def=0x7ffcf379bc40)
    (data9_def=0x7ffcf379bc40)
    (data10_def=0x7ffcf379bc40)
    (data11_def=0x7ffcf379bc40)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x7ffcf379bc40)
    (data1=0x7ffcf379bc40)
    (data2=0x7ffcf379bc40)
    (data3=0x7ffcf379bc40)
    (data4=0x7ffcf379bc40)
    (data5=0x7ffcf379bc40)
    (data8=0x7ffcf379bc40)
    (data9=0x7ffcf379bc40)
    (data10=0x7ffcf379bc40)
    (data11=0x7ffcf379bc40)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x7ffcf379bc40)
    (data1_val=0x7ffcf379bc40)
    (data2_val=0x7ffcf379bc40)
    (data3_val=0x7ffcf379bc40)
    (data4_val=0x7ffcf379bc40)
    (data5_val=0x7ffcf379bc40)
    (data8_val=0x7ffcf379bc40)
    (data9_val=0x7ffcf379bc40)
    (data10_val=0x7ffcf379bc40)
    (data11_val=0x7ffcf379bc40)
target=126, linearSearch=[126, 1575]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x7ffcf37f12d0)
    (data1_def=0x7ffcf37f12d0)
    (data2_def=0x7ffcf37f12d0)
    (data3_def=0x7ffcf37f12d0)
    (data4_def=0x7ffcf37f12d0)
    (data5_def=0x7ffcf37f12d0)
    (data8_def=0x7ffcf37f12d0)
    (data9_def=0x7ffcf37f12d0)
    (data10_def=0x7ffcf37f12d0)
    (data11_def=0x7ffcf37f12d0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x7ffcf37f12d0)
    (data1=0x7ffcf37f12d0)
    (data2=0x7ffcf37f12d0)
    (data3=0x7ffcf37f12d0)
    (data4=0x7ffcf37f12d0)
    (data5=0x7ffcf37f12d0)
    (data8=0x7ffcf37f12d0)
    (data9=0x7ffcf37f12d0)
    (data10=0x7ffcf37f12d0)
    (data11=0x7ffcf37f12d0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x7ffcf37f12d0)
    (data1_val=0x7ffcf37f12d0)
    (data2_val=0x7ffcf37f12d0)
    (data3_val=0x7ffcf37f12d0)
    (data4_val=0x7ffcf37f12d0)
    (data5_val=0x7ffcf37f12d0)
    (data8_val=0x7ffcf37f12d0)
    (data9_val=0x7ffcf37f12d0)
    (data10_val=0x7ffcf37f12d0)
    (data11_val=0x7ffcf37f12d0)
target=254, linearSearch=[254, 5948]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=(nil))
    (data1_def=(nil))
    (data2_def=(nil))
    (data3_def=(nil))
    (data4_def=(nil))
    (data5_def=(nil))
    (data8_def=(nil))
    (data9_def=(nil))
   (data10_def=(nil))
    (data11_def=(nil))
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=(nil))
    (data1=(nil))
    (data2=(nil))
    (data3=(nil))
    (data4=(nil))
    (data5=(nil))
    (data8=(nil))
    (data9=(nil))
    (data10=(nil))
    (data11=(nil))
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=(nil))
    (data1_val=(nil))
    (data2_val=(nil))
    (data3_val=(nil))
    (data4_val=(nil))
    (data5_val=(nil))
    (data8_val=(nil))
    (data9_val=(nil))
    (data10_val=(nil))
    (data11_val=(nil))
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x7ffcf377d010)
    (data1_def=0x7ffcf377d010)
    (data2_def=0x7ffcf377d010)
    (data3_def=0x7ffcf377d010)
    (data4_def=0x7ffcf377d010)
    (data5_def=0x7ffcf377d010)
    (data8_def=0x7ffcf377d010)
    (data9_def=0x7ffcf377d010)
   (data10_def=0x7ffcf377d010)
    (data11_def=0x7ffcf377d010)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x7ffcf377d010)
    (data1=0x7ffcf377d010)
    (data2=0x7ffcf377d010)
    (data3=0x7ffcf377d010)
    (data4=0x7ffcf377d010)
    (data5=0x7ffcf377d010)
    (data8=0x7ffcf377d010)
    (data9=0x7ffcf377d010)
    (data10=0x7ffcf377d010)
    (data11=0x7ffcf377d010)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x7ffcf377d010)
    (data1_val=0x7ffcf377d010)
    (data2_val=0x7ffcf377d010)
    (data3_val=0x7ffcf377d010)
    (data4_val=0x7ffcf377d010)
    (data5_val=0x7ffcf377d010)
    (data8_val=0x7ffcf377d010)
    (data9_val=0x7ffcf377d010)
    (data10_val=0x7ffcf377d010)
    (data11_val=0x7ffcf377d010)
target=0, binarySearch=[0, 1276]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x7ffcf377d1f0)
    (data1_def=0x7ffcf377d1f0)
    (data2_def=0x7ffcf377d1f0)
    (data3_def=0x7ffcf377d1f0)
    (data4_def=0x7ffcf377d1f0)
    (data5_def=0x7ffcf377d1f0)
    (data8_def=0x7ffcf377d1f0)
    (data9_def=0x7ffcf377d1f0)
   (data10_def=0x7ffcf377d1f0)
    (data11_def=0x7ffcf377d1f0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x7ffcf377d1f0)
    (data1=0x7ffcf377d1f0)
    (data2=0x7ffcf377d1f0)
    (data3=0x7ffcf377d1f0)
    (data4=0x7ffcf377d1f0)
    (data5=0x7ffcf377d1f0)
    (data8=0x7ffcf377d1f0)
    (data9=0x7ffcf377d1f0)
    (data10=0x7ffcf377d1f0)
    (data11=0x7ffcf377d1f0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x7ffcf377d1f0)
    (data1_val=0x7ffcf377d1f0)
    (data2_val=0x7ffcf377d1f0)
    (data3_val=0x7ffcf377d1f0)
    (data4_val=0x7ffcf377d1f0)
    (data5_val=0x7ffcf377d1f0)
    (data8_val=0x7ffcf377d1f0)
    (data9_val=0x7ffcf377d1f0)
    (data10_val=0x7ffcf377d1f0)
    (data11_val=0x7ffcf377d1f0)
target=2, binarySearch=[2, 4297]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x7ffcf377d5b0)
    (data1_def=0x7ffcf377d5b0)
    (data2_def=0x7ffcf377d5b0)
    (data3_def=0x7ffcf377d5b0)
    (data4_def=0x7ffcf377d5b0)
    (data5_def=0x7ffcf377d5b0)
    (data8_def=0x7ffcf377d5b0)
    (data9_def=0x7ffcf377d5b0)
   (data10_def=0x7ffcf377d5b0)
    (data11_def=0x7ffcf377d5b0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x7ffcf377d5b0)
    (data1=0x7ffcf377d5b0)
    (data2=0x7ffcf377d5b0)
    (data3=0x7ffcf377d5b0)
    (data4=0x7ffcf377d5b0)
    (data5=0x7ffcf377d5b0)
    (data8=0x7ffcf377d5b0)
    (data9=0x7ffcf377d5b0)
    (data10=0x7ffcf377d5b0)
    (data11=0x7ffcf377d5b0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x7ffcf377d5b0)
    (data1_val=0x7ffcf377d5b0)
    (data2_val=0x7ffcf377d5b0)
    (data3_val=0x7ffcf377d5b0)
    (data4_val=0x7ffcf377d5b0)
    (data5_val=0x7ffcf377d5b0)
    (data8_val=0x7ffcf377d5b0)
    (data9_val=0x7ffcf377d5b0)
    (data10_val=0x7ffcf377d5b0)
    (data11_val=0x7ffcf377d5b0)
target=6, binarySearch=[6, 1745]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x7ffcf377dd30)
    (data1_def=0x7ffcf377dd30)
    (data2_def=0x7ffcf377dd30)
    (data3_def=0x7ffcf377dd30)
    (data4_def=0x7ffcf377dd30)
    (data5_def=0x7ffcf377dd30)
    (data8_def=0x7ffcf377dd30)
    (data9_def=0x7ffcf377dd30)
   (data10_def=0x7ffcf377dd30)
    (data11_def=0x7ffcf377dd30)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x7ffcf377dd30)
    (data1=0x7ffcf377dd30)
    (data2=0x7ffcf377dd30)
    (data3=0x7ffcf377dd30)
    (data4=0x7ffcf377dd30)
    (data5=0x7ffcf377dd30)
    (data8=0x7ffcf377dd30)
    (data9=0x7ffcf377dd30)
    (data10=0x7ffcf377dd30)
    (data11=0x7ffcf377dd30)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x7ffcf377dd30)
    (data1_val=0x7ffcf377dd30)
    (data2_val=0x7ffcf377dd30)
    (data3_val=0x7ffcf377dd30)
    (data4_val=0x7ffcf377dd30)
    (data5_val=0x7ffcf377dd30)
    (data8_val=0x7ffcf377dd30)
    (data9_val=0x7ffcf377dd30)
    (data10_val=0x7ffcf377dd30)
    (data11_val=0x7ffcf377dd30)
target=14, binarySearch=[14, 191]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x7ffcf377ec30)
    (data1_def=0x7ffcf377ec30)
    (data2_def=0x7ffcf377ec30)
    (data3_def=0x7ffcf377ec30)
    (data4_def=0x7ffcf377ec30)
    (data5_def=0x7ffcf377ec30)
    (data8_def=0x7ffcf377ec30)
    (data9_def=0x7ffcf377ec30)
   (data10_def=0x7ffcf377ec30)
    (data11_def=0x7ffcf377ec30)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x7ffcf377ec30)
    (data1=0x7ffcf377ec30)
    (data2=0x7ffcf377ec30)
    (data3=0x7ffcf377ec30)
    (data4=0x7ffcf377ec30)
    (data5=0x7ffcf377ec30)
    (data8=0x7ffcf377ec30)
    (data9=0x7ffcf377ec30)
    (data10=0x7ffcf377ec30)
    (data11=0x7ffcf377ec30)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x7ffcf377ec30)
    (data1_val=0x7ffcf377ec30)
    (data2_val=0x7ffcf377ec30)
    (data3_val=0x7ffcf377ec30)
    (data4_val=0x7ffcf377ec30)
    (data5_val=0x7ffcf377ec30)
    (data8_val=0x7ffcf377ec30)
    (data9_val=0x7ffcf377ec30)
    (data10_val=0x7ffcf377ec30)
    (data11_val=0x7ffcf377ec30)
target=30, binarySearch=[30, 6168]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x7ffcf3780a30)
    (data1_def=0x7ffcf3780a30)
    (data2_def=0x7ffcf3780a30)
    (data3_def=0x7ffcf3780a30)
    (data4_def=0x7ffcf3780a30)
    (data5_def=0x7ffcf3780a30)
    (data8_def=0x7ffcf3780a30)
    (data9_def=0x7ffcf3780a30)
   (data10_def=0x7ffcf3780a30)
    (data11_def=0x7ffcf3780a30)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x7ffcf3780a30)
    (data1=0x7ffcf3780a30)
    (data2=0x7ffcf3780a30)
    (data3=0x7ffcf3780a30)
    (data4=0x7ffcf3780a30)
    (data5=0x7ffcf3780a30)
    (data8=0x7ffcf3780a30)
    (data9=0x7ffcf3780a30)
    (data10=0x7ffcf3780a30)
    (data11=0x7ffcf3780a30)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x7ffcf3780a30)
    (data1_val=0x7ffcf3780a30)
    (data2_val=0x7ffcf3780a30)
    (data3_val=0x7ffcf3780a30)
    (data4_val=0x7ffcf3780a30)
    (data5_val=0x7ffcf3780a30)
    (data8_val=0x7ffcf3780a30)
    (data9_val=0x7ffcf3780a30)
    (data10_val=0x7ffcf3780a30)
    (data11_val=0x7ffcf3780a30)
target=62, binarySearch=[62, 4717]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x7ffcf3784630)
    (data1_def=0x7ffcf3784630)
    (data2_def=0x7ffcf3784630)
    (data3_def=0x7ffcf3784630)
    (data4_def=0x7ffcf3784630)
    (data5_def=0x7ffcf3784630)
    (data8_def=0x7ffcf3784630)
    (data9_def=0x7ffcf3784630)
   (data10_def=0x7ffcf3784630)
    (data11_def=0x7ffcf3784630)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x7ffcf3784630)
    (data1=0x7ffcf3784630)
    (data2=0x7ffcf3784630)
    (data3=0x7ffcf3784630)
    (data4=0x7ffcf3784630)
    (data5=0x7ffcf3784630)
    (data8=0x7ffcf3784630)
    (data9=0x7ffcf3784630)
    (data10=0x7ffcf3784630)
    (data11=0x7ffcf3784630)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x7ffcf3784630)
    (data1_val=0x7ffcf3784630)
    (data2_val=0x7ffcf3784630)
    (data3_val=0x7ffcf3784630)
    (data4_val=0x7ffcf3784630)
    (data5_val=0x7ffcf3784630)
    (data8_val=0x7ffcf3784630)
    (data9_val=0x7ffcf3784630)
    (data10_val=0x7ffcf3784630)
    (data11_val=0x7ffcf3784630)
target=126, binarySearch=[126, 2512]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x7ffcf378be30)
    (data1_def=0x7ffcf378be30)
    (data2_def=0x7ffcf378be30)
    (data3_def=0x7ffcf378be30)
    (data4_def=0x7ffcf378be30)
    (data5_def=0x7ffcf378be30)
    (data8_def=0x7ffcf378be30)
    (data9_def=0x7ffcf378be30)
   (data10_def=0x7ffcf378be30)
    (data11_def=0x7ffcf378be30)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x7ffcf378be30)
    (data1=0x7ffcf378be30)
    (data2=0x7ffcf378be30)
    (data3=0x7ffcf378be30)
    (data4=0x7ffcf378be30)
    (data5=0x7ffcf378be30)
    (data8=0x7ffcf378be30)
    (data9=0x7ffcf378be30)
    (data10=0x7ffcf378be30)
    (data11=0x7ffcf378be30)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x7ffcf378be30)
    (data1_val=0x7ffcf378be30)
    (data2_val=0x7ffcf378be30)
    (data3_val=0x7ffcf378be30)
    (data4_val=0x7ffcf378be30)
    (data5_val=0x7ffcf378be30)
    (data8_val=0x7ffcf378be30)
    (data9_val=0x7ffcf378be30)
    (data10_val=0x7ffcf378be30)
    (data11_val=0x7ffcf378be30)
target=254, binarySearch=[254, 8995]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=8.384586000 sec.
