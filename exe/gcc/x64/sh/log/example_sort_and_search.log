============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=5004 / record(s)=10000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=5040 / record(s)=10000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=4994 / record(s)=10000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=10000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=3333 / record(s)=10000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=10000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=4943 / record(s)=10000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001169000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001191000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001340000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000470000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000696000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000457000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001943000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.007266000 sec.
* Average time     = 0.001038000 sec.
* Min time         = 0.000457000 sec.
* Max time         = 0.001943000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001114000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000963000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000869000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000377000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001524000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000395000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000886000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.006128000 sec.
* Average time     = 0.000875429 sec.
* Min time         = 0.000377000 sec.
* Max time         = 0.001524000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000708000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000770000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000812000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000252000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001414000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000253000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000763000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.004972000 sec.
* Average time     = 0.000710286 sec.
* Min time         = 0.000252000 sec.
* Max time         = 0.001414000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000691000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000683000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000675000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000277000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001524000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000273000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000707000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.004830000 sec.
* Average time     = 0.000690000 sec.
* Min time         = 0.000273000 sec.
* Max time         = 0.001524000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000685000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000690000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000697000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000269000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001467000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000297000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000710000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.004815000 sec.
* Average time     = 0.000687857 sec.
* Min time         = 0.000269000 sec.
* Max time         = 0.001467000 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001520000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001176000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001226000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000900000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000915000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000984000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001151000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.007872000 sec.
* Average time     = 0.001124571 sec.
* Min time         = 0.000900000 sec.
* Max time         = 0.001520000 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.343610000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24928612 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.337553000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24785773 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.337330000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25072530 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000024000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.495212000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.068186000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.392041000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37273739 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 1.973956000 sec.
* Average time     = 0.281993714 sec.
* Min time         = 0.000024000 sec.
* Max time         = 0.495212000 sec.
* Total Swapped    = 162065650 count(s)
* Average  Swapped =  23152235 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.319631000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24928612 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.302556000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24785773 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.330694000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25072530 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000023000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.509776000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000200000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.409356000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37273739 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 1.872236000 sec.
* Average time     = 0.267462286 sec.
* Min time         = 0.000023000 sec.
* Max time         = 0.509776000 sec.
* Total Swapped    = 162065650 count(s)
* Average  Swapped =  23152235 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.146621000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24928612 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.110064000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24785773 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.133870000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25072530 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000017000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.155755000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.034167000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.277804000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37273739 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.858298000 sec.
* Average time     = 0.122614000 sec.
* Min time         = 0.000017000 sec.
* Max time         = 0.277804000 sec.
* Total Swapped    = 162065650 count(s)
* Average  Swapped =  23152235 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.006511000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1907513 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.006292000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1900610 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.006216000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1913805 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001278000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=494802 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.007525000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1474414 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001524000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=514605 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.005911000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1895833 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.035257000 sec.
* Average time     = 0.005036714 sec.
* Min time         = 0.001278000 sec.
* Max time         = 0.007525000 sec.
* Total Swapped    =  10101582 count(s)
* Average  Swapped =   1443083 count(s)
* Min Swapped      =    494802 count(s)
* Max Swapped      =   1913805 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001123000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=56744 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001093000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57503 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001119000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57626 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000504000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000701000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=18345 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000583000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=7303 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001153000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=58579 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.006276000 sec.
* Average time     = 0.000896571 sec.
* Min time         = 0.000504000 sec.
* Max time         = 0.001153000 sec.
* Total Swapped    =    256100 count(s)
* Average  Swapped =     36585 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     58579 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.231764000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24928612 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.239569000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24785773 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.235123000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25072530 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000024000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.468789000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000182000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.354865000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37273739 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 1.530316000 sec.
* Average time     = 0.218616571 sec.
* Min time         = 0.000024000 sec.
* Max time         = 0.468789000 sec.
* Total Swapped    = 162065650 count(s)
* Average  Swapped =  23152235 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000837000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33316 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000808000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33617 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000794000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33331 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000200000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000249000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000216000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000895000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=35947 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.003999000 sec.
* Average time     = 0.000571286 sec.
* Min time         = 0.000200000 sec.
* Max time         = 0.000895000 sec.
* Total Swapped    =    151211 count(s)
* Average  Swapped =     21601 count(s)
* Min Swapped      =      3333 count(s)
* Max Swapped      =     35947 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.077650000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9987 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.078927000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9993 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.080145000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9995 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.080970000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.083453000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.080993000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.083620000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9987 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.565758000 sec.
* Average time     = 0.080822571 sec.
* Min time         = 0.077650000 sec.
* Max time         = 0.083620000 sec.
* Total Swapped    =     48298 count(s)
* Average  Swapped =      6899 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001785000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129453 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001791000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129590 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002115000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129406 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.002393000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=218680 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001483000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=116627 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.002211000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=213143 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001716000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=123233 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.013494000 sec.
* Average time     = 0.001927714 sec.
* Min time         = 0.001483000 sec.
* Max time         = 0.002393000 sec.
* Total Swapped    =   1060132 count(s)
* Average  Swapped =    151447 count(s)
* Min Swapped      =    116627 count(s)
* Max Swapped      =    218680 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.137257000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9988 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.135767000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9992 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.143008000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9988 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000022000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.286428000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000149000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.233089000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9986 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.935720000 sec.
* Average time     = 0.133674286 sec.
* Min time         = 0.000022000 sec.
* Max time         = 0.286428000 sec.
* Total Swapped    =     59952 count(s)
* Average  Swapped =      8564 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001900000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48881 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002075000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48400 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001895000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49161 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000136000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000701000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=37222 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000223000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=5156 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002344000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49801 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.009274000 sec.
* Average time     = 0.001324857 sec.
* Min time         = 0.000136000 sec.
* Max time         = 0.002344000 sec.
* Total Swapped    =    238621 count(s)
* Average  Swapped =     34088 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     49801 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.107039000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58247 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.097741000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58256 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.093909000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58341 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000038000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.202988000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=60442 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000179000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.152940000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58237 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.654834000 sec.
* Average time     = 0.093547714 sec.
* Min time         = 0.000038000 sec.
* Max time         = 0.202988000 sec.
* Total Swapped    =    303529 count(s)
* Average  Swapped =     43361 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     60442 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000746000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31094 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000722000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=30961 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000772000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31118 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000039000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000177000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=6022 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000142000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1024 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000779000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=34513 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.003377000 sec.
* Average time     = 0.000482429 sec.
* Min time         = 0.000039000 sec.
* Max time         = 0.000779000 sec.
* Total Swapped    =    134732 count(s)
* Average  Swapped =     19247 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     34513 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000431000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000356000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000355000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000110000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000188000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000115000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000332000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.001887000 sec.
* Average time     = 0.000269571 sec.
* Min time         = 0.000110000 sec.
* Max time         = 0.000431000 sec.
* Total Swapped    =     50002 count(s)
* Average  Swapped =      7143 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     10000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 10000 Count(s)
Total Array size   = 800000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.007266000/  0.001038000/  0.000457000/  0.001943000
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.006128000/  0.000875429/  0.000377000/  0.001524000
- std::sort(inline-func):   0.004972000/  0.000710286/  0.000252000/  0.001414000
- std::sort(functor):       0.004830000/  0.000690000/  0.000273000/  0.001524000
- std::sort(lambda):        0.004815000/  0.000687857/  0.000269000/  0.001467000
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.007872000/  0.001124571/  0.000900000/  0.001520000
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           1.973956000/  0.281993714/  0.000024000/  0.495212000  162065650/   23152235/          0/   49985001
- Shaker sort<S>:           1.872236000/  0.267462286/  0.000023000/  0.509776000  162065650/   23152235/          0/   49985001
- Odd-Even sort<S>:         0.858298000/  0.122614000/  0.000017000/  0.277804000  162065650/   23152235/          0/   49985001
- Shear sort:               0.035257000/  0.005036714/  0.001278000/  0.007525000   10101582/    1443083/     494802/    1913805
- Comb sort:                0.006276000/  0.000896571/  0.000504000/  0.001153000     256100/      36585/          0/      58579
- Gnome sort<S>:            1.530316000/  0.218616571/  0.000024000/  0.468789000  162065650/   23152235/          0/   49985001
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.003999000/  0.000571286/  0.000200000/  0.000895000     151211/      21601/       3333/      35947
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.565758000/  0.080822571/  0.077650000/  0.083620000      48298/       6899/          0/       9995
- Heap sort:                0.013494000/  0.001927714/  0.001483000/  0.002393000    1060132/     151447/     116627/     218680
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.935720000/  0.133674286/  0.000022000/  0.286428000      59952/       8564/          0/       9999
- Shell sort:               0.009274000/  0.001324857/  0.000136000/  0.002344000     238621/      34088/          0/      49801
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.654834000/  0.093547714/  0.000038000/  0.202988000     303529/      43361/          0/      60442
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.003377000/  0.000482429/  0.000039000/  0.000779000     134732/      19247/          0/      34513
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.001887000/  0.000269571/  0.000110000/  0.000431000      50002/       7143/          0/      10000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=31094)
(result1=31094)
(result3=31094)
(result4=31094)
(result5=31094)
(result6=31094)
(result8=31094)
(result9=31094)
(result10=31094)
(result11=31462)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=(nil))
    (data1_def=(nil))
    (data2_def=(nil))
    (data3_def=(nil))
    (data4_def=(nil))
    (data5_def=(nil))
    (data8_def=(nil))
    (data9_def=(nil))
    (data10_def=(nil))
    (data11_def=(nil))
  linearSearch(*array_shuffle1, search_predicate);
    (data=(nil))
    (data1=(nil))
    (data2=(nil))
    (data3=(nil))
    (data4=(nil))
    (data5=(nil))
    (data8=(nil))
    (data9=(nil))
    (data10=(nil))
    (data11=(nil))
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=(nil))
    (data1_val=(nil))
    (data2_val=(nil))
    (data3_val=(nil))
    (data4_val=(nil))
    (data5_val=(nil))
    (data8_val=(nil))
    (data9_val=(nil))
    (data10_val=(nil))
    (data11_val=(nil))
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x7f9db2d84ed0)
    (data1_def=0x7f9db2d84ed0)
    (data2_def=0x7f9db2d84ed0)
    (data3_def=0x7f9db2d84ed0)
    (data4_def=0x7f9db2d84ed0)
    (data5_def=0x7f9db2d84ed0)
    (data8_def=0x7f9db2d84ed0)
    (data9_def=0x7f9db2d84ed0)
    (data10_def=0x7f9db2d84ed0)
    (data11_def=0x7f9db2d84ed0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x7f9db2d84ed0)
    (data1=0x7f9db2d84ed0)
    (data2=0x7f9db2d84ed0)
    (data3=0x7f9db2d84ed0)
    (data4=0x7f9db2d84ed0)
    (data5=0x7f9db2d84ed0)
    (data8=0x7f9db2d84ed0)
    (data9=0x7f9db2d84ed0)
    (data10=0x7f9db2d84ed0)
    (data11=0x7f9db2d84ed0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x7f9db2d84ed0)
    (data1_val=0x7f9db2d84ed0)
    (data2_val=0x7f9db2d84ed0)
    (data3_val=0x7f9db2d84ed0)
    (data4_val=0x7f9db2d84ed0)
    (data5_val=0x7f9db2d84ed0)
    (data8_val=0x7f9db2d84ed0)
    (data9_val=0x7f9db2d84ed0)
    (data10_val=0x7f9db2d84ed0)
    (data11_val=0x7f9db2d84ed0)
target=0, linearSearch=[0, 1276]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x7f9db2d7a610)
    (data1_def=0x7f9db2d7a610)
    (data2_def=0x7f9db2d7a610)
    (data3_def=0x7f9db2d7a610)
    (data4_def=0x7f9db2d7a610)
    (data5_def=0x7f9db2d7a610)
    (data8_def=0x7f9db2d7a610)
    (data9_def=0x7f9db2d7a610)
    (data10_def=0x7f9db2d7a610)
    (data11_def=0x7f9db2d7a610)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x7f9db2d7a610)
    (data1=0x7f9db2d7a610)
    (data2=0x7f9db2d7a610)
    (data3=0x7f9db2d7a610)
    (data4=0x7f9db2d7a610)
    (data5=0x7f9db2d7a610)
    (data8=0x7f9db2d7a610)
    (data9=0x7f9db2d7a610)
    (data10=0x7f9db2d7a610)
    (data11=0x7f9db2d7a610)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x7f9db2d7a610)
    (data1_val=0x7f9db2d7a610)
    (data2_val=0x7f9db2d7a610)
    (data3_val=0x7f9db2d7a610)
    (data4_val=0x7f9db2d7a610)
    (data5_val=0x7f9db2d7a610)
    (data8_val=0x7f9db2d7a610)
    (data9_val=0x7f9db2d7a610)
    (data10_val=0x7f9db2d7a610)
    (data11_val=0x7f9db2d7a610)
target=2, linearSearch=[2, 736]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x7f9db2d7bf60)
    (data1_def=0x7f9db2d7bf60)
    (data2_def=0x7f9db2d7bf60)
    (data3_def=0x7f9db2d7bf60)
    (data4_def=0x7f9db2d7bf60)
    (data5_def=0x7f9db2d7bf60)
    (data8_def=0x7f9db2d7bf60)
    (data9_def=0x7f9db2d7bf60)
    (data10_def=0x7f9db2d7bf60)
    (data11_def=0x7f9db2d7bf60)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x7f9db2d7bf60)
    (data1=0x7f9db2d7bf60)
    (data2=0x7f9db2d7bf60)
    (data3=0x7f9db2d7bf60)
    (data4=0x7f9db2d7bf60)
    (data5=0x7f9db2d7bf60)
    (data8=0x7f9db2d7bf60)
    (data9=0x7f9db2d7bf60)
    (data10=0x7f9db2d7bf60)
    (data11=0x7f9db2d7bf60)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x7f9db2d7bf60)
    (data1_val=0x7f9db2d7bf60)
    (data2_val=0x7f9db2d7bf60)
    (data3_val=0x7f9db2d7bf60)
    (data4_val=0x7f9db2d7bf60)
    (data5_val=0x7f9db2d7bf60)
    (data8_val=0x7f9db2d7bf60)
    (data9_val=0x7f9db2d7bf60)
    (data10_val=0x7f9db2d7bf60)
    (data11_val=0x7f9db2d7bf60)
target=6, linearSearch=[6, 817]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x7f9db2d6fbc0)
    (data1_def=0x7f9db2d6fbc0)
    (data2_def=0x7f9db2d6fbc0)
    (data3_def=0x7f9db2d6fbc0)
    (data4_def=0x7f9db2d6fbc0)
    (data5_def=0x7f9db2d6fbc0)
    (data8_def=0x7f9db2d6fbc0)
    (data9_def=0x7f9db2d6fbc0)
    (data10_def=0x7f9db2d6fbc0)
    (data11_def=0x7f9db2d6fbc0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x7f9db2d6fbc0)
    (data1=0x7f9db2d6fbc0)
    (data2=0x7f9db2d6fbc0)
    (data3=0x7f9db2d6fbc0)
    (data4=0x7f9db2d6fbc0)
    (data5=0x7f9db2d6fbc0)
    (data8=0x7f9db2d6fbc0)
    (data9=0x7f9db2d6fbc0)
    (data10=0x7f9db2d6fbc0)
    (data11=0x7f9db2d6fbc0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x7f9db2d6fbc0)
    (data1_val=0x7f9db2d6fbc0)
    (data2_val=0x7f9db2d6fbc0)
    (data3_val=0x7f9db2d6fbc0)
    (data4_val=0x7f9db2d6fbc0)
    (data5_val=0x7f9db2d6fbc0)
    (data8_val=0x7f9db2d6fbc0)
    (data9_val=0x7f9db2d6fbc0)
    (data10_val=0x7f9db2d6fbc0)
    (data11_val=0x7f9db2d6fbc0)
target=14, linearSearch=[14, 191]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x7f9db2db2790)
    (data1_def=0x7f9db2db2790)
    (data2_def=0x7f9db2db2790)
    (data3_def=0x7f9db2db2790)
    (data4_def=0x7f9db2db2790)
    (data5_def=0x7f9db2db2790)
    (data8_def=0x7f9db2db2790)
    (data9_def=0x7f9db2db2790)
    (data10_def=0x7f9db2db2790)
    (data11_def=0x7f9db2db2790)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x7f9db2db2790)
    (data1=0x7f9db2db2790)
    (data2=0x7f9db2db2790)
    (data3=0x7f9db2db2790)
    (data4=0x7f9db2db2790)
    (data5=0x7f9db2db2790)
    (data8=0x7f9db2db2790)
    (data9=0x7f9db2db2790)
    (data10=0x7f9db2db2790)
    (data11=0x7f9db2db2790)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x7f9db2db2790)
    (data1_val=0x7f9db2db2790)
    (data2_val=0x7f9db2db2790)
    (data3_val=0x7f9db2db2790)
    (data4_val=0x7f9db2db2790)
    (data5_val=0x7f9db2db2790)
    (data8_val=0x7f9db2db2790)
    (data9_val=0x7f9db2db2790)
    (data10_val=0x7f9db2db2790)
    (data11_val=0x7f9db2db2790)
target=30, linearSearch=[30, 3608]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x7f9db2d97710)
    (data1_def=0x7f9db2d97710)
    (data2_def=0x7f9db2d97710)
    (data3_def=0x7f9db2d97710)
    (data4_def=0x7f9db2d97710)
    (data5_def=0x7f9db2d97710)
    (data8_def=0x7f9db2d97710)
    (data9_def=0x7f9db2d97710)
    (data10_def=0x7f9db2d97710)
    (data11_def=0x7f9db2d97710)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x7f9db2d97710)
    (data1=0x7f9db2d97710)
    (data2=0x7f9db2d97710)
    (data3=0x7f9db2d97710)
    (data4=0x7f9db2d97710)
    (data5=0x7f9db2d97710)
    (data8=0x7f9db2d97710)
    (data9=0x7f9db2d97710)
    (data10=0x7f9db2d97710)
    (data11=0x7f9db2d97710)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x7f9db2d97710)
    (data1_val=0x7f9db2d97710)
    (data2_val=0x7f9db2d97710)
    (data3_val=0x7f9db2d97710)
    (data4_val=0x7f9db2d97710)
    (data5_val=0x7f9db2d97710)
    (data8_val=0x7f9db2d97710)
    (data9_val=0x7f9db2d97710)
    (data10_val=0x7f9db2d97710)
    (data11_val=0x7f9db2d97710)
target=62, linearSearch=[62, 2224]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x7f9db2d8ac40)
    (data1_def=0x7f9db2d8ac40)
    (data2_def=0x7f9db2d8ac40)
    (data3_def=0x7f9db2d8ac40)
    (data4_def=0x7f9db2d8ac40)
    (data5_def=0x7f9db2d8ac40)
    (data8_def=0x7f9db2d8ac40)
    (data9_def=0x7f9db2d8ac40)
    (data10_def=0x7f9db2d8ac40)
    (data11_def=0x7f9db2d8ac40)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x7f9db2d8ac40)
    (data1=0x7f9db2d8ac40)
    (data2=0x7f9db2d8ac40)
    (data3=0x7f9db2d8ac40)
    (data4=0x7f9db2d8ac40)
    (data5=0x7f9db2d8ac40)
    (data8=0x7f9db2d8ac40)
    (data9=0x7f9db2d8ac40)
    (data10=0x7f9db2d8ac40)
    (data11=0x7f9db2d8ac40)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x7f9db2d8ac40)
    (data1_val=0x7f9db2d8ac40)
    (data2_val=0x7f9db2d8ac40)
    (data3_val=0x7f9db2d8ac40)
    (data4_val=0x7f9db2d8ac40)
    (data5_val=0x7f9db2d8ac40)
    (data8_val=0x7f9db2d8ac40)
    (data9_val=0x7f9db2d8ac40)
    (data10_val=0x7f9db2d8ac40)
    (data11_val=0x7f9db2d8ac40)
target=126, linearSearch=[126, 1575]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x7f9db2de02d0)
    (data1_def=0x7f9db2de02d0)
    (data2_def=0x7f9db2de02d0)
    (data3_def=0x7f9db2de02d0)
    (data4_def=0x7f9db2de02d0)
    (data5_def=0x7f9db2de02d0)
    (data8_def=0x7f9db2de02d0)
    (data9_def=0x7f9db2de02d0)
    (data10_def=0x7f9db2de02d0)
    (data11_def=0x7f9db2de02d0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x7f9db2de02d0)
    (data1=0x7f9db2de02d0)
    (data2=0x7f9db2de02d0)
    (data3=0x7f9db2de02d0)
    (data4=0x7f9db2de02d0)
    (data5=0x7f9db2de02d0)
    (data8=0x7f9db2de02d0)
    (data9=0x7f9db2de02d0)
    (data10=0x7f9db2de02d0)
    (data11=0x7f9db2de02d0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x7f9db2de02d0)
    (data1_val=0x7f9db2de02d0)
    (data2_val=0x7f9db2de02d0)
    (data3_val=0x7f9db2de02d0)
    (data4_val=0x7f9db2de02d0)
    (data5_val=0x7f9db2de02d0)
    (data8_val=0x7f9db2de02d0)
    (data9_val=0x7f9db2de02d0)
    (data10_val=0x7f9db2de02d0)
    (data11_val=0x7f9db2de02d0)
target=254, linearSearch=[254, 5948]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=(nil))
    (data1_def=(nil))
    (data2_def=(nil))
    (data3_def=(nil))
    (data4_def=(nil))
    (data5_def=(nil))
    (data8_def=(nil))
    (data9_def=(nil))
   (data10_def=(nil))
    (data11_def=(nil))
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=(nil))
    (data1=(nil))
    (data2=(nil))
    (data3=(nil))
    (data4=(nil))
    (data5=(nil))
    (data8=(nil))
    (data9=(nil))
    (data10=(nil))
    (data11=(nil))
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=(nil))
    (data1_val=(nil))
    (data2_val=(nil))
    (data3_val=(nil))
    (data4_val=(nil))
    (data5_val=(nil))
    (data8_val=(nil))
    (data9_val=(nil))
    (data10_val=(nil))
    (data11_val=(nil))
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x7f9db2d6c010)
    (data1_def=0x7f9db2d6c010)
    (data2_def=0x7f9db2d6c010)
    (data3_def=0x7f9db2d6c010)
    (data4_def=0x7f9db2d6c010)
    (data5_def=0x7f9db2d6c010)
    (data8_def=0x7f9db2d6c010)
    (data9_def=0x7f9db2d6c010)
   (data10_def=0x7f9db2d6c010)
    (data11_def=0x7f9db2d6c010)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x7f9db2d6c010)
    (data1=0x7f9db2d6c010)
    (data2=0x7f9db2d6c010)
    (data3=0x7f9db2d6c010)
    (data4=0x7f9db2d6c010)
    (data5=0x7f9db2d6c010)
    (data8=0x7f9db2d6c010)
    (data9=0x7f9db2d6c010)
    (data10=0x7f9db2d6c010)
    (data11=0x7f9db2d6c010)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x7f9db2d6c010)
    (data1_val=0x7f9db2d6c010)
    (data2_val=0x7f9db2d6c010)
    (data3_val=0x7f9db2d6c010)
    (data4_val=0x7f9db2d6c010)
    (data5_val=0x7f9db2d6c010)
    (data8_val=0x7f9db2d6c010)
    (data9_val=0x7f9db2d6c010)
    (data10_val=0x7f9db2d6c010)
    (data11_val=0x7f9db2d6c010)
target=0, binarySearch=[0, 1276]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x7f9db2d6c1f0)
    (data1_def=0x7f9db2d6c1f0)
    (data2_def=0x7f9db2d6c1f0)
    (data3_def=0x7f9db2d6c1f0)
    (data4_def=0x7f9db2d6c1f0)
    (data5_def=0x7f9db2d6c1f0)
    (data8_def=0x7f9db2d6c1f0)
    (data9_def=0x7f9db2d6c1f0)
   (data10_def=0x7f9db2d6c1f0)
    (data11_def=0x7f9db2d6c1f0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x7f9db2d6c1f0)
    (data1=0x7f9db2d6c1f0)
    (data2=0x7f9db2d6c1f0)
    (data3=0x7f9db2d6c1f0)
    (data4=0x7f9db2d6c1f0)
    (data5=0x7f9db2d6c1f0)
    (data8=0x7f9db2d6c1f0)
    (data9=0x7f9db2d6c1f0)
    (data10=0x7f9db2d6c1f0)
    (data11=0x7f9db2d6c1f0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x7f9db2d6c1f0)
    (data1_val=0x7f9db2d6c1f0)
    (data2_val=0x7f9db2d6c1f0)
    (data3_val=0x7f9db2d6c1f0)
    (data4_val=0x7f9db2d6c1f0)
    (data5_val=0x7f9db2d6c1f0)
    (data8_val=0x7f9db2d6c1f0)
    (data9_val=0x7f9db2d6c1f0)
    (data10_val=0x7f9db2d6c1f0)
    (data11_val=0x7f9db2d6c1f0)
target=2, binarySearch=[2, 4297]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x7f9db2d6c5b0)
    (data1_def=0x7f9db2d6c5b0)
    (data2_def=0x7f9db2d6c5b0)
    (data3_def=0x7f9db2d6c5b0)
    (data4_def=0x7f9db2d6c5b0)
    (data5_def=0x7f9db2d6c5b0)
    (data8_def=0x7f9db2d6c5b0)
    (data9_def=0x7f9db2d6c5b0)
   (data10_def=0x7f9db2d6c5b0)
    (data11_def=0x7f9db2d6c5b0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x7f9db2d6c5b0)
    (data1=0x7f9db2d6c5b0)
    (data2=0x7f9db2d6c5b0)
    (data3=0x7f9db2d6c5b0)
    (data4=0x7f9db2d6c5b0)
    (data5=0x7f9db2d6c5b0)
    (data8=0x7f9db2d6c5b0)
    (data9=0x7f9db2d6c5b0)
    (data10=0x7f9db2d6c5b0)
    (data11=0x7f9db2d6c5b0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x7f9db2d6c5b0)
    (data1_val=0x7f9db2d6c5b0)
    (data2_val=0x7f9db2d6c5b0)
    (data3_val=0x7f9db2d6c5b0)
    (data4_val=0x7f9db2d6c5b0)
    (data5_val=0x7f9db2d6c5b0)
    (data8_val=0x7f9db2d6c5b0)
    (data9_val=0x7f9db2d6c5b0)
    (data10_val=0x7f9db2d6c5b0)
    (data11_val=0x7f9db2d6c5b0)
target=6, binarySearch=[6, 1745]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x7f9db2d6cd30)
    (data1_def=0x7f9db2d6cd30)
    (data2_def=0x7f9db2d6cd30)
    (data3_def=0x7f9db2d6cd30)
    (data4_def=0x7f9db2d6cd30)
    (data5_def=0x7f9db2d6cd30)
    (data8_def=0x7f9db2d6cd30)
    (data9_def=0x7f9db2d6cd30)
   (data10_def=0x7f9db2d6cd30)
    (data11_def=0x7f9db2d6cd30)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x7f9db2d6cd30)
    (data1=0x7f9db2d6cd30)
    (data2=0x7f9db2d6cd30)
    (data3=0x7f9db2d6cd30)
    (data4=0x7f9db2d6cd30)
    (data5=0x7f9db2d6cd30)
    (data8=0x7f9db2d6cd30)
    (data9=0x7f9db2d6cd30)
    (data10=0x7f9db2d6cd30)
    (data11=0x7f9db2d6cd30)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x7f9db2d6cd30)
    (data1_val=0x7f9db2d6cd30)
    (data2_val=0x7f9db2d6cd30)
    (data3_val=0x7f9db2d6cd30)
    (data4_val=0x7f9db2d6cd30)
    (data5_val=0x7f9db2d6cd30)
    (data8_val=0x7f9db2d6cd30)
    (data9_val=0x7f9db2d6cd30)
    (data10_val=0x7f9db2d6cd30)
    (data11_val=0x7f9db2d6cd30)
target=14, binarySearch=[14, 191]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x7f9db2d6dc30)
    (data1_def=0x7f9db2d6dc30)
    (data2_def=0x7f9db2d6dc30)
    (data3_def=0x7f9db2d6dc30)
    (data4_def=0x7f9db2d6dc30)
    (data5_def=0x7f9db2d6dc30)
    (data8_def=0x7f9db2d6dc30)
    (data9_def=0x7f9db2d6dc30)
   (data10_def=0x7f9db2d6dc30)
    (data11_def=0x7f9db2d6dc30)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x7f9db2d6dc30)
    (data1=0x7f9db2d6dc30)
    (data2=0x7f9db2d6dc30)
    (data3=0x7f9db2d6dc30)
    (data4=0x7f9db2d6dc30)
    (data5=0x7f9db2d6dc30)
    (data8=0x7f9db2d6dc30)
    (data9=0x7f9db2d6dc30)
    (data10=0x7f9db2d6dc30)
    (data11=0x7f9db2d6dc30)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x7f9db2d6dc30)
    (data1_val=0x7f9db2d6dc30)
    (data2_val=0x7f9db2d6dc30)
    (data3_val=0x7f9db2d6dc30)
    (data4_val=0x7f9db2d6dc30)
    (data5_val=0x7f9db2d6dc30)
    (data8_val=0x7f9db2d6dc30)
    (data9_val=0x7f9db2d6dc30)
    (data10_val=0x7f9db2d6dc30)
    (data11_val=0x7f9db2d6dc30)
target=30, binarySearch=[30, 6168]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x7f9db2d6fa30)
    (data1_def=0x7f9db2d6fa30)
    (data2_def=0x7f9db2d6fa30)
    (data3_def=0x7f9db2d6fa30)
    (data4_def=0x7f9db2d6fa30)
    (data5_def=0x7f9db2d6fa30)
    (data8_def=0x7f9db2d6fa30)
    (data9_def=0x7f9db2d6fa30)
   (data10_def=0x7f9db2d6fa30)
    (data11_def=0x7f9db2d6fa30)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x7f9db2d6fa30)
    (data1=0x7f9db2d6fa30)
    (data2=0x7f9db2d6fa30)
    (data3=0x7f9db2d6fa30)
    (data4=0x7f9db2d6fa30)
    (data5=0x7f9db2d6fa30)
    (data8=0x7f9db2d6fa30)
    (data9=0x7f9db2d6fa30)
    (data10=0x7f9db2d6fa30)
    (data11=0x7f9db2d6fa30)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x7f9db2d6fa30)
    (data1_val=0x7f9db2d6fa30)
    (data2_val=0x7f9db2d6fa30)
    (data3_val=0x7f9db2d6fa30)
    (data4_val=0x7f9db2d6fa30)
    (data5_val=0x7f9db2d6fa30)
    (data8_val=0x7f9db2d6fa30)
    (data9_val=0x7f9db2d6fa30)
    (data10_val=0x7f9db2d6fa30)
    (data11_val=0x7f9db2d6fa30)
target=62, binarySearch=[62, 4717]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x7f9db2d73630)
    (data1_def=0x7f9db2d73630)
    (data2_def=0x7f9db2d73630)
    (data3_def=0x7f9db2d73630)
    (data4_def=0x7f9db2d73630)
    (data5_def=0x7f9db2d73630)
    (data8_def=0x7f9db2d73630)
    (data9_def=0x7f9db2d73630)
   (data10_def=0x7f9db2d73630)
    (data11_def=0x7f9db2d73630)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x7f9db2d73630)
    (data1=0x7f9db2d73630)
    (data2=0x7f9db2d73630)
    (data3=0x7f9db2d73630)
    (data4=0x7f9db2d73630)
    (data5=0x7f9db2d73630)
    (data8=0x7f9db2d73630)
    (data9=0x7f9db2d73630)
    (data10=0x7f9db2d73630)
    (data11=0x7f9db2d73630)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x7f9db2d73630)
    (data1_val=0x7f9db2d73630)
    (data2_val=0x7f9db2d73630)
    (data3_val=0x7f9db2d73630)
    (data4_val=0x7f9db2d73630)
    (data5_val=0x7f9db2d73630)
    (data8_val=0x7f9db2d73630)
    (data9_val=0x7f9db2d73630)
    (data10_val=0x7f9db2d73630)
    (data11_val=0x7f9db2d73630)
target=126, binarySearch=[126, 2512]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x7f9db2d7ae30)
    (data1_def=0x7f9db2d7ae30)
    (data2_def=0x7f9db2d7ae30)
    (data3_def=0x7f9db2d7ae30)
    (data4_def=0x7f9db2d7ae30)
    (data5_def=0x7f9db2d7ae30)
    (data8_def=0x7f9db2d7ae30)
    (data9_def=0x7f9db2d7ae30)
   (data10_def=0x7f9db2d7ae30)
    (data11_def=0x7f9db2d7ae30)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x7f9db2d7ae30)
    (data1=0x7f9db2d7ae30)
    (data2=0x7f9db2d7ae30)
    (data3=0x7f9db2d7ae30)
    (data4=0x7f9db2d7ae30)
    (data5=0x7f9db2d7ae30)
    (data8=0x7f9db2d7ae30)
    (data9=0x7f9db2d7ae30)
    (data10=0x7f9db2d7ae30)
    (data11=0x7f9db2d7ae30)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x7f9db2d7ae30)
    (data1_val=0x7f9db2d7ae30)
    (data2_val=0x7f9db2d7ae30)
    (data3_val=0x7f9db2d7ae30)
    (data4_val=0x7f9db2d7ae30)
    (data5_val=0x7f9db2d7ae30)
    (data8_val=0x7f9db2d7ae30)
    (data9_val=0x7f9db2d7ae30)
    (data10_val=0x7f9db2d7ae30)
    (data11_val=0x7f9db2d7ae30)
target=254, binarySearch=[254, 8995]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=8.541314000 sec.
