============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=5004 / record(s)=10000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=5040 / record(s)=10000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=4994 / record(s)=10000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=10000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=3333 / record(s)=10000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=10000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=4943 / record(s)=10000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001315000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001354000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001330000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000457000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000803000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000440000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001321000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.007020000 sec.
* Average time     = 0.001002857 sec.
* Min time         = 0.000440000 sec.
* Max time         = 0.001354000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001837000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001947000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001881000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000657000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000763000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000678000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001868000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.009631000 sec.
* Average time     = 0.001375857 sec.
* Min time         = 0.000657000 sec.
* Max time         = 0.001947000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001585000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001554000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001551000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000468000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000564000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000554000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001595000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.007871000 sec.
* Average time     = 0.001124429 sec.
* Min time         = 0.000468000 sec.
* Max time         = 0.001595000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001579000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001592000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001564000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000494000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000577000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000477000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001583000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.007866000 sec.
* Average time     = 0.001123714 sec.
* Min time         = 0.000477000 sec.
* Max time         = 0.001592000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001521000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001596000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001564000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000476000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000572000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000479000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001546000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.007754000 sec.
* Average time     = 0.001107714 sec.
* Min time         = 0.000476000 sec.
* Max time         = 0.001596000 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002397000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002319000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002349000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001392000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001625000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001458000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002297000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.013837000 sec.
* Average time     = 0.001976714 sec.
* Min time         = 0.001392000 sec.
* Max time         = 0.002397000 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.861486000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24928612 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.850593000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24785773 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.814209000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25072530 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000015000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=1.517555000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.084615000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=1.206637000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37273739 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 5.335110000 sec.
* Average time     = 0.762158571 sec.
* Min time         = 0.000015000 sec.
* Max time         = 1.517555000 sec.
* Total Swapped    = 162065650 count(s)
* Average  Swapped =  23152235 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.796428000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24928612 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.844732000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24785773 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.857311000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25072530 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000014000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=1.577342000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000636000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=1.145427000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37273739 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 5.221890000 sec.
* Average time     = 0.745984286 sec.
* Min time         = 0.000014000 sec.
* Max time         = 1.577342000 sec.
* Total Swapped    = 162065650 count(s)
* Average  Swapped =  23152235 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.624225000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24928612 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.614361000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24785773 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.606544000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25072530 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000145000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.743965000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.446304000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.701518000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37273739 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 3.737062000 sec.
* Average time     = 0.533866000 sec.
* Min time         = 0.000145000 sec.
* Max time         = 0.743965000 sec.
* Total Swapped    = 162065650 count(s)
* Average  Swapped =  23152235 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.016030000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1880292 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.016395000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1853286 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.015514000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1884921 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.004181000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=485134 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.011034000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1465201 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.004552000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=485527 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.015425000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1875160 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.083131000 sec.
* Average time     = 0.011875857 sec.
* Min time         = 0.004181000 sec.
* Max time         = 0.016395000 sec.
* Total Swapped    =   9929521 count(s)
* Average  Swapped =   1418503 count(s)
* Min Swapped      =    485134 count(s)
* Max Swapped      =   1884921 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002421000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=56744 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002418000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57503 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002440000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57626 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000483000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001059000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=18345 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000739000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=7303 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002488000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=58579 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.012048000 sec.
* Average time     = 0.001721143 sec.
* Min time         = 0.000483000 sec.
* Max time         = 0.002488000 sec.
* Total Swapped    =    256100 count(s)
* Average  Swapped =     36585 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     58579 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.719953000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24928612 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.717216000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24785773 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.727495000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25072530 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000020000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=1.449064000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000584000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=1.077212000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37273739 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 4.691544000 sec.
* Average time     = 0.670220571 sec.
* Min time         = 0.000020000 sec.
* Max time         = 1.449064000 sec.
* Total Swapped    = 162065650 count(s)
* Average  Swapped =  23152235 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001549000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33316 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001640000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33617 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001521000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33331 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000266000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000397000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000261000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001633000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=35947 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.007267000 sec.
* Average time     = 0.001038143 sec.
* Min time         = 0.000261000 sec.
* Max time         = 0.001640000 sec.
* Total Swapped    =    151211 count(s)
* Average  Swapped =     21601 count(s)
* Min Swapped      =      3333 count(s)
* Max Swapped      =     35947 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.075459000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9987 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.074798000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9993 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.074514000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9995 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.074352000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.074723000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.074140000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.074666000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9987 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.522652000 sec.
* Average time     = 0.074664571 sec.
* Min time         = 0.074140000 sec.
* Max time         = 0.075459000 sec.
* Total Swapped    =     48298 count(s)
* Average  Swapped =      6899 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.004919000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129453 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.004755000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129590 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.004725000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129406 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.006723000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=218680 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.004006000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=116627 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.006677000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=213143 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.004472000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=123233 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.036277000 sec.
* Average time     = 0.005182429 sec.
* Min time         = 0.004006000 sec.
* Max time         = 0.006723000 sec.
* Total Swapped    =   1060132 count(s)
* Average  Swapped =    151447 count(s)
* Min Swapped      =    116627 count(s)
* Max Swapped      =    218680 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.278765000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9988 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.279932000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9992 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.281878000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9988 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000019000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.568765000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000404000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.426305000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9986 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 1.836068000 sec.
* Average time     = 0.262295429 sec.
* Min time         = 0.000019000 sec.
* Max time         = 0.568765000 sec.
* Total Swapped    =     59952 count(s)
* Average  Swapped =      8564 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.003391000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48881 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003287000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48400 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.003435000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49161 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000172000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001405000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=37222 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000377000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=5156 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.003266000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49801 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.015333000 sec.
* Average time     = 0.002190429 sec.
* Min time         = 0.000172000 sec.
* Max time         = 0.003435000 sec.
* Total Swapped    =    238621 count(s)
* Average  Swapped =     34088 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     49801 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.249745000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58247 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.250743000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58256 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.253331000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58341 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000053000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.498784000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=60442 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000448000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.373941000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58237 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 1.627045000 sec.
* Average time     = 0.232435000 sec.
* Min time         = 0.000053000 sec.
* Max time         = 0.498784000 sec.
* Total Swapped    =    303529 count(s)
* Average  Swapped =     43361 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     60442 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001507000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31094 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001480000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=30961 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001478000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31118 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000014000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000332000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=6022 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000149000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1024 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001637000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=34513 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.006597000 sec.
* Average time     = 0.000942429 sec.
* Min time         = 0.000014000 sec.
* Max time         = 0.001637000 sec.
* Total Swapped    =    134732 count(s)
* Average  Swapped =     19247 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     34513 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000379000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000346000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000388000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000104000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000224000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000103000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000336000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.001880000 sec.
* Average time     = 0.000268571 sec.
* Min time         = 0.000103000 sec.
* Max time         = 0.000388000 sec.
* Total Swapped    =     50002 count(s)
* Average  Swapped =      7143 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     10000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 10000 Count(s)
Total Array size   = 800000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.007020000/  0.001002857/  0.000440000/  0.001354000
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.009631000/  0.001375857/  0.000657000/  0.001947000
- std::sort(inline-func):   0.007871000/  0.001124429/  0.000468000/  0.001595000
- std::sort(functor):       0.007866000/  0.001123714/  0.000477000/  0.001592000
- std::sort(lambda):        0.007754000/  0.001107714/  0.000476000/  0.001596000
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.013837000/  0.001976714/  0.001392000/  0.002397000
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           5.335110000/  0.762158571/  0.000015000/  1.517555000  162065650/   23152235/          0/   49985001
- Shaker sort<S>:           5.221890000/  0.745984286/  0.000014000/  1.577342000  162065650/   23152235/          0/   49985001
- Odd-Even sort<S>:         3.737062000/  0.533866000/  0.000145000/  0.743965000  162065650/   23152235/          0/   49985001
- Shear sort:               0.083131000/  0.011875857/  0.004181000/  0.016395000    9929521/    1418503/     485134/    1884921
- Comb sort:                0.012048000/  0.001721143/  0.000483000/  0.002488000     256100/      36585/          0/      58579
- Gnome sort<S>:            4.691544000/  0.670220571/  0.000020000/  1.449064000  162065650/   23152235/          0/   49985001
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.007267000/  0.001038143/  0.000261000/  0.001640000     151211/      21601/       3333/      35947
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.522652000/  0.074664571/  0.074140000/  0.075459000      48298/       6899/          0/       9995
- Heap sort:                0.036277000/  0.005182429/  0.004006000/  0.006723000    1060132/     151447/     116627/     218680
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        1.836068000/  0.262295429/  0.000019000/  0.568765000      59952/       8564/          0/       9999
- Shell sort:               0.015333000/  0.002190429/  0.000172000/  0.003435000     238621/      34088/          0/      49801
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    1.627045000/  0.232435000/  0.000053000/  0.498784000     303529/      43361/          0/      60442
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.006597000/  0.000942429/  0.000014000/  0.001637000     134732/      19247/          0/      34513
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.001880000/  0.000268571/  0.000103000/  0.000388000      50002/       7143/          0/      10000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=31094)
(result1=31094)
(result3=31094)
(result4=31094)
(result5=31094)
(result6=31094)
(result8=31094)
(result9=31094)
(result10=31094)
(result11=31462)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x0)
    (data1_def=0x0)
    (data2_def=0x0)
    (data3_def=0x0)
    (data4_def=0x0)
    (data5_def=0x0)
    (data8_def=0x0)
    (data9_def=0x0)
    (data10_def=0x0)
    (data11_def=0x0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x0)
    (data1=0x0)
    (data2=0x0)
    (data3=0x0)
    (data4=0x0)
    (data5=0x0)
    (data8=0x0)
    (data9=0x0)
    (data10=0x0)
    (data11=0x0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x0)
    (data1_val=0x0)
    (data2_val=0x0)
    (data3_val=0x0)
    (data4_val=0x0)
    (data5_val=0x0)
    (data8_val=0x0)
    (data9_val=0x0)
    (data10_val=0x0)
    (data11_val=0x0)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=0xffde8ee0)
    (data1_def=0xffde8ee0)
    (data2_def=0xffde8ee0)
    (data3_def=0xffde8ee0)
    (data4_def=0xffde8ee0)
    (data5_def=0xffde8ee0)
    (data8_def=0xffde8ee0)
    (data9_def=0xffde8ee0)
    (data10_def=0xffde8ee0)
    (data11_def=0xffde8ee0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0xffde8ee0)
    (data1=0xffde8ee0)
    (data2=0xffde8ee0)
    (data3=0xffde8ee0)
    (data4=0xffde8ee0)
    (data5=0xffde8ee0)
    (data8=0xffde8ee0)
    (data9=0xffde8ee0)
    (data10=0xffde8ee0)
    (data11=0xffde8ee0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0xffde8ee0)
    (data1_val=0xffde8ee0)
    (data2_val=0xffde8ee0)
    (data3_val=0xffde8ee0)
    (data4_val=0xffde8ee0)
    (data5_val=0xffde8ee0)
    (data8_val=0xffde8ee0)
    (data9_val=0xffde8ee0)
    (data10_val=0xffde8ee0)
    (data11_val=0xffde8ee0)
target=0, linearSearch=[0, 1276]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=0xffdde620)
    (data1_def=0xffdde620)
    (data2_def=0xffdde620)
    (data3_def=0xffdde620)
    (data4_def=0xffdde620)
    (data5_def=0xffdde620)
    (data8_def=0xffdde620)
    (data9_def=0xffdde620)
    (data10_def=0xffdde620)
    (data11_def=0xffdde620)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0xffdde620)
    (data1=0xffdde620)
    (data2=0xffdde620)
    (data3=0xffdde620)
    (data4=0xffdde620)
    (data5=0xffdde620)
    (data8=0xffdde620)
    (data9=0xffdde620)
    (data10=0xffdde620)
    (data11=0xffdde620)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0xffdde620)
    (data1_val=0xffdde620)
    (data2_val=0xffdde620)
    (data3_val=0xffdde620)
    (data4_val=0xffdde620)
    (data5_val=0xffdde620)
    (data8_val=0xffdde620)
    (data9_val=0xffdde620)
    (data10_val=0xffdde620)
    (data11_val=0xffdde620)
target=2, linearSearch=[2, 736]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=0xffddff70)
    (data1_def=0xffddff70)
    (data2_def=0xffddff70)
    (data3_def=0xffddff70)
    (data4_def=0xffddff70)
    (data5_def=0xffddff70)
    (data8_def=0xffddff70)
    (data9_def=0xffddff70)
    (data10_def=0xffddff70)
    (data11_def=0xffddff70)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0xffddff70)
    (data1=0xffddff70)
    (data2=0xffddff70)
    (data3=0xffddff70)
    (data4=0xffddff70)
    (data5=0xffddff70)
    (data8=0xffddff70)
    (data9=0xffddff70)
    (data10=0xffddff70)
    (data11=0xffddff70)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0xffddff70)
    (data1_val=0xffddff70)
    (data2_val=0xffddff70)
    (data3_val=0xffddff70)
    (data4_val=0xffddff70)
    (data5_val=0xffddff70)
    (data8_val=0xffddff70)
    (data9_val=0xffddff70)
    (data10_val=0xffddff70)
    (data11_val=0xffddff70)
target=6, linearSearch=[6, 817]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=0xffdd3bd0)
    (data1_def=0xffdd3bd0)
    (data2_def=0xffdd3bd0)
    (data3_def=0xffdd3bd0)
    (data4_def=0xffdd3bd0)
    (data5_def=0xffdd3bd0)
    (data8_def=0xffdd3bd0)
    (data9_def=0xffdd3bd0)
    (data10_def=0xffdd3bd0)
    (data11_def=0xffdd3bd0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0xffdd3bd0)
    (data1=0xffdd3bd0)
    (data2=0xffdd3bd0)
    (data3=0xffdd3bd0)
    (data4=0xffdd3bd0)
    (data5=0xffdd3bd0)
    (data8=0xffdd3bd0)
    (data9=0xffdd3bd0)
    (data10=0xffdd3bd0)
    (data11=0xffdd3bd0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0xffdd3bd0)
    (data1_val=0xffdd3bd0)
    (data2_val=0xffdd3bd0)
    (data3_val=0xffdd3bd0)
    (data4_val=0xffdd3bd0)
    (data5_val=0xffdd3bd0)
    (data8_val=0xffdd3bd0)
    (data9_val=0xffdd3bd0)
    (data10_val=0xffdd3bd0)
    (data11_val=0xffdd3bd0)
target=14, linearSearch=[14, 191]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=0xffe167a0)
    (data1_def=0xffe167a0)
    (data2_def=0xffe167a0)
    (data3_def=0xffe167a0)
    (data4_def=0xffe167a0)
    (data5_def=0xffe167a0)
    (data8_def=0xffe167a0)
    (data9_def=0xffe167a0)
    (data10_def=0xffe167a0)
    (data11_def=0xffe167a0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0xffe167a0)
    (data1=0xffe167a0)
    (data2=0xffe167a0)
    (data3=0xffe167a0)
    (data4=0xffe167a0)
    (data5=0xffe167a0)
    (data8=0xffe167a0)
    (data9=0xffe167a0)
    (data10=0xffe167a0)
    (data11=0xffe167a0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0xffe167a0)
    (data1_val=0xffe167a0)
    (data2_val=0xffe167a0)
    (data3_val=0xffe167a0)
    (data4_val=0xffe167a0)
    (data5_val=0xffe167a0)
    (data8_val=0xffe167a0)
    (data9_val=0xffe167a0)
    (data10_val=0xffe167a0)
    (data11_val=0xffe167a0)
target=30, linearSearch=[30, 3608]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=0xffdfb720)
    (data1_def=0xffdfb720)
    (data2_def=0xffdfb720)
    (data3_def=0xffdfb720)
    (data4_def=0xffdfb720)
    (data5_def=0xffdfb720)
    (data8_def=0xffdfb720)
    (data9_def=0xffdfb720)
    (data10_def=0xffdfb720)
    (data11_def=0xffdfb720)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0xffdfb720)
    (data1=0xffdfb720)
    (data2=0xffdfb720)
    (data3=0xffdfb720)
    (data4=0xffdfb720)
    (data5=0xffdfb720)
    (data8=0xffdfb720)
    (data9=0xffdfb720)
    (data10=0xffdfb720)
    (data11=0xffdfb720)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0xffdfb720)
    (data1_val=0xffdfb720)
    (data2_val=0xffdfb720)
    (data3_val=0xffdfb720)
    (data4_val=0xffdfb720)
    (data5_val=0xffdfb720)
    (data8_val=0xffdfb720)
    (data9_val=0xffdfb720)
    (data10_val=0xffdfb720)
    (data11_val=0xffdfb720)
target=62, linearSearch=[62, 2224]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=0xffdeec50)
    (data1_def=0xffdeec50)
    (data2_def=0xffdeec50)
    (data3_def=0xffdeec50)
    (data4_def=0xffdeec50)
    (data5_def=0xffdeec50)
    (data8_def=0xffdeec50)
    (data9_def=0xffdeec50)
    (data10_def=0xffdeec50)
    (data11_def=0xffdeec50)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0xffdeec50)
    (data1=0xffdeec50)
    (data2=0xffdeec50)
    (data3=0xffdeec50)
    (data4=0xffdeec50)
    (data5=0xffdeec50)
    (data8=0xffdeec50)
    (data9=0xffdeec50)
    (data10=0xffdeec50)
    (data11=0xffdeec50)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0xffdeec50)
    (data1_val=0xffdeec50)
    (data2_val=0xffdeec50)
    (data3_val=0xffdeec50)
    (data4_val=0xffdeec50)
    (data5_val=0xffdeec50)
    (data8_val=0xffdeec50)
    (data9_val=0xffdeec50)
    (data10_val=0xffdeec50)
    (data11_val=0xffdeec50)
target=126, linearSearch=[126, 1575]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=0xffe442e0)
    (data1_def=0xffe442e0)
    (data2_def=0xffe442e0)
    (data3_def=0xffe442e0)
    (data4_def=0xffe442e0)
    (data5_def=0xffe442e0)
    (data8_def=0xffe442e0)
    (data9_def=0xffe442e0)
    (data10_def=0xffe442e0)
    (data11_def=0xffe442e0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0xffe442e0)
    (data1=0xffe442e0)
    (data2=0xffe442e0)
    (data3=0xffe442e0)
    (data4=0xffe442e0)
    (data5=0xffe442e0)
    (data8=0xffe442e0)
    (data9=0xffe442e0)
    (data10=0xffe442e0)
    (data11=0xffe442e0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0xffe442e0)
    (data1_val=0xffe442e0)
    (data2_val=0xffe442e0)
    (data3_val=0xffe442e0)
    (data4_val=0xffe442e0)
    (data5_val=0xffe442e0)
    (data8_val=0xffe442e0)
    (data9_val=0xffe442e0)
    (data10_val=0xffe442e0)
    (data11_val=0xffe442e0)
target=254, linearSearch=[254, 5948]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x0)
    (data1_def=0x0)
    (data2_def=0x0)
    (data3_def=0x0)
    (data4_def=0x0)
    (data5_def=0x0)
    (data8_def=0x0)
    (data9_def=0x0)
   (data10_def=0x0)
    (data11_def=0x0)
  binarySearch(*array_shuffle1, search_comparison);
    (data=0x0)
    (data1=0x0)
    (data2=0x0)
    (data3=0x0)
    (data4=0x0)
    (data5=0x0)
    (data8=0x0)
    (data9=0x0)
    (data10=0x0)
    (data11=0x0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x0)
    (data1_val=0x0)
    (data2_val=0x0)
    (data3_val=0x0)
    (data4_val=0x0)
    (data5_val=0x0)
    (data8_val=0x0)
    (data9_val=0x0)
    (data10_val=0x0)
    (data11_val=0x0)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=0xffdd0020)
    (data1_def=0xffdd0020)
    (data2_def=0xffdd0020)
    (data3_def=0xffdd0020)
    (data4_def=0xffdd0020)
    (data5_def=0xffdd0020)
    (data8_def=0xffdd0020)
    (data9_def=0xffdd0020)
   (data10_def=0xffdd0020)
    (data11_def=0xffdd0020)
  binarySearch(*array_shuffle1, search_comparison);
    (data=0xffdd0020)
    (data1=0xffdd0020)
    (data2=0xffdd0020)
    (data3=0xffdd0020)
    (data4=0xffdd0020)
    (data5=0xffdd0020)
    (data8=0xffdd0020)
    (data9=0xffdd0020)
    (data10=0xffdd0020)
    (data11=0xffdd0020)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0xffdd0020)
    (data1_val=0xffdd0020)
    (data2_val=0xffdd0020)
    (data3_val=0xffdd0020)
    (data4_val=0xffdd0020)
    (data5_val=0xffdd0020)
    (data8_val=0xffdd0020)
    (data9_val=0xffdd0020)
    (data10_val=0xffdd0020)
    (data11_val=0xffdd0020)
target=0, binarySearch=[0, 1276]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=0xffdd0200)
    (data1_def=0xffdd0200)
    (data2_def=0xffdd0200)
    (data3_def=0xffdd0200)
    (data4_def=0xffdd0200)
    (data5_def=0xffdd0200)
    (data8_def=0xffdd0200)
    (data9_def=0xffdd0200)
   (data10_def=0xffdd0200)
    (data11_def=0xffdd0200)
  binarySearch(*array_shuffle1, search_comparison);
    (data=0xffdd0200)
    (data1=0xffdd0200)
    (data2=0xffdd0200)
    (data3=0xffdd0200)
    (data4=0xffdd0200)
    (data5=0xffdd0200)
    (data8=0xffdd0200)
    (data9=0xffdd0200)
    (data10=0xffdd0200)
    (data11=0xffdd0200)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0xffdd0200)
    (data1_val=0xffdd0200)
    (data2_val=0xffdd0200)
    (data3_val=0xffdd0200)
    (data4_val=0xffdd0200)
    (data5_val=0xffdd0200)
    (data8_val=0xffdd0200)
    (data9_val=0xffdd0200)
    (data10_val=0xffdd0200)
    (data11_val=0xffdd0200)
target=2, binarySearch=[2, 4297]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=0xffdd05c0)
    (data1_def=0xffdd05c0)
    (data2_def=0xffdd05c0)
    (data3_def=0xffdd05c0)
    (data4_def=0xffdd05c0)
    (data5_def=0xffdd05c0)
    (data8_def=0xffdd05c0)
    (data9_def=0xffdd05c0)
   (data10_def=0xffdd05c0)
    (data11_def=0xffdd05c0)
  binarySearch(*array_shuffle1, search_comparison);
    (data=0xffdd05c0)
    (data1=0xffdd05c0)
    (data2=0xffdd05c0)
    (data3=0xffdd05c0)
    (data4=0xffdd05c0)
    (data5=0xffdd05c0)
    (data8=0xffdd05c0)
    (data9=0xffdd05c0)
    (data10=0xffdd05c0)
    (data11=0xffdd05c0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0xffdd05c0)
    (data1_val=0xffdd05c0)
    (data2_val=0xffdd05c0)
    (data3_val=0xffdd05c0)
    (data4_val=0xffdd05c0)
    (data5_val=0xffdd05c0)
    (data8_val=0xffdd05c0)
    (data9_val=0xffdd05c0)
    (data10_val=0xffdd05c0)
    (data11_val=0xffdd05c0)
target=6, binarySearch=[6, 1745]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=0xffdd0d40)
    (data1_def=0xffdd0d40)
    (data2_def=0xffdd0d40)
    (data3_def=0xffdd0d40)
    (data4_def=0xffdd0d40)
    (data5_def=0xffdd0d40)
    (data8_def=0xffdd0d40)
    (data9_def=0xffdd0d40)
   (data10_def=0xffdd0d40)
    (data11_def=0xffdd0d40)
  binarySearch(*array_shuffle1, search_comparison);
    (data=0xffdd0d40)
    (data1=0xffdd0d40)
    (data2=0xffdd0d40)
    (data3=0xffdd0d40)
    (data4=0xffdd0d40)
    (data5=0xffdd0d40)
    (data8=0xffdd0d40)
    (data9=0xffdd0d40)
    (data10=0xffdd0d40)
    (data11=0xffdd0d40)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0xffdd0d40)
    (data1_val=0xffdd0d40)
    (data2_val=0xffdd0d40)
    (data3_val=0xffdd0d40)
    (data4_val=0xffdd0d40)
    (data5_val=0xffdd0d40)
    (data8_val=0xffdd0d40)
    (data9_val=0xffdd0d40)
    (data10_val=0xffdd0d40)
    (data11_val=0xffdd0d40)
target=14, binarySearch=[14, 191]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=0xffdd1c40)
    (data1_def=0xffdd1c40)
    (data2_def=0xffdd1c40)
    (data3_def=0xffdd1c40)
    (data4_def=0xffdd1c40)
    (data5_def=0xffdd1c40)
    (data8_def=0xffdd1c40)
    (data9_def=0xffdd1c40)
   (data10_def=0xffdd1c40)
    (data11_def=0xffdd1c40)
  binarySearch(*array_shuffle1, search_comparison);
    (data=0xffdd1c40)
    (data1=0xffdd1c40)
    (data2=0xffdd1c40)
    (data3=0xffdd1c40)
    (data4=0xffdd1c40)
    (data5=0xffdd1c40)
    (data8=0xffdd1c40)
    (data9=0xffdd1c40)
    (data10=0xffdd1c40)
    (data11=0xffdd1c40)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0xffdd1c40)
    (data1_val=0xffdd1c40)
    (data2_val=0xffdd1c40)
    (data3_val=0xffdd1c40)
    (data4_val=0xffdd1c40)
    (data5_val=0xffdd1c40)
    (data8_val=0xffdd1c40)
    (data9_val=0xffdd1c40)
    (data10_val=0xffdd1c40)
    (data11_val=0xffdd1c40)
target=30, binarySearch=[30, 6168]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=0xffdd3a40)
    (data1_def=0xffdd3a40)
    (data2_def=0xffdd3a40)
    (data3_def=0xffdd3a40)
    (data4_def=0xffdd3a40)
    (data5_def=0xffdd3a40)
    (data8_def=0xffdd3a40)
    (data9_def=0xffdd3a40)
   (data10_def=0xffdd3a40)
    (data11_def=0xffdd3a40)
  binarySearch(*array_shuffle1, search_comparison);
    (data=0xffdd3a40)
    (data1=0xffdd3a40)
    (data2=0xffdd3a40)
    (data3=0xffdd3a40)
    (data4=0xffdd3a40)
    (data5=0xffdd3a40)
    (data8=0xffdd3a40)
    (data9=0xffdd3a40)
    (data10=0xffdd3a40)
    (data11=0xffdd3a40)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0xffdd3a40)
    (data1_val=0xffdd3a40)
    (data2_val=0xffdd3a40)
    (data3_val=0xffdd3a40)
    (data4_val=0xffdd3a40)
    (data5_val=0xffdd3a40)
    (data8_val=0xffdd3a40)
    (data9_val=0xffdd3a40)
    (data10_val=0xffdd3a40)
    (data11_val=0xffdd3a40)
target=62, binarySearch=[62, 4717]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=0xffdd7640)
    (data1_def=0xffdd7640)
    (data2_def=0xffdd7640)
    (data3_def=0xffdd7640)
    (data4_def=0xffdd7640)
    (data5_def=0xffdd7640)
    (data8_def=0xffdd7640)
    (data9_def=0xffdd7640)
   (data10_def=0xffdd7640)
    (data11_def=0xffdd7640)
  binarySearch(*array_shuffle1, search_comparison);
    (data=0xffdd7640)
    (data1=0xffdd7640)
    (data2=0xffdd7640)
    (data3=0xffdd7640)
    (data4=0xffdd7640)
    (data5=0xffdd7640)
    (data8=0xffdd7640)
    (data9=0xffdd7640)
    (data10=0xffdd7640)
    (data11=0xffdd7640)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0xffdd7640)
    (data1_val=0xffdd7640)
    (data2_val=0xffdd7640)
    (data3_val=0xffdd7640)
    (data4_val=0xffdd7640)
    (data5_val=0xffdd7640)
    (data8_val=0xffdd7640)
    (data9_val=0xffdd7640)
    (data10_val=0xffdd7640)
    (data11_val=0xffdd7640)
target=126, binarySearch=[126, 2512]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=0xffddee40)
    (data1_def=0xffddee40)
    (data2_def=0xffddee40)
    (data3_def=0xffddee40)
    (data4_def=0xffddee40)
    (data5_def=0xffddee40)
    (data8_def=0xffddee40)
    (data9_def=0xffddee40)
   (data10_def=0xffddee40)
    (data11_def=0xffddee40)
  binarySearch(*array_shuffle1, search_comparison);
    (data=0xffddee40)
    (data1=0xffddee40)
    (data2=0xffddee40)
    (data3=0xffddee40)
    (data4=0xffddee40)
    (data5=0xffddee40)
    (data8=0xffddee40)
    (data9=0xffddee40)
    (data10=0xffddee40)
    (data11=0xffddee40)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0xffddee40)
    (data1_val=0xffddee40)
    (data2_val=0xffddee40)
    (data3_val=0xffddee40)
    (data4_val=0xffddee40)
    (data5_val=0xffddee40)
    (data8_val=0xffddee40)
    (data9_val=0xffddee40)
    (data10_val=0xffddee40)
    (data11_val=0xffddee40)
target=254, binarySearch=[254, 8995]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=23.270504000 sec.
