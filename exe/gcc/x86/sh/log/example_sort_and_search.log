============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=5004 / record(s)=10000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=5040 / record(s)=10000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=4994 / record(s)=10000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=10000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=3333 / record(s)=10000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=10000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=4943 / record(s)=10000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001338000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001314000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001346000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000436000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000800000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000448000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001315000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.006997000 sec.
* Average time     = 0.000999571 sec.
* Min time         = 0.000436000 sec.
* Max time         = 0.001346000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001863000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001836000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001854000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000658000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000761000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000702000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001920000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.009594000 sec.
* Average time     = 0.001370571 sec.
* Min time         = 0.000658000 sec.
* Max time         = 0.001920000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001594000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001606000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001551000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000480000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000580000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000481000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001585000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.007877000 sec.
* Average time     = 0.001125286 sec.
* Min time         = 0.000480000 sec.
* Max time         = 0.001606000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001582000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001556000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001615000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000494000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000612000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000579000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001604000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.008042000 sec.
* Average time     = 0.001148857 sec.
* Min time         = 0.000494000 sec.
* Max time         = 0.001615000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001565000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001550000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001555000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000476000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000572000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000476000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001586000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.007780000 sec.
* Average time     = 0.001111429 sec.
* Min time         = 0.000476000 sec.
* Max time         = 0.001586000 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002425000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002367000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002359000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001380000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001567000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001459000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002279000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.013836000 sec.
* Average time     = 0.001976571 sec.
* Min time         = 0.001380000 sec.
* Max time         = 0.002425000 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.830140000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24928612 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.811257000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24785773 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.854470000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25072530 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000018000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=1.568746000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.082085000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=1.185313000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37273739 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 5.332029000 sec.
* Average time     = 0.761718429 sec.
* Min time         = 0.000018000 sec.
* Max time         = 1.568746000 sec.
* Total Swapped    = 162065650 count(s)
* Average  Swapped =  23152235 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.810324000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24928612 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.794960000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24785773 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.790321000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25072530 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000014000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=1.589280000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000609000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=1.169413000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37273739 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 5.154921000 sec.
* Average time     = 0.736417286 sec.
* Min time         = 0.000014000 sec.
* Max time         = 1.589280000 sec.
* Total Swapped    = 162065650 count(s)
* Average  Swapped =  23152235 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.622685000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24928612 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.615203000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24785773 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.625347000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25072530 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000098000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.782813000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.451225000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.732039000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37273739 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 3.829410000 sec.
* Average time     = 0.547058571 sec.
* Min time         = 0.000098000 sec.
* Max time         = 0.782813000 sec.
* Total Swapped    = 162065650 count(s)
* Average  Swapped =  23152235 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.018365000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1880292 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.015140000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1853286 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.017175000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1884921 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.004086000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=485134 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.010860000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1465201 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.005331000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=485527 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.018991000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1875160 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.089948000 sec.
* Average time     = 0.012849714 sec.
* Min time         = 0.004086000 sec.
* Max time         = 0.018991000 sec.
* Total Swapped    =   9929521 count(s)
* Average  Swapped =   1418503 count(s)
* Min Swapped      =    485134 count(s)
* Max Swapped      =   1884921 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002421000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=56744 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002420000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57503 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002441000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57626 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000485000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001062000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=18345 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000740000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=7303 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002490000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=58579 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.012059000 sec.
* Average time     = 0.001722714 sec.
* Min time         = 0.000485000 sec.
* Max time         = 0.002490000 sec.
* Total Swapped    =    256100 count(s)
* Average  Swapped =     36585 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     58579 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.744967000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24928612 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.714731000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24785773 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.720403000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25072530 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000020000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=1.438413000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000612000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=1.070796000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37273739 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 4.689942000 sec.
* Average time     = 0.669991714 sec.
* Min time         = 0.000020000 sec.
* Max time         = 1.438413000 sec.
* Total Swapped    = 162065650 count(s)
* Average  Swapped =  23152235 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001533000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33316 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001519000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33617 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001527000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33331 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000256000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000387000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000311000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001603000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=35947 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.007136000 sec.
* Average time     = 0.001019429 sec.
* Min time         = 0.000256000 sec.
* Max time         = 0.001603000 sec.
* Total Swapped    =    151211 count(s)
* Average  Swapped =     21601 count(s)
* Min Swapped      =      3333 count(s)
* Max Swapped      =     35947 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.073719000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9987 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.074540000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9993 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.073464000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9995 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.073838000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.074337000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.073622000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.073353000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9987 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.516873000 sec.
* Average time     = 0.073839000 sec.
* Min time         = 0.073353000 sec.
* Max time         = 0.074540000 sec.
* Total Swapped    =     48298 count(s)
* Average  Swapped =      6899 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.005120000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129453 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.004945000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129590 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.004922000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129406 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.006702000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=218680 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.003889000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=116627 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.006681000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=213143 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.004510000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=123233 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.036769000 sec.
* Average time     = 0.005252714 sec.
* Min time         = 0.003889000 sec.
* Max time         = 0.006702000 sec.
* Total Swapped    =   1060132 count(s)
* Average  Swapped =    151447 count(s)
* Min Swapped      =    116627 count(s)
* Max Swapped      =    218680 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.280201000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9988 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.275004000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9992 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.277733000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9988 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000017000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.565226000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000407000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.424697000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9986 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 1.823285000 sec.
* Average time     = 0.260469286 sec.
* Min time         = 0.000017000 sec.
* Max time         = 0.565226000 sec.
* Total Swapped    =     59952 count(s)
* Average  Swapped =      8564 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.003411000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48881 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003412000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48400 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.003526000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49161 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000247000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001447000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=37222 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000377000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=5156 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.003207000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49801 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.015627000 sec.
* Average time     = 0.002232429 sec.
* Min time         = 0.000247000 sec.
* Max time         = 0.003526000 sec.
* Total Swapped    =    238621 count(s)
* Average  Swapped =     34088 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     49801 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.248971000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58247 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.248826000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58256 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.250100000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58341 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000036000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.498285000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=60442 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000478000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.371812000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58237 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 1.618508000 sec.
* Average time     = 0.231215429 sec.
* Min time         = 0.000036000 sec.
* Max time         = 0.498285000 sec.
* Total Swapped    =    303529 count(s)
* Average  Swapped =     43361 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     60442 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001487000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31094 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001497000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=30961 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001621000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31118 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000015000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000297000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=6022 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000152000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1024 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001682000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=34513 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.006751000 sec.
* Average time     = 0.000964429 sec.
* Min time         = 0.000015000 sec.
* Max time         = 0.001682000 sec.
* Total Swapped    =    134732 count(s)
* Average  Swapped =     19247 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     34513 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000404000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000353000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000366000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000107000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000229000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000106000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000336000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.001901000 sec.
* Average time     = 0.000271571 sec.
* Min time         = 0.000106000 sec.
* Max time         = 0.000404000 sec.
* Total Swapped    =     50002 count(s)
* Average  Swapped =      7143 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     10000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 10000 Count(s)
Total Array size   = 800000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.006997000/  0.000999571/  0.000436000/  0.001346000
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.009594000/  0.001370571/  0.000658000/  0.001920000
- std::sort(inline-func):   0.007877000/  0.001125286/  0.000480000/  0.001606000
- std::sort(functor):       0.008042000/  0.001148857/  0.000494000/  0.001615000
- std::sort(lambda):        0.007780000/  0.001111429/  0.000476000/  0.001586000
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.013836000/  0.001976571/  0.001380000/  0.002425000
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           5.332029000/  0.761718429/  0.000018000/  1.568746000  162065650/   23152235/          0/   49985001
- Shaker sort<S>:           5.154921000/  0.736417286/  0.000014000/  1.589280000  162065650/   23152235/          0/   49985001
- Odd-Even sort<S>:         3.829410000/  0.547058571/  0.000098000/  0.782813000  162065650/   23152235/          0/   49985001
- Shear sort:               0.089948000/  0.012849714/  0.004086000/  0.018991000    9929521/    1418503/     485134/    1884921
- Comb sort:                0.012059000/  0.001722714/  0.000485000/  0.002490000     256100/      36585/          0/      58579
- Gnome sort<S>:            4.689942000/  0.669991714/  0.000020000/  1.438413000  162065650/   23152235/          0/   49985001
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.007136000/  0.001019429/  0.000256000/  0.001603000     151211/      21601/       3333/      35947
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.516873000/  0.073839000/  0.073353000/  0.074540000      48298/       6899/          0/       9995
- Heap sort:                0.036769000/  0.005252714/  0.003889000/  0.006702000    1060132/     151447/     116627/     218680
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        1.823285000/  0.260469286/  0.000017000/  0.565226000      59952/       8564/          0/       9999
- Shell sort:               0.015627000/  0.002232429/  0.000247000/  0.003526000     238621/      34088/          0/      49801
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    1.618508000/  0.231215429/  0.000036000/  0.498285000     303529/      43361/          0/      60442
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.006751000/  0.000964429/  0.000015000/  0.001682000     134732/      19247/          0/      34513
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.001901000/  0.000271571/  0.000106000/  0.000404000      50002/       7143/          0/      10000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=31094)
(result1=31094)
(result3=31094)
(result4=31094)
(result5=31094)
(result6=31094)
(result8=31094)
(result9=31094)
(result10=31094)
(result11=31462)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x0)
    (data1_def=0x0)
    (data2_def=0x0)
    (data3_def=0x0)
    (data4_def=0x0)
    (data5_def=0x0)
    (data8_def=0x0)
    (data9_def=0x0)
    (data10_def=0x0)
    (data11_def=0x0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x0)
    (data1=0x0)
    (data2=0x0)
    (data3=0x0)
    (data4=0x0)
    (data5=0x0)
    (data8=0x0)
    (data9=0x0)
    (data10=0x0)
    (data11=0x0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x0)
    (data1_val=0x0)
    (data2_val=0x0)
    (data3_val=0x0)
    (data4_val=0x0)
    (data5_val=0x0)
    (data8_val=0x0)
    (data9_val=0x0)
    (data10_val=0x0)
    (data11_val=0x0)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=0xffde8ee0)
    (data1_def=0xffde8ee0)
    (data2_def=0xffde8ee0)
    (data3_def=0xffde8ee0)
    (data4_def=0xffde8ee0)
    (data5_def=0xffde8ee0)
    (data8_def=0xffde8ee0)
    (data9_def=0xffde8ee0)
    (data10_def=0xffde8ee0)
    (data11_def=0xffde8ee0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0xffde8ee0)
    (data1=0xffde8ee0)
    (data2=0xffde8ee0)
    (data3=0xffde8ee0)
    (data4=0xffde8ee0)
    (data5=0xffde8ee0)
    (data8=0xffde8ee0)
    (data9=0xffde8ee0)
    (data10=0xffde8ee0)
    (data11=0xffde8ee0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0xffde8ee0)
    (data1_val=0xffde8ee0)
    (data2_val=0xffde8ee0)
    (data3_val=0xffde8ee0)
    (data4_val=0xffde8ee0)
    (data5_val=0xffde8ee0)
    (data8_val=0xffde8ee0)
    (data9_val=0xffde8ee0)
    (data10_val=0xffde8ee0)
    (data11_val=0xffde8ee0)
target=0, linearSearch=[0, 1276]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=0xffdde620)
    (data1_def=0xffdde620)
    (data2_def=0xffdde620)
    (data3_def=0xffdde620)
    (data4_def=0xffdde620)
    (data5_def=0xffdde620)
    (data8_def=0xffdde620)
    (data9_def=0xffdde620)
    (data10_def=0xffdde620)
    (data11_def=0xffdde620)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0xffdde620)
    (data1=0xffdde620)
    (data2=0xffdde620)
    (data3=0xffdde620)
    (data4=0xffdde620)
    (data5=0xffdde620)
    (data8=0xffdde620)
    (data9=0xffdde620)
    (data10=0xffdde620)
    (data11=0xffdde620)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0xffdde620)
    (data1_val=0xffdde620)
    (data2_val=0xffdde620)
    (data3_val=0xffdde620)
    (data4_val=0xffdde620)
    (data5_val=0xffdde620)
    (data8_val=0xffdde620)
    (data9_val=0xffdde620)
    (data10_val=0xffdde620)
    (data11_val=0xffdde620)
target=2, linearSearch=[2, 736]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=0xffddff70)
    (data1_def=0xffddff70)
    (data2_def=0xffddff70)
    (data3_def=0xffddff70)
    (data4_def=0xffddff70)
    (data5_def=0xffddff70)
    (data8_def=0xffddff70)
    (data9_def=0xffddff70)
    (data10_def=0xffddff70)
    (data11_def=0xffddff70)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0xffddff70)
    (data1=0xffddff70)
    (data2=0xffddff70)
    (data3=0xffddff70)
    (data4=0xffddff70)
    (data5=0xffddff70)
    (data8=0xffddff70)
    (data9=0xffddff70)
    (data10=0xffddff70)
    (data11=0xffddff70)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0xffddff70)
    (data1_val=0xffddff70)
    (data2_val=0xffddff70)
    (data3_val=0xffddff70)
    (data4_val=0xffddff70)
    (data5_val=0xffddff70)
    (data8_val=0xffddff70)
    (data9_val=0xffddff70)
    (data10_val=0xffddff70)
    (data11_val=0xffddff70)
target=6, linearSearch=[6, 817]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=0xffdd3bd0)
    (data1_def=0xffdd3bd0)
    (data2_def=0xffdd3bd0)
    (data3_def=0xffdd3bd0)
    (data4_def=0xffdd3bd0)
    (data5_def=0xffdd3bd0)
    (data8_def=0xffdd3bd0)
    (data9_def=0xffdd3bd0)
    (data10_def=0xffdd3bd0)
    (data11_def=0xffdd3bd0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0xffdd3bd0)
    (data1=0xffdd3bd0)
    (data2=0xffdd3bd0)
    (data3=0xffdd3bd0)
    (data4=0xffdd3bd0)
    (data5=0xffdd3bd0)
    (data8=0xffdd3bd0)
    (data9=0xffdd3bd0)
    (data10=0xffdd3bd0)
    (data11=0xffdd3bd0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0xffdd3bd0)
    (data1_val=0xffdd3bd0)
    (data2_val=0xffdd3bd0)
    (data3_val=0xffdd3bd0)
    (data4_val=0xffdd3bd0)
    (data5_val=0xffdd3bd0)
    (data8_val=0xffdd3bd0)
    (data9_val=0xffdd3bd0)
    (data10_val=0xffdd3bd0)
    (data11_val=0xffdd3bd0)
target=14, linearSearch=[14, 191]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=0xffe167a0)
    (data1_def=0xffe167a0)
    (data2_def=0xffe167a0)
    (data3_def=0xffe167a0)
    (data4_def=0xffe167a0)
    (data5_def=0xffe167a0)
    (data8_def=0xffe167a0)
    (data9_def=0xffe167a0)
    (data10_def=0xffe167a0)
    (data11_def=0xffe167a0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0xffe167a0)
    (data1=0xffe167a0)
    (data2=0xffe167a0)
    (data3=0xffe167a0)
    (data4=0xffe167a0)
    (data5=0xffe167a0)
    (data8=0xffe167a0)
    (data9=0xffe167a0)
    (data10=0xffe167a0)
    (data11=0xffe167a0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0xffe167a0)
    (data1_val=0xffe167a0)
    (data2_val=0xffe167a0)
    (data3_val=0xffe167a0)
    (data4_val=0xffe167a0)
    (data5_val=0xffe167a0)
    (data8_val=0xffe167a0)
    (data9_val=0xffe167a0)
    (data10_val=0xffe167a0)
    (data11_val=0xffe167a0)
target=30, linearSearch=[30, 3608]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=0xffdfb720)
    (data1_def=0xffdfb720)
    (data2_def=0xffdfb720)
    (data3_def=0xffdfb720)
    (data4_def=0xffdfb720)
    (data5_def=0xffdfb720)
    (data8_def=0xffdfb720)
    (data9_def=0xffdfb720)
    (data10_def=0xffdfb720)
    (data11_def=0xffdfb720)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0xffdfb720)
    (data1=0xffdfb720)
    (data2=0xffdfb720)
    (data3=0xffdfb720)
    (data4=0xffdfb720)
    (data5=0xffdfb720)
    (data8=0xffdfb720)
    (data9=0xffdfb720)
    (data10=0xffdfb720)
    (data11=0xffdfb720)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0xffdfb720)
    (data1_val=0xffdfb720)
    (data2_val=0xffdfb720)
    (data3_val=0xffdfb720)
    (data4_val=0xffdfb720)
    (data5_val=0xffdfb720)
    (data8_val=0xffdfb720)
    (data9_val=0xffdfb720)
    (data10_val=0xffdfb720)
    (data11_val=0xffdfb720)
target=62, linearSearch=[62, 2224]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=0xffdeec50)
    (data1_def=0xffdeec50)
    (data2_def=0xffdeec50)
    (data3_def=0xffdeec50)
    (data4_def=0xffdeec50)
    (data5_def=0xffdeec50)
    (data8_def=0xffdeec50)
    (data9_def=0xffdeec50)
    (data10_def=0xffdeec50)
    (data11_def=0xffdeec50)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0xffdeec50)
    (data1=0xffdeec50)
    (data2=0xffdeec50)
    (data3=0xffdeec50)
    (data4=0xffdeec50)
    (data5=0xffdeec50)
    (data8=0xffdeec50)
    (data9=0xffdeec50)
    (data10=0xffdeec50)
    (data11=0xffdeec50)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0xffdeec50)
    (data1_val=0xffdeec50)
    (data2_val=0xffdeec50)
    (data3_val=0xffdeec50)
    (data4_val=0xffdeec50)
    (data5_val=0xffdeec50)
    (data8_val=0xffdeec50)
    (data9_val=0xffdeec50)
    (data10_val=0xffdeec50)
    (data11_val=0xffdeec50)
target=126, linearSearch=[126, 1575]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=0xffe442e0)
    (data1_def=0xffe442e0)
    (data2_def=0xffe442e0)
    (data3_def=0xffe442e0)
    (data4_def=0xffe442e0)
    (data5_def=0xffe442e0)
    (data8_def=0xffe442e0)
    (data9_def=0xffe442e0)
    (data10_def=0xffe442e0)
    (data11_def=0xffe442e0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0xffe442e0)
    (data1=0xffe442e0)
    (data2=0xffe442e0)
    (data3=0xffe442e0)
    (data4=0xffe442e0)
    (data5=0xffe442e0)
    (data8=0xffe442e0)
    (data9=0xffe442e0)
    (data10=0xffe442e0)
    (data11=0xffe442e0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0xffe442e0)
    (data1_val=0xffe442e0)
    (data2_val=0xffe442e0)
    (data3_val=0xffe442e0)
    (data4_val=0xffe442e0)
    (data5_val=0xffe442e0)
    (data8_val=0xffe442e0)
    (data9_val=0xffe442e0)
    (data10_val=0xffe442e0)
    (data11_val=0xffe442e0)
target=254, linearSearch=[254, 5948]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x0)
    (data1_def=0x0)
    (data2_def=0x0)
    (data3_def=0x0)
    (data4_def=0x0)
    (data5_def=0x0)
    (data8_def=0x0)
    (data9_def=0x0)
   (data10_def=0x0)
    (data11_def=0x0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x0)
    (data1=0x0)
    (data2=0x0)
    (data3=0x0)
    (data4=0x0)
    (data5=0x0)
    (data8=0x0)
    (data9=0x0)
    (data10=0x0)
    (data11=0x0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x0)
    (data1_val=0x0)
    (data2_val=0x0)
    (data3_val=0x0)
    (data4_val=0x0)
    (data5_val=0x0)
    (data8_val=0x0)
    (data9_val=0x0)
    (data10_val=0x0)
    (data11_val=0x0)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=0xffdd0020)
    (data1_def=0xffdd0020)
    (data2_def=0xffdd0020)
    (data3_def=0xffdd0020)
    (data4_def=0xffdd0020)
    (data5_def=0xffdd0020)
    (data8_def=0xffdd0020)
    (data9_def=0xffdd0020)
   (data10_def=0xffdd0020)
    (data11_def=0xffdd0020)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0xffdd0020)
    (data1=0xffdd0020)
    (data2=0xffdd0020)
    (data3=0xffdd0020)
    (data4=0xffdd0020)
    (data5=0xffdd0020)
    (data8=0xffdd0020)
    (data9=0xffdd0020)
    (data10=0xffdd0020)
    (data11=0xffdd0020)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0xffdd0020)
    (data1_val=0xffdd0020)
    (data2_val=0xffdd0020)
    (data3_val=0xffdd0020)
    (data4_val=0xffdd0020)
    (data5_val=0xffdd0020)
    (data8_val=0xffdd0020)
    (data9_val=0xffdd0020)
    (data10_val=0xffdd0020)
    (data11_val=0xffdd0020)
target=0, binarySearch=[0, 1276]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=0xffdd0200)
    (data1_def=0xffdd0200)
    (data2_def=0xffdd0200)
    (data3_def=0xffdd0200)
    (data4_def=0xffdd0200)
    (data5_def=0xffdd0200)
    (data8_def=0xffdd0200)
    (data9_def=0xffdd0200)
   (data10_def=0xffdd0200)
    (data11_def=0xffdd0200)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0xffdd0200)
    (data1=0xffdd0200)
    (data2=0xffdd0200)
    (data3=0xffdd0200)
    (data4=0xffdd0200)
    (data5=0xffdd0200)
    (data8=0xffdd0200)
    (data9=0xffdd0200)
    (data10=0xffdd0200)
    (data11=0xffdd0200)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0xffdd0200)
    (data1_val=0xffdd0200)
    (data2_val=0xffdd0200)
    (data3_val=0xffdd0200)
    (data4_val=0xffdd0200)
    (data5_val=0xffdd0200)
    (data8_val=0xffdd0200)
    (data9_val=0xffdd0200)
    (data10_val=0xffdd0200)
    (data11_val=0xffdd0200)
target=2, binarySearch=[2, 4297]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=0xffdd05c0)
    (data1_def=0xffdd05c0)
    (data2_def=0xffdd05c0)
    (data3_def=0xffdd05c0)
    (data4_def=0xffdd05c0)
    (data5_def=0xffdd05c0)
    (data8_def=0xffdd05c0)
    (data9_def=0xffdd05c0)
   (data10_def=0xffdd05c0)
    (data11_def=0xffdd05c0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0xffdd05c0)
    (data1=0xffdd05c0)
    (data2=0xffdd05c0)
    (data3=0xffdd05c0)
    (data4=0xffdd05c0)
    (data5=0xffdd05c0)
    (data8=0xffdd05c0)
    (data9=0xffdd05c0)
    (data10=0xffdd05c0)
    (data11=0xffdd05c0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0xffdd05c0)
    (data1_val=0xffdd05c0)
    (data2_val=0xffdd05c0)
    (data3_val=0xffdd05c0)
    (data4_val=0xffdd05c0)
    (data5_val=0xffdd05c0)
    (data8_val=0xffdd05c0)
    (data9_val=0xffdd05c0)
    (data10_val=0xffdd05c0)
    (data11_val=0xffdd05c0)
target=6, binarySearch=[6, 1745]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=0xffdd0d40)
    (data1_def=0xffdd0d40)
    (data2_def=0xffdd0d40)
    (data3_def=0xffdd0d40)
    (data4_def=0xffdd0d40)
    (data5_def=0xffdd0d40)
    (data8_def=0xffdd0d40)
    (data9_def=0xffdd0d40)
   (data10_def=0xffdd0d40)
    (data11_def=0xffdd0d40)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0xffdd0d40)
    (data1=0xffdd0d40)
    (data2=0xffdd0d40)
    (data3=0xffdd0d40)
    (data4=0xffdd0d40)
    (data5=0xffdd0d40)
    (data8=0xffdd0d40)
    (data9=0xffdd0d40)
    (data10=0xffdd0d40)
    (data11=0xffdd0d40)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0xffdd0d40)
    (data1_val=0xffdd0d40)
    (data2_val=0xffdd0d40)
    (data3_val=0xffdd0d40)
    (data4_val=0xffdd0d40)
    (data5_val=0xffdd0d40)
    (data8_val=0xffdd0d40)
    (data9_val=0xffdd0d40)
    (data10_val=0xffdd0d40)
    (data11_val=0xffdd0d40)
target=14, binarySearch=[14, 191]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=0xffdd1c40)
    (data1_def=0xffdd1c40)
    (data2_def=0xffdd1c40)
    (data3_def=0xffdd1c40)
    (data4_def=0xffdd1c40)
    (data5_def=0xffdd1c40)
    (data8_def=0xffdd1c40)
    (data9_def=0xffdd1c40)
   (data10_def=0xffdd1c40)
    (data11_def=0xffdd1c40)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0xffdd1c40)
    (data1=0xffdd1c40)
    (data2=0xffdd1c40)
    (data3=0xffdd1c40)
    (data4=0xffdd1c40)
    (data5=0xffdd1c40)
    (data8=0xffdd1c40)
    (data9=0xffdd1c40)
    (data10=0xffdd1c40)
    (data11=0xffdd1c40)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0xffdd1c40)
    (data1_val=0xffdd1c40)
    (data2_val=0xffdd1c40)
    (data3_val=0xffdd1c40)
    (data4_val=0xffdd1c40)
    (data5_val=0xffdd1c40)
    (data8_val=0xffdd1c40)
    (data9_val=0xffdd1c40)
    (data10_val=0xffdd1c40)
    (data11_val=0xffdd1c40)
target=30, binarySearch=[30, 6168]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=0xffdd3a40)
    (data1_def=0xffdd3a40)
    (data2_def=0xffdd3a40)
    (data3_def=0xffdd3a40)
    (data4_def=0xffdd3a40)
    (data5_def=0xffdd3a40)
    (data8_def=0xffdd3a40)
    (data9_def=0xffdd3a40)
   (data10_def=0xffdd3a40)
    (data11_def=0xffdd3a40)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0xffdd3a40)
    (data1=0xffdd3a40)
    (data2=0xffdd3a40)
    (data3=0xffdd3a40)
    (data4=0xffdd3a40)
    (data5=0xffdd3a40)
    (data8=0xffdd3a40)
    (data9=0xffdd3a40)
    (data10=0xffdd3a40)
    (data11=0xffdd3a40)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0xffdd3a40)
    (data1_val=0xffdd3a40)
    (data2_val=0xffdd3a40)
    (data3_val=0xffdd3a40)
    (data4_val=0xffdd3a40)
    (data5_val=0xffdd3a40)
    (data8_val=0xffdd3a40)
    (data9_val=0xffdd3a40)
    (data10_val=0xffdd3a40)
    (data11_val=0xffdd3a40)
target=62, binarySearch=[62, 4717]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=0xffdd7640)
    (data1_def=0xffdd7640)
    (data2_def=0xffdd7640)
    (data3_def=0xffdd7640)
    (data4_def=0xffdd7640)
    (data5_def=0xffdd7640)
    (data8_def=0xffdd7640)
    (data9_def=0xffdd7640)
   (data10_def=0xffdd7640)
    (data11_def=0xffdd7640)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0xffdd7640)
    (data1=0xffdd7640)
    (data2=0xffdd7640)
    (data3=0xffdd7640)
    (data4=0xffdd7640)
    (data5=0xffdd7640)
    (data8=0xffdd7640)
    (data9=0xffdd7640)
    (data10=0xffdd7640)
    (data11=0xffdd7640)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0xffdd7640)
    (data1_val=0xffdd7640)
    (data2_val=0xffdd7640)
    (data3_val=0xffdd7640)
    (data4_val=0xffdd7640)
    (data5_val=0xffdd7640)
    (data8_val=0xffdd7640)
    (data9_val=0xffdd7640)
    (data10_val=0xffdd7640)
    (data11_val=0xffdd7640)
target=126, binarySearch=[126, 2512]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=0xffddee40)
    (data1_def=0xffddee40)
    (data2_def=0xffddee40)
    (data3_def=0xffddee40)
    (data4_def=0xffddee40)
    (data5_def=0xffddee40)
    (data8_def=0xffddee40)
    (data9_def=0xffddee40)
   (data10_def=0xffddee40)
    (data11_def=0xffddee40)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0xffddee40)
    (data1=0xffddee40)
    (data2=0xffddee40)
    (data3=0xffddee40)
    (data4=0xffddee40)
    (data5=0xffddee40)
    (data8=0xffddee40)
    (data9=0xffddee40)
    (data10=0xffddee40)
    (data11=0xffddee40)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0xffddee40)
    (data1_val=0xffddee40)
    (data2_val=0xffddee40)
    (data3_val=0xffddee40)
    (data4_val=0xffddee40)
    (data5_val=0xffddee40)
    (data8_val=0xffddee40)
    (data9_val=0xffddee40)
    (data10_val=0xffddee40)
    (data11_val=0xffddee40)
target=254, binarySearch=[254, 8995]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=23.271530000 sec.
