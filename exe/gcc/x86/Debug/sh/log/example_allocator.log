
================================================================================

--------------------------------------------------
[ Test for polyAllocator with new/delete operator ]

> auto adapter = s_stackAllocator.adapter()
> polyAllocator poly_allocator(adapter);
poly_allocator: name="stackAllocator", mode="ManualClear"
stack:size=0,count=0, pool:size=0,pool=0
> data_t* p101 = new data_t;
data_t::data_t(): m_val=0
> data_t* p102 = new data_t[2];
data_t::data_t(): m_val=0
data_t::data_t(): m_val=0
> data_t* p103 = new data_t[3];
data_t::data_t(): m_val=0
data_t::data_t(): m_val=0
data_t::data_t(): m_val=0
stack:size=131,count=3, pool:size=0,pool=0
***** BEGIN BLOCK *****
> auto nested_adapter = s_poolAllocator.adapter()
> polyAllocator nested_poly_allocator(nested_adapter);
nested_poly_allocator: name="poolAllocator", mode="-"
stack:size=131,count=3, pool:size=0,pool=0
> data_t* p201 = new data_t;
data_t::data_t(): m_val=0
> data_t* p202 = new data_t[2];
data_t::data_t(): m_val=0
data_t::data_t(): m_val=0
> data_t* p203 = new(std::nothrow) data_t[3];
stack:size=131,count=3, pool:size=96,pool=2
> delete p201;
data_t::~data_t(): m_val=0
> delete[] p202;
data_t::~data_t(): m_val=0
data_t::~data_t(): m_val=0
> delete[] p203;
stack:size=131,count=3, pool:size=0,pool=0
***** END BLOCK *****
> data_t* p104 = new data_t;
data_t::data_t(): m_val=0
stack:size=147,count=4, pool:size=0,pool=0
> delete p101;
data_t::~data_t(): m_val=0
> delete[] p102;
data_t::~data_t(): m_val=0
data_t::~data_t(): m_val=0
> delete[] p103;
data_t::~data_t(): m_val=0
data_t::~data_t(): m_val=0
data_t::~data_t(): m_val=0
> delete[] p104;
----- Debug Info for scopedStackAllocator -----
maxSize=877, size=0, remain=877, count=0 (INIT: buff=0x46b031, size=147, count=0)
-----------------------------------------------
data_t::data_t(): m_val=0
----- Debug Info for scopedStackAllocator -----
maxSize=877, size=16, remain=861, count=1 (INIT: buff=0x46b031, size=147, count=0)
-----------------------------------------------
data_t::~data_t(): m_val=0
----- Debug Info for scopedStackAllocator -----
maxSize=877, size=16, remain=861, count=0 (INIT: buff=0x46b031, size=147, count=0)
-----------------------------------------------
stack:size=147,count=0, pool:size=0,pool=0

--------------------------------------------------
[ Test for polyAllocator with STL ]

> smartStackAllocator_withBuff<2048> stack;
***** BEGIN BLOCK *****
> auto adapter = stack.adapter();
> polyAllocator poly(adapter);
> std::vector<data_t> array;
> data_t data;
data_t::data_t(): m_val=0
> array.push_back(data);
data_t::data_t(const data_t&): m_val=0
> array.push_back(data);
data_t::data_t(const data_t&): m_val=0
data_t::data_t(const data_t&): m_val=0
data_t::~data_t(): m_val=0
> array.push_back(data);
data_t::data_t(const data_t&): m_val=0
data_t::data_t(const data_t&): m_val=0
data_t::data_t(const data_t&): m_val=0
data_t::~data_t(): m_val=0
data_t::~data_t(): m_val=0
> stack.debugInfo(message); printf(message);
----- Debug Info for stackAllocator -----
buff=0x28a3bd, maxSize=2048, size=115, remain=1933, count=1
-----------------------------------------
***** END BLOCK *****
data_t::~data_t(): m_val=0
data_t::~data_t(): m_val=0
data_t::~data_t(): m_val=0
data_t::~data_t(): m_val=0
> stack.debugInfo(message); printf(message);
----- Debug Info for stackAllocator -----
buff=0x28a3bd, maxSize=2048, size=0, remain=2048, count=0
-----------------------------------------

--------------------------------------------------
[ Test for polyAllocator with GASHA_NEW/GASHA_DELETE ]

> smartStackAllocator_withBuff<2048> stack;
> auto adapter = stack.adapter();
> polyAllocator poly(adapter);
> debugAllocationObserver observer;
> poly.setDebugObserver(observer);
> data_t* p1 = GASHA_NEW(data_t);
[CALLBACK] Operator new(16,16)p=0x28a380, allocator="stackAllocator:AutoClear"
 6data_t[0], file="example_poly_allocator.cpp(202)[Sat Jul 12 03:18:55 2014]", func="testAdvanced", time=0.000147
data_t::data_t(): m_val=0
> data_t* p2 = GASHA_NEW(data_t[2]);
[CALLBACK] Operator new[](48,16)p=0x28a390, allocator="stackAllocator:AutoClear"
 6data_t[2], file="example_poly_allocator.cpp(205)[Sat Jul 12 03:18:55 2014]", func="testAdvanced", time=0.000166
data_t::data_t(): m_val=0
data_t::data_t(): m_val=0
> data_t* p3 = GASHA_NEW_ARRAY(data_t, 3);
[CALLBACK] Operator new[](64,16)p=0x28a3c0, allocator="stackAllocator:AutoClear"
 6data_t[3], file="example_poly_allocator.cpp(208)[Sat Jul 12 03:18:55 2014]", func="testAdvanced", time=0.000176
data_t::data_t(): m_val=0
data_t::data_t(): m_val=0
data_t::data_t(): m_val=0
> GASHA_DELETE(p1);
data_t::~data_t(): m_val=0
[CALLBACK] Operator delete(0x28a380), allocator="stackAllocator:AutoClear"
 6data_t, file="example_poly_allocator.cpp(211)[Sat Jul 12 03:18:55 2014]", func="testAdvanced", time=0.000186
> GASHA_DELETE(p2);
data_t::~data_t(): m_val=0
[CALLBACK] Operator delete(0x28a3a0), allocator="stackAllocator:AutoClear"
 6data_t, file="example_poly_allocator.cpp(214)[Sat Jul 12 03:18:55 2014]", func="testAdvanced", time=0.000193
> GASHA_DELETE(p3);
data_t::~data_t(): m_val=0
[CALLBACK] Operator delete(0x28a3d0), allocator="stackAllocator:AutoClear"
 6data_t, file="example_poly_allocator.cpp(215)[Sat Jul 12 03:18:55 2014]", func="testAdvanced", time=0.000201
> std::vector<data_t> array;
> data_t data;
data_t::data_t(): m_val=0
> array.push_back(data);
[CALLBACK] Operator new(16,4)p=0x28a400, allocator="stackAllocator:AutoClear"
data_t::data_t(const data_t&): m_val=0
> array.push_back(data);
[CALLBACK] Operator new(32,4)p=0x28a410, allocator="stackAllocator:AutoClear"
data_t::data_t(const data_t&): m_val=0
data_t::data_t(const data_t&): m_val=0
data_t::~data_t(): m_val=0
[CALLBACK] Operator delete(0x28a400), allocator="stackAllocator:AutoClear"
> array.push_back(data);
[CALLBACK] Operator new(64,4)p=0x28a430, allocator="stackAllocator:AutoClear"
data_t::data_t(const data_t&): m_val=0
data_t::data_t(const data_t&): m_val=0
data_t::data_t(const data_t&): m_val=0
data_t::~data_t(): m_val=0
data_t::~data_t(): m_val=0
[CALLBACK] Operator delete(0x28a410), allocator="stackAllocator:AutoClear"
***** BEGIN BLOCK *****
> auto nested_adapter = s_poolAllocator.adapter()
> polyAllocator nested_poly_allocator(nested_adapter);
[CALLBACK] Change allocator: "stackAllocator:AutoClear" -> "poolAllocator:-"
***** END BLOCK *****
> poly.resetDebugObserver();
data_t::~data_t(): m_val=0
data_t::~data_t(): m_val=0
data_t::~data_t(): m_val=0
data_t::~data_t(): m_val=0

--------------------------------------------------
[ Test for polyAllocator adapters ]

> stackAllocator<> stack_allocator(buff);
> auto adapter = stack_allocator.adapter();
> polyAllocator poly_allocator(adapter);
> auto scoped_allcator = stack_allocator.scopedAllocator();
> auto adapter = scoped_allcator.adapter();
> polyAllocator poly_allocator(adapter);
> lfStackAllocator<> lf_stack_allocator(buff);
> auto adapter = lf_stack_allocator.adapter();
> polyAllocator poly_allocator(adapter);
> auto scoped_allcator = lf_stack_allocator.scopedAllocator();
> auto adapter = scoped_allcator.adapter();
> polyAllocator poly_allocator(adapter);
> dualStackAllocator<> dual_stack_allocator(buff);
> auto adapter = dual_stack_allocator.adapter();
> polyAllocator poly_allocator(adapter);
> auto scoped_allcator = dual_stack_allocator.scopedAllocator();
> auto adapter = scoped_allcator.adapter();
> polyAllocator poly_allocator(adapter);
> lfDualStackAllocator<> lf_dual_stack_allocator(buff);
> auto adapter = lf_dual_stack_allocator.adapter();
> polyAllocator poly_allocator(adapter);
> auto scoped_allcator = lf_dual_stack_allocator.scopedAllocator();
> auto adapter = scoped_allcator.adapter();
> polyAllocator poly_allocator(adapter);
> monoAllocator<> mono_allocator(buff);
> auto adapter = mono_allocator.adapter();
> polyAllocator poly_allocator(adapter);
> lfMonoAllocator lf_mono_allocator(buff);
> auto adapter = lf_mono_allocator.adapter();
> polyAllocator poly_allocator(adapter);
> stdAllocator<> std_allocator;
> auto adapter = std_allocator.adapter();
> polyAllocator poly_allocator(adapter);
> stdAlignAllocator<> std_align_allocator;
> auto adapter = std_align_allocator.adapter();
> polyAllocator poly_allocator(adapter);
