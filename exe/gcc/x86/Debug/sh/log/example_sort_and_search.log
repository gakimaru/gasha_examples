============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=489 / record(s)=1000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=493 / record(s)=1000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=481 / record(s)=1000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=1000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=333 / record(s)=1000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=1000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=482 / record(s)=1000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000103000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000111000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000098000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000037000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000068000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000036000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000096000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.000549000 sec.
* Average time     = 0.000078429 sec.
* Min time         = 0.000036000 sec.
* Max time         = 0.000111000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000191000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000192000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000191000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000080000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000091000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000079000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000223000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.001047000 sec.
* Average time     = 0.000149571 sec.
* Min time         = 0.000079000 sec.
* Max time         = 0.000223000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000190000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000189000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000191000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000077000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000091000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000080000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000197000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.001015000 sec.
* Average time     = 0.000145000 sec.
* Min time         = 0.000077000 sec.
* Max time         = 0.000197000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000194000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000193000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000193000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000077000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000090000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000079000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000194000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.001020000 sec.
* Average time     = 0.000145714 sec.
* Min time         = 0.000077000 sec.
* Max time         = 0.000194000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000191000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000188000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000191000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000077000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000089000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000078000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000262000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.001076000 sec.
* Average time     = 0.000153714 sec.
* Min time         = 0.000077000 sec.
* Max time         = 0.000262000 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000217000 sec.
Array is ordered. [record(s)=1000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000216000 sec.
Array is ordered. [record(s)=1000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000216000 sec.
Array is ordered. [record(s)=1000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000112000 sec.
Array is ordered. [record(s)=1000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000147000 sec.
Array is ordered. [record(s)=1000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000124000 sec.
Array is ordered. [record(s)=1000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000207000 sec.
Array is ordered. [record(s)=1000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.001239000 sec.
* Average time     = 0.000177000 sec.
* Min time         = 0.000112000 sec.
* Max time         = 0.000217000 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.012129000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=253599 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.011909000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=239327 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.012324000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=251599 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000004000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.020786000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=498501 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.002220000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=1995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.016709000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=373496 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 0.076081000 sec.
* Average time     = 0.010868714 sec.
* Min time         = 0.000004000 sec.
* Max time         = 0.020786000 sec.
* Total Swapped    =   1618517 count(s)
* Average  Swapped =    231216 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =    498501 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.011718000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=253599 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.011409000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=239327 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.011641000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=251599 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000005000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.020827000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=498501 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000083000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=1995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.016642000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=373496 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 0.072325000 sec.
* Average time     = 0.010332143 sec.
* Min time         = 0.000005000 sec.
* Max time         = 0.020827000 sec.
* Total Swapped    =   1618517 count(s)
* Average  Swapped =    231216 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =    498501 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.042719000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=253599 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.042631000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=239327 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.042030000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=251599 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000142000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.045544000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=498501 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.039099000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=1995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.044404000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=373496 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.256569000 sec.
* Average time     = 0.036652714 sec.
* Min time         = 0.000142000 sec.
* Max time         = 0.045544000 sec.
* Total Swapped    =   1618517 count(s)
* Average  Swapped =    231216 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =    498501 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001235000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=50925 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001249000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=49225 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001172000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=49972 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000731000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=14850 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000935000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=43102 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000672000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=16789 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001228000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=48946 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.007222000 sec.
* Average time     = 0.001031714 sec.
* Min time         = 0.000672000 sec.
* Max time         = 0.001249000 sec.
* Total Swapped    =    273809 count(s)
* Average  Swapped =     39115 count(s)
* Min Swapped      =     14850 count(s)
* Max Swapped      =     50925 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000279000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=3868 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000273000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=3733 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000287000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=4009 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000069000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000134000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=1401 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000116000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=754 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000288000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=4065 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.001446000 sec.
* Average time     = 0.000206571 sec.
* Min time         = 0.000069000 sec.
* Max time         = 0.000288000 sec.
* Total Swapped    =     17830 count(s)
* Average  Swapped =      2547 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      4065 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.010710000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=253599 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.010297000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=239327 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.010715000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=251599 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000003000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.020860000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=498501 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000106000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=1995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.015524000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=373496 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 0.068215000 sec.
* Average time     = 0.009745000 sec.
* Min time         = 0.000003000 sec.
* Max time         = 0.020860000 sec.
* Total Swapped    =   1618517 count(s)
* Average  Swapped =    231216 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =    498501 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000222000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=2630 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000228000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=2567 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000219000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=2558 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000066000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000084000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=833 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000063000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000230000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=2813 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.001112000 sec.
* Average time     = 0.000158857 sec.
* Min time         = 0.000063000 sec.
* Max time         = 0.000230000 sec.
* Total Swapped    =     12068 count(s)
* Average  Swapped =      1724 count(s)
* Min Swapped      =       333 count(s)
* Max Swapped      =      2813 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001849000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=997 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001871000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=988 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001845000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=990 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001751000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001913000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=833 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001751000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001877000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=990 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.012857000 sec.
* Average time     = 0.001836714 sec.
* Min time         = 0.001751000 sec.
* Max time         = 0.001913000 sec.
* Total Swapped    =      4801 count(s)
* Average  Swapped =       685 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =       997 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000491000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=9566 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000496000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=9631 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000488000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=9494 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000704000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=15116 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000425000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=8312 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000683000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=14570 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000492000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=8981 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.003779000 sec.
* Average time     = 0.000539857 sec.
* Min time         = 0.000425000 sec.
* Max time         = 0.000704000 sec.
* Total Swapped    =     75670 count(s)
* Average  Swapped =     10810 count(s)
* Min Swapped      =      8312 count(s)
* Max Swapped      =     15116 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.004294000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=991 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.004082000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=995 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.004236000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=991 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000004000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.008519000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000067000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.006599000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=988 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.027801000 sec.
* Average time     = 0.003971571 sec.
* Min time         = 0.000004000 sec.
* Max time         = 0.008519000 sec.
* Total Swapped    =      5963 count(s)
* Average  Swapped =       851 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =       999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000304000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=3240 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000306000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=3191 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000333000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=3326 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000019000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000162000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=2652 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000065000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=704 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000284000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=3342 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.001473000 sec.
* Average time     = 0.000210429 sec.
* Min time         = 0.000019000 sec.
* Max time         = 0.000333000 sec.
* Total Swapped    =     16455 count(s)
* Average  Swapped =      2350 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      3342 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.003602000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=4300 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003387000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=4287 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.003572000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=4305 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000018000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.006844000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=4516 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000078000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=1006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.005354000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=4290 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.022855000 sec.
* Average time     = 0.003265000 sec.
* Min time         = 0.000018000 sec.
* Max time         = 0.006844000 sec.
* Total Swapped    =     22704 count(s)
* Average  Swapped =      3243 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      4516 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000184000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=2351 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000179000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=2303 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000176000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=2291 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000004000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000050000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=576 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000029000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=78 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000186000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=2557 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.000808000 sec.
* Average time     = 0.000115429 sec.
* Min time         = 0.000004000 sec.
* Max time         = 0.000186000 sec.
* Total Swapped    =     10156 count(s)
* Average  Swapped =      1450 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      2557 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000089000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=1000 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000076000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=997 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000077000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=998 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000055000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000076000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=1000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000054000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000076000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.000503000 sec.
* Average time     = 0.000071857 sec.
* Min time         = 0.000054000 sec.
* Max time         = 0.000089000 sec.
* Total Swapped    =      4998 count(s)
* Average  Swapped =       714 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      1000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 1000 Count(s)
Total Array size   = 80000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.000549000/  0.000078429/  0.000036000/  0.000111000
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.001047000/  0.000149571/  0.000079000/  0.000223000
- std::sort(inline-func):   0.001015000/  0.000145000/  0.000077000/  0.000197000
- std::sort(functor):       0.001020000/  0.000145714/  0.000077000/  0.000194000
- std::sort(lambda):        0.001076000/  0.000153714/  0.000077000/  0.000262000
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.001239000/  0.000177000/  0.000112000/  0.000217000
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           0.076081000/  0.010868714/  0.000004000/  0.020786000    1618517/     231216/          0/     498501
- Shaker sort<S>:           0.072325000/  0.010332143/  0.000005000/  0.020827000    1618517/     231216/          0/     498501
- Odd-Even sort<S>:         0.256569000/  0.036652714/  0.000142000/  0.045544000    1618517/     231216/          0/     498501
- Shear sort:               0.007222000/  0.001031714/  0.000672000/  0.001249000     273809/      39115/      14850/      50925
- Comb sort:                0.001446000/  0.000206571/  0.000069000/  0.000288000      17830/       2547/          0/       4065
- Gnome sort<S>:            0.068215000/  0.009745000/  0.000003000/  0.020860000    1618517/     231216/          0/     498501
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.001112000/  0.000158857/  0.000063000/  0.000230000      12068/       1724/        333/       2813
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.012857000/  0.001836714/  0.001751000/  0.001913000       4801/        685/          0/        997
- Heap sort:                0.003779000/  0.000539857/  0.000425000/  0.000704000      75670/      10810/       8312/      15116
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.027801000/  0.003971571/  0.000004000/  0.008519000       5963/        851/          0/        999
- Shell sort:               0.001473000/  0.000210429/  0.000019000/  0.000333000      16455/       2350/          0/       3342
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.022855000/  0.003265000/  0.000018000/  0.006844000      22704/       3243/          0/       4516
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.000808000/  0.000115429/  0.000004000/  0.000186000      10156/       1450/          0/       2557
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.000503000/  0.000071857/  0.000054000/  0.000089000       4998/        714/          0/       1000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=2351)
(result1=2351)
(result3=2351)
(result4=2351)
(result5=2351)
(result6=2351)
(result8=2351)
(result9=2351)
(result10=2351)
(result11=2312)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x0)
    (data1_def=0x0)
    (data2_def=0x0)
    (data3_def=0x0)
    (data4_def=0x0)
    (data5_def=0x0)
    (data8_def=0x0)
    (data9_def=0x0)
    (data10_def=0x0)
    (data11_def=0x0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x0)
    (data1=0x0)
    (data2=0x0)
    (data3=0x0)
    (data4=0x0)
    (data5=0x0)
    (data8=0x0)
    (data9=0x0)
    (data10=0x0)
    (data11=0x0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x0)
    (data1_val=0x0)
    (data2_val=0x0)
    (data3_val=0x0)
    (data4_val=0x0)
    (data5_val=0x0)
    (data8_val=0x0)
    (data9_val=0x0)
    (data10_val=0x0)
    (data11_val=0x0)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x800281c0)
    (data1_def=0x800281c0)
    (data2_def=0x800281c0)
    (data3_def=0x800281c0)
    (data4_def=0x800281c0)
    (data5_def=0x800281c0)
    (data8_def=0x800281c0)
    (data9_def=0x800281c0)
    (data10_def=0x800281c0)
    (data11_def=0x800281c0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x800281c0)
    (data1=0x800281c0)
    (data2=0x800281c0)
    (data3=0x800281c0)
    (data4=0x800281c0)
    (data5=0x800281c0)
    (data8=0x800281c0)
    (data9=0x800281c0)
    (data10=0x800281c0)
    (data11=0x800281c0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x800281c0)
    (data1_val=0x800281c0)
    (data2_val=0x800281c0)
    (data3_val=0x800281c0)
    (data4_val=0x800281c0)
    (data5_val=0x800281c0)
    (data8_val=0x800281c0)
    (data9_val=0x800281c0)
    (data10_val=0x800281c0)
    (data11_val=0x800281c0)
target=0, linearSearch=[0, 399]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x80028da0)
    (data1_def=0x80028da0)
    (data2_def=0x80028da0)
    (data3_def=0x80028da0)
    (data4_def=0x80028da0)
    (data5_def=0x80028da0)
    (data8_def=0x80028da0)
    (data9_def=0x80028da0)
    (data10_def=0x80028da0)
    (data11_def=0x80028da0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x80028da0)
    (data1=0x80028da0)
    (data2=0x80028da0)
    (data3=0x80028da0)
    (data4=0x80028da0)
    (data5=0x80028da0)
    (data8=0x80028da0)
    (data9=0x80028da0)
    (data10=0x80028da0)
    (data11=0x80028da0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x80028da0)
    (data1_val=0x80028da0)
    (data2_val=0x80028da0)
    (data3_val=0x80028da0)
    (data4_val=0x80028da0)
    (data5_val=0x80028da0)
    (data8_val=0x80028da0)
    (data9_val=0x80028da0)
    (data10_val=0x80028da0)
    (data11_val=0x80028da0)
target=2, linearSearch=[2, 437]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x8002dd00)
    (data1_def=0x8002dd00)
    (data2_def=0x8002dd00)
    (data3_def=0x8002dd00)
    (data4_def=0x8002dd00)
    (data5_def=0x8002dd00)
    (data8_def=0x8002dd00)
    (data9_def=0x8002dd00)
    (data10_def=0x8002dd00)
    (data11_def=0x8002dd00)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x8002dd00)
    (data1=0x8002dd00)
    (data2=0x8002dd00)
    (data3=0x8002dd00)
    (data4=0x8002dd00)
    (data5=0x8002dd00)
    (data8=0x8002dd00)
    (data9=0x8002dd00)
    (data10=0x8002dd00)
    (data11=0x8002dd00)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x8002dd00)
    (data1_val=0x8002dd00)
    (data2_val=0x8002dd00)
    (data3_val=0x8002dd00)
    (data4_val=0x8002dd00)
    (data5_val=0x8002dd00)
    (data8_val=0x8002dd00)
    (data9_val=0x8002dd00)
    (data10_val=0x8002dd00)
    (data11_val=0x8002dd00)
target=6, linearSearch=[6, 691]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x800240c0)
    (data1_def=0x800240c0)
    (data2_def=0x800240c0)
    (data3_def=0x800240c0)
    (data4_def=0x800240c0)
    (data5_def=0x800240c0)
    (data8_def=0x800240c0)
    (data9_def=0x800240c0)
    (data10_def=0x800240c0)
    (data11_def=0x800240c0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x800240c0)
    (data1=0x800240c0)
    (data2=0x800240c0)
    (data3=0x800240c0)
    (data4=0x800240c0)
    (data5=0x800240c0)
    (data8=0x800240c0)
    (data9=0x800240c0)
    (data10=0x800240c0)
    (data11=0x800240c0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x800240c0)
    (data1_val=0x800240c0)
    (data2_val=0x800240c0)
    (data3_val=0x800240c0)
    (data4_val=0x800240c0)
    (data5_val=0x800240c0)
    (data8_val=0x800240c0)
    (data9_val=0x800240c0)
    (data10_val=0x800240c0)
    (data11_val=0x800240c0)
target=14, linearSearch=[14, 191]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x8002a290)
    (data1_def=0x8002a290)
    (data2_def=0x8002a290)
    (data3_def=0x8002a290)
    (data4_def=0x8002a290)
    (data5_def=0x8002a290)
    (data8_def=0x8002a290)
    (data9_def=0x8002a290)
    (data10_def=0x8002a290)
    (data11_def=0x8002a290)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x8002a290)
    (data1=0x8002a290)
    (data2=0x8002a290)
    (data3=0x8002a290)
    (data4=0x8002a290)
    (data5=0x8002a290)
    (data8=0x8002a290)
    (data9=0x8002a290)
    (data10=0x8002a290)
    (data11=0x8002a290)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x8002a290)
    (data1_val=0x8002a290)
    (data2_val=0x8002a290)
    (data3_val=0x8002a290)
    (data4_val=0x8002a290)
    (data5_val=0x8002a290)
    (data8_val=0x8002a290)
    (data9_val=0x8002a290)
    (data10_val=0x8002a290)
    (data11_val=0x8002a290)
target=30, linearSearch=[30, 504]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x80029610)
    (data1_def=0x80029610)
    (data2_def=0x80029610)
    (data3_def=0x80029610)
    (data4_def=0x80029610)
    (data5_def=0x80029610)
    (data8_def=0x80029610)
    (data9_def=0x80029610)
    (data10_def=0x80029610)
    (data11_def=0x80029610)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x80029610)
    (data1=0x80029610)
    (data2=0x80029610)
    (data3=0x80029610)
    (data4=0x80029610)
    (data5=0x80029610)
    (data8=0x80029610)
    (data9=0x80029610)
    (data10=0x80029610)
    (data11=0x80029610)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x80029610)
    (data1_val=0x80029610)
    (data2_val=0x80029610)
    (data3_val=0x80029610)
    (data4_val=0x80029610)
    (data5_val=0x80029610)
    (data8_val=0x80029610)
    (data9_val=0x80029610)
    (data10_val=0x80029610)
    (data11_val=0x80029610)
target=62, linearSearch=[62, 464]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x800229f0)
    (data1_def=0x800229f0)
    (data2_def=0x800229f0)
    (data3_def=0x800229f0)
    (data4_def=0x800229f0)
    (data5_def=0x800229f0)
    (data8_def=0x800229f0)
    (data9_def=0x800229f0)
    (data10_def=0x800229f0)
    (data11_def=0x800229f0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x800229f0)
    (data1=0x800229f0)
    (data2=0x800229f0)
    (data3=0x800229f0)
    (data4=0x800229f0)
    (data5=0x800229f0)
    (data8=0x800229f0)
    (data9=0x800229f0)
    (data10=0x800229f0)
    (data11=0x800229f0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x800229f0)
    (data1_val=0x800229f0)
    (data2_val=0x800229f0)
    (data3_val=0x800229f0)
    (data4_val=0x800229f0)
    (data5_val=0x800229f0)
    (data8_val=0x800229f0)
    (data9_val=0x800229f0)
    (data10_val=0x800229f0)
    (data11_val=0x800229f0)
target=126, linearSearch=[126, 118]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x80027220)
    (data1_def=0x80027220)
    (data2_def=0x80027220)
    (data3_def=0x80027220)
    (data4_def=0x80027220)
    (data5_def=0x80027220)
    (data8_def=0x80027220)
    (data9_def=0x80027220)
    (data10_def=0x80027220)
    (data11_def=0x80027220)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x80027220)
    (data1=0x80027220)
    (data2=0x80027220)
    (data3=0x80027220)
    (data4=0x80027220)
    (data5=0x80027220)
    (data8=0x80027220)
    (data9=0x80027220)
    (data10=0x80027220)
    (data11=0x80027220)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x80027220)
    (data1_val=0x80027220)
    (data2_val=0x80027220)
    (data3_val=0x80027220)
    (data4_val=0x80027220)
    (data5_val=0x80027220)
    (data8_val=0x80027220)
    (data9_val=0x80027220)
    (data10_val=0x80027220)
    (data11_val=0x80027220)
target=254, linearSearch=[254, 349]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x0)
    (data1_def=0x0)
    (data2_def=0x0)
    (data3_def=0x0)
    (data4_def=0x0)
    (data5_def=0x0)
    (data8_def=0x0)
    (data9_def=0x0)
   (data10_def=0x0)
    (data11_def=0x0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x0)
    (data1=0x0)
    (data2=0x0)
    (data3=0x0)
    (data4=0x0)
    (data5=0x0)
    (data8=0x0)
    (data9=0x0)
    (data10=0x0)
    (data11=0x0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x0)
    (data1_val=0x0)
    (data2_val=0x0)
    (data3_val=0x0)
    (data4_val=0x0)
    (data5_val=0x0)
    (data8_val=0x0)
    (data9_val=0x0)
    (data10_val=0x0)
    (data11_val=0x0)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x80020510)
    (data1_def=0x80020510)
    (data2_def=0x80020510)
    (data3_def=0x80020510)
    (data4_def=0x80020510)
    (data5_def=0x80020510)
    (data8_def=0x80020510)
    (data9_def=0x80020510)
   (data10_def=0x80020510)
    (data11_def=0x80020510)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x80020510)
    (data1=0x80020510)
    (data2=0x80020510)
    (data3=0x80020510)
    (data4=0x80020510)
    (data5=0x80020510)
    (data8=0x80020510)
    (data9=0x80020510)
    (data10=0x80020510)
    (data11=0x80020510)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x80020510)
    (data1_val=0x80020510)
    (data2_val=0x80020510)
    (data3_val=0x80020510)
    (data4_val=0x80020510)
    (data5_val=0x80020510)
    (data8_val=0x80020510)
    (data9_val=0x80020510)
    (data10_val=0x80020510)
    (data11_val=0x80020510)
target=0, binarySearch=[0, 399]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x800206f0)
    (data1_def=0x800206f0)
    (data2_def=0x800206f0)
    (data3_def=0x800206f0)
    (data4_def=0x800206f0)
    (data5_def=0x800206f0)
    (data8_def=0x800206f0)
    (data9_def=0x800206f0)
   (data10_def=0x800206f0)
    (data11_def=0x800206f0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x800206f0)
    (data1=0x800206f0)
    (data2=0x800206f0)
    (data3=0x800206f0)
    (data4=0x800206f0)
    (data5=0x800206f0)
    (data8=0x800206f0)
    (data9=0x800206f0)
    (data10=0x800206f0)
    (data11=0x800206f0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x800206f0)
    (data1_val=0x800206f0)
    (data2_val=0x800206f0)
    (data3_val=0x800206f0)
    (data4_val=0x800206f0)
    (data5_val=0x800206f0)
    (data8_val=0x800206f0)
    (data9_val=0x800206f0)
    (data10_val=0x800206f0)
    (data11_val=0x800206f0)
target=2, binarySearch=[2, 736]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x80020ab0)
    (data1_def=0x80020ab0)
    (data2_def=0x80020ab0)
    (data3_def=0x80020ab0)
    (data4_def=0x80020ab0)
    (data5_def=0x80020ab0)
    (data8_def=0x80020ab0)
    (data9_def=0x80020ab0)
   (data10_def=0x80020ab0)
    (data11_def=0x80020ab0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x80020ab0)
    (data1=0x80020ab0)
    (data2=0x80020ab0)
    (data3=0x80020ab0)
    (data4=0x80020ab0)
    (data5=0x80020ab0)
    (data8=0x80020ab0)
    (data9=0x80020ab0)
    (data10=0x80020ab0)
    (data11=0x80020ab0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x80020ab0)
    (data1_val=0x80020ab0)
    (data2_val=0x80020ab0)
    (data3_val=0x80020ab0)
    (data4_val=0x80020ab0)
    (data5_val=0x80020ab0)
    (data8_val=0x80020ab0)
    (data9_val=0x80020ab0)
    (data10_val=0x80020ab0)
    (data11_val=0x80020ab0)
target=6, binarySearch=[6, 817]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x80021230)
    (data1_def=0x80021230)
    (data2_def=0x80021230)
    (data3_def=0x80021230)
    (data4_def=0x80021230)
    (data5_def=0x80021230)
    (data8_def=0x80021230)
    (data9_def=0x80021230)
   (data10_def=0x80021230)
    (data11_def=0x80021230)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x80021230)
    (data1=0x80021230)
    (data2=0x80021230)
    (data3=0x80021230)
    (data4=0x80021230)
    (data5=0x80021230)
    (data8=0x80021230)
    (data9=0x80021230)
    (data10=0x80021230)
    (data11=0x80021230)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x80021230)
    (data1_val=0x80021230)
    (data2_val=0x80021230)
    (data3_val=0x80021230)
    (data4_val=0x80021230)
    (data5_val=0x80021230)
    (data8_val=0x80021230)
    (data9_val=0x80021230)
    (data10_val=0x80021230)
    (data11_val=0x80021230)
target=14, binarySearch=[14, 462]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x80022130)
    (data1_def=0x80022130)
    (data2_def=0x80022130)
    (data3_def=0x80022130)
    (data4_def=0x80022130)
    (data5_def=0x80022130)
    (data8_def=0x80022130)
    (data9_def=0x80022130)
   (data10_def=0x80022130)
    (data11_def=0x80022130)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x80022130)
    (data1=0x80022130)
    (data2=0x80022130)
    (data3=0x80022130)
    (data4=0x80022130)
    (data5=0x80022130)
    (data8=0x80022130)
    (data9=0x80022130)
    (data10=0x80022130)
    (data11=0x80022130)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x80022130)
    (data1_val=0x80022130)
    (data2_val=0x80022130)
    (data3_val=0x80022130)
    (data4_val=0x80022130)
    (data5_val=0x80022130)
    (data8_val=0x80022130)
    (data9_val=0x80022130)
    (data10_val=0x80022130)
    (data11_val=0x80022130)
target=30, binarySearch=[30, 723]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x80023f30)
    (data1_def=0x80023f30)
    (data2_def=0x80023f30)
    (data3_def=0x80023f30)
    (data4_def=0x80023f30)
    (data5_def=0x80023f30)
    (data8_def=0x80023f30)
    (data9_def=0x80023f30)
   (data10_def=0x80023f30)
    (data11_def=0x80023f30)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x80023f30)
    (data1=0x80023f30)
    (data2=0x80023f30)
    (data3=0x80023f30)
    (data4=0x80023f30)
    (data5=0x80023f30)
    (data8=0x80023f30)
    (data9=0x80023f30)
    (data10=0x80023f30)
    (data11=0x80023f30)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x80023f30)
    (data1_val=0x80023f30)
    (data2_val=0x80023f30)
    (data3_val=0x80023f30)
    (data4_val=0x80023f30)
    (data5_val=0x80023f30)
    (data8_val=0x80023f30)
    (data9_val=0x80023f30)
    (data10_val=0x80023f30)
    (data11_val=0x80023f30)
target=62, binarySearch=[62, 831]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x80027b30)
    (data1_def=0x80027b30)
    (data2_def=0x80027b30)
    (data3_def=0x80027b30)
    (data4_def=0x80027b30)
    (data5_def=0x80027b30)
    (data8_def=0x80027b30)
    (data9_def=0x80027b30)
   (data10_def=0x80027b30)
    (data11_def=0x80027b30)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x80027b30)
    (data1=0x80027b30)
    (data2=0x80027b30)
    (data3=0x80027b30)
    (data4=0x80027b30)
    (data5=0x80027b30)
    (data8=0x80027b30)
    (data9=0x80027b30)
    (data10=0x80027b30)
    (data11=0x80027b30)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x80027b30)
    (data1_val=0x80027b30)
    (data2_val=0x80027b30)
    (data3_val=0x80027b30)
    (data4_val=0x80027b30)
    (data5_val=0x80027b30)
    (data8_val=0x80027b30)
    (data9_val=0x80027b30)
    (data10_val=0x80027b30)
    (data11_val=0x80027b30)
target=126, binarySearch=[126, 439]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x8002f330)
    (data1_def=0x8002f330)
    (data2_def=0x8002f330)
    (data3_def=0x8002f330)
    (data4_def=0x8002f330)
    (data5_def=0x8002f330)
    (data8_def=0x8002f330)
    (data9_def=0x8002f330)
   (data10_def=0x8002f330)
    (data11_def=0x8002f330)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x8002f330)
    (data1=0x8002f330)
    (data2=0x8002f330)
    (data3=0x8002f330)
    (data4=0x8002f330)
    (data5=0x8002f330)
    (data8=0x8002f330)
    (data9=0x8002f330)
    (data10=0x8002f330)
    (data11=0x8002f330)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x8002f330)
    (data1_val=0x8002f330)
    (data2_val=0x8002f330)
    (data3_val=0x8002f330)
    (data4_val=0x8002f330)
    (data5_val=0x8002f330)
    (data8_val=0x8002f330)
    (data9_val=0x8002f330)
    (data10_val=0x8002f330)
    (data11_val=0x8002f330)
target=254, binarySearch=[254, 810]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=0.571464000 sec.
