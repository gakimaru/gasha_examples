============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=49 / record(s)=100]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=51 / record(s)=100]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=49 / record(s)=100]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=100]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=33 / record(s)=100]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=100]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=48 / record(s)=100]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000012000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000011000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000011000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000006000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000010000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000005000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000010000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.000065000 sec.
* Average time     = 0.000009286 sec.
* Min time         = 0.000005000 sec.
* Max time         = 0.000012000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000023000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000021000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000019000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000010000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000013000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000010000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000019000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.000115000 sec.
* Average time     = 0.000016429 sec.
* Min time         = 0.000010000 sec.
* Max time         = 0.000023000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000016000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000014000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000015000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000007000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000009000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000008000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000014000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.000083000 sec.
* Average time     = 0.000011857 sec.
* Min time         = 0.000007000 sec.
* Max time         = 0.000016000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000019000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000013000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000014000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000007000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000009000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000007000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000014000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.000083000 sec.
* Average time     = 0.000011857 sec.
* Min time         = 0.000007000 sec.
* Max time         = 0.000019000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000014000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000014000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000014000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000008000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000009000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000007000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000014000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.000080000 sec.
* Average time     = 0.000011429 sec.
* Min time         = 0.000007000 sec.
* Max time         = 0.000014000 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000018000 sec.
Array is ordered. [record(s)=100]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000016000 sec.
Array is ordered. [record(s)=100]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000018000 sec.
Array is ordered. [record(s)=100]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000010000 sec.
Array is ordered. [record(s)=100]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000014000 sec.
Array is ordered. [record(s)=100]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000011000 sec.
Array is ordered. [record(s)=100]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000015000 sec.
Array is ordered. [record(s)=100]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.000102000 sec.
* Average time     = 0.000014571 sec.
* Min time         = 0.000010000 sec.
* Max time         = 0.000018000 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000131000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2567 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000137000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2692 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000120000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2369 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000219000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=4851 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000029000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=195 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000155000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=3428 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 0.000791000 sec.
* Average time     = 0.000113000 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.000219000 sec.
* Total Swapped    =     16102 count(s)
* Average  Swapped =      2300 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      4851 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000120000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2567 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000125000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2692 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000151000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2369 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000203000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=4851 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000009000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=195 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000155000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=3428 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 0.000763000 sec.
* Average time     = 0.000109000 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.000203000 sec.
* Total Swapped    =     16102 count(s)
* Average  Swapped =      2300 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      4851 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.004472000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2567 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003648000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2692 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002941000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2369 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000073000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.003898000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=4851 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.003730000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=195 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.003828000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=3428 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.022590000 sec.
* Average time     = 0.003227143 sec.
* Min time         = 0.000073000 sec.
* Max time         = 0.004472000 sec.
* Total Swapped    =     16102 count(s)
* Average  Swapped =      2300 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      4851 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000370000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=1185 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000385000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=1181 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000355000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=1058 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000335000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=364 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000351000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=1171 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000365000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=397 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000375000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=1088 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.002536000 sec.
* Average time     = 0.000362286 sec.
* Min time         = 0.000335000 sec.
* Max time         = 0.000385000 sec.
* Total Swapped    =      6444 count(s)
* Average  Swapped =       920 count(s)
* Min Swapped      =       364 count(s)
* Max Swapped      =      1185 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000018000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=205 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000017000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=222 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000016000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=193 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000006000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000009000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=106 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000010000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=105 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000014000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=206 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.000090000 sec.
* Average time     = 0.000012857 sec.
* Min time         = 0.000006000 sec.
* Max time         = 0.000018000 sec.
* Total Swapped    =      1037 count(s)
* Average  Swapped =       148 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =       222 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000110000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2567 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000117000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2692 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000102000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2369 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000001000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000207000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=4851 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000009000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=195 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000150000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=3428 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 0.000696000 sec.
* Average time     = 0.000099429 sec.
* Min time         = 0.000001000 sec.
* Max time         = 0.000207000 sec.
* Total Swapped    =     16102 count(s)
* Average  Swapped =      2300 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      4851 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000018000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=177 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000017000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=186 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000017000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=184 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000007000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=33 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000008000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=83 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000005000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=34 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000017000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=196 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.000089000 sec.
* Average time     = 0.000012714 sec.
* Min time         = 0.000005000 sec.
* Max time         = 0.000018000 sec.
* Total Swapped    =       893 count(s)
* Average  Swapped =       127 count(s)
* Min Swapped      =        33 count(s)
* Max Swapped      =       196 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000026000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=94 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000026000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=91 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000026000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=96 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000018000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000025000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=83 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000019000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000026000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=95 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.000166000 sec.
* Average time     = 0.000023714 sec.
* Min time         = 0.000018000 sec.
* Max time         = 0.000026000 sec.
* Total Swapped    =       462 count(s)
* Average  Swapped =        66 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =        96 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000034000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=611 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000033000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=602 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000035000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=632 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000045000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=876 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000028000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=509 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000044000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=827 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000031000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=563 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.000250000 sec.
* Average time     = 0.000035714 sec.
* Min time         = 0.000028000 sec.
* Max time         = 0.000045000 sec.
* Total Swapped    =      4620 count(s)
* Average  Swapped =       660 count(s)
* Min Swapped      =       509 count(s)
* Max Swapped      =       876 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000047000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=93 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000049000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=93 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000047000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=88 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000001000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000084000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=99 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000007000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=99 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000060000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=95 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.000295000 sec.
* Average time     = 0.000042143 sec.
* Min time         = 0.000001000 sec.
* Max time         = 0.000084000 sec.
* Total Swapped    =       567 count(s)
* Average  Swapped =        81 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =        99 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000018000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=198 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000017000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=202 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000016000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=180 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000001000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000010000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=160 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000007000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=83 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000016000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=197 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.000085000 sec.
* Average time     = 0.000012143 sec.
* Min time         = 0.000001000 sec.
* Max time         = 0.000018000 sec.
* Total Swapped    =      1020 count(s)
* Average  Swapped =       145 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =       202 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000053000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=249 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000054000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=251 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000048000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=234 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000001000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000081000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=275 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000009000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=102 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000063000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=255 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.000309000 sec.
* Average time     = 0.000044143 sec.
* Min time         = 0.000001000 sec.
* Max time         = 0.000081000 sec.
* Total Swapped    =      1366 count(s)
* Average  Swapped =       195 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =       275 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000014000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=151 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000014000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=160 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000012000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=141 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000005000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=56 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000002000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=8 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000013000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=171 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.000060000 sec.
* Average time     = 0.000008571 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.000014000 sec.
* Total Swapped    =       687 count(s)
* Average  Swapped =        98 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =       171 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000015000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=99 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000013000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=100 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000013000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=98 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000010000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000013000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=100 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000012000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000014000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=99 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.000090000 sec.
* Average time     = 0.000012857 sec.
* Min time         = 0.000010000 sec.
* Max time         = 0.000015000 sec.
* Total Swapped    =       500 count(s)
* Average  Swapped =        71 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =       100 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 100 Count(s)
Total Array size   = 8000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.000065000/  0.000009286/  0.000005000/  0.000012000
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.000115000/  0.000016429/  0.000010000/  0.000023000
- std::sort(inline-func):   0.000083000/  0.000011857/  0.000007000/  0.000016000
- std::sort(functor):       0.000083000/  0.000011857/  0.000007000/  0.000019000
- std::sort(lambda):        0.000080000/  0.000011429/  0.000007000/  0.000014000
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.000102000/  0.000014571/  0.000010000/  0.000018000
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           0.000791000/  0.000113000/  0.000000000/  0.000219000      16102/       2300/          0/       4851
- Shaker sort<S>:           0.000763000/  0.000109000/  0.000000000/  0.000203000      16102/       2300/          0/       4851
- Odd-Even sort<S>:         0.022590000/  0.003227143/  0.000073000/  0.004472000      16102/       2300/          0/       4851
- Shear sort:               0.002536000/  0.000362286/  0.000335000/  0.000385000       6444/        920/        364/       1185
- Comb sort:                0.000090000/  0.000012857/  0.000006000/  0.000018000       1037/        148/          0/        222
- Gnome sort<S>:            0.000696000/  0.000099429/  0.000001000/  0.000207000      16102/       2300/          0/       4851
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.000089000/  0.000012714/  0.000005000/  0.000018000        893/        127/         33/        196
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.000166000/  0.000023714/  0.000018000/  0.000026000        462/         66/          0/         96
- Heap sort:                0.000250000/  0.000035714/  0.000028000/  0.000045000       4620/        660/        509/        876
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.000295000/  0.000042143/  0.000001000/  0.000084000        567/         81/          0/         99
- Shell sort:               0.000085000/  0.000012143/  0.000001000/  0.000018000       1020/        145/          0/        202
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.000309000/  0.000044143/  0.000001000/  0.000081000       1366/        195/          0/        275
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.000060000/  0.000008571/  0.000000000/  0.000014000        687/         98/          0/        171
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.000090000/  0.000012857/  0.000010000/  0.000015000        500/         71/          0/        100
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=151)
(result1=151)
(result3=151)
(result4=151)
(result5=151)
(result6=151)
(result8=151)
(result9=151)
(result10=151)
(result11=141)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x0)
    (data1_def=0x0)
    (data2_def=0x0)
    (data3_def=0x0)
    (data4_def=0x0)
    (data5_def=0x0)
    (data8_def=0x0)
    (data9_def=0x0)
    (data10_def=0x0)
    (data11_def=0x0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x0)
    (data1=0x0)
    (data2=0x0)
    (data3=0x0)
    (data4=0x0)
    (data5=0x0)
    (data8=0x0)
    (data9=0x0)
    (data10=0x0)
    (data11=0x0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x0)
    (data1_val=0x0)
    (data2_val=0x0)
    (data3_val=0x0)
    (data4_val=0x0)
    (data5_val=0x0)
    (data8_val=0x0)
    (data9_val=0x0)
    (data10_val=0x0)
    (data11_val=0x0)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x80020bf0)
    (data1_def=0x80020bf0)
    (data2_def=0x80020bf0)
    (data3_def=0x80020bf0)
    (data4_def=0x80020bf0)
    (data5_def=0x80020bf0)
    (data8_def=0x80020bf0)
    (data9_def=0x80020bf0)
    (data10_def=0x80020bf0)
    (data11_def=0x80020bf0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x80020bf0)
    (data1=0x80020bf0)
    (data2=0x80020bf0)
    (data3=0x80020bf0)
    (data4=0x80020bf0)
    (data5=0x80020bf0)
    (data8=0x80020bf0)
    (data9=0x80020bf0)
    (data10=0x80020bf0)
    (data11=0x80020bf0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x80020bf0)
    (data1_val=0x80020bf0)
    (data2_val=0x80020bf0)
    (data3_val=0x80020bf0)
    (data4_val=0x80020bf0)
    (data5_val=0x80020bf0)
    (data8_val=0x80020bf0)
    (data9_val=0x80020bf0)
    (data10_val=0x80020bf0)
    (data11_val=0x80020bf0)
target=0, linearSearch=[0, 22]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x80021230)
    (data1_def=0x80021230)
    (data2_def=0x80021230)
    (data3_def=0x80021230)
    (data4_def=0x80021230)
    (data5_def=0x80021230)
    (data8_def=0x80021230)
    (data9_def=0x80021230)
    (data10_def=0x80021230)
    (data11_def=0x80021230)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x80021230)
    (data1=0x80021230)
    (data2=0x80021230)
    (data3=0x80021230)
    (data4=0x80021230)
    (data5=0x80021230)
    (data8=0x80021230)
    (data9=0x80021230)
    (data10=0x80021230)
    (data11=0x80021230)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x80021230)
    (data1_val=0x80021230)
    (data2_val=0x80021230)
    (data3_val=0x80021230)
    (data4_val=0x80021230)
    (data5_val=0x80021230)
    (data8_val=0x80021230)
    (data9_val=0x80021230)
    (data10_val=0x80021230)
    (data11_val=0x80021230)
target=2, linearSearch=[2, 42]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x80020d30)
    (data1_def=0x80020d30)
    (data2_def=0x80020d30)
    (data3_def=0x80020d30)
    (data4_def=0x80020d30)
    (data5_def=0x80020d30)
    (data8_def=0x80020d30)
    (data9_def=0x80020d30)
    (data10_def=0x80020d30)
    (data11_def=0x80020d30)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x80020d30)
    (data1=0x80020d30)
    (data2=0x80020d30)
    (data3=0x80020d30)
    (data4=0x80020d30)
    (data5=0x80020d30)
    (data8=0x80020d30)
    (data9=0x80020d30)
    (data10=0x80020d30)
    (data11=0x80020d30)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x80020d30)
    (data1_val=0x80020d30)
    (data2_val=0x80020d30)
    (data3_val=0x80020d30)
    (data4_val=0x80020d30)
    (data5_val=0x80020d30)
    (data8_val=0x80020d30)
    (data9_val=0x80020d30)
    (data10_val=0x80020d30)
    (data11_val=0x80020d30)
target=6, linearSearch=[6, 26]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x80020b50)
    (data1_def=0x80020b50)
    (data2_def=0x80020b50)
    (data3_def=0x80020b50)
    (data4_def=0x80020b50)
    (data5_def=0x80020b50)
    (data8_def=0x80020b50)
    (data9_def=0x80020b50)
    (data10_def=0x80020b50)
    (data11_def=0x80020b50)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x80020b50)
    (data1=0x80020b50)
    (data2=0x80020b50)
    (data3=0x80020b50)
    (data4=0x80020b50)
    (data5=0x80020b50)
    (data8=0x80020b50)
    (data9=0x80020b50)
    (data10=0x80020b50)
    (data11=0x80020b50)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x80020b50)
    (data1_val=0x80020b50)
    (data2_val=0x80020b50)
    (data3_val=0x80020b50)
    (data4_val=0x80020b50)
    (data5_val=0x80020b50)
    (data8_val=0x80020b50)
    (data9_val=0x80020b50)
    (data10_val=0x80020b50)
    (data11_val=0x80020b50)
target=14, linearSearch=[14, 20]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x800209c0)
    (data1_def=0x800209c0)
    (data2_def=0x800209c0)
    (data3_def=0x800209c0)
    (data4_def=0x800209c0)
    (data5_def=0x800209c0)
    (data8_def=0x800209c0)
    (data9_def=0x800209c0)
    (data10_def=0x800209c0)
    (data11_def=0x800209c0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x800209c0)
    (data1=0x800209c0)
    (data2=0x800209c0)
    (data3=0x800209c0)
    (data4=0x800209c0)
    (data5=0x800209c0)
    (data8=0x800209c0)
    (data9=0x800209c0)
    (data10=0x800209c0)
    (data11=0x800209c0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x800209c0)
    (data1_val=0x800209c0)
    (data2_val=0x800209c0)
    (data3_val=0x800209c0)
    (data4_val=0x800209c0)
    (data5_val=0x800209c0)
    (data8_val=0x800209c0)
    (data9_val=0x800209c0)
    (data10_val=0x800209c0)
    (data11_val=0x800209c0)
target=30, linearSearch=[30, 15]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x0)
    (data1_def=0x0)
    (data2_def=0x0)
    (data3_def=0x0)
    (data4_def=0x0)
    (data5_def=0x0)
    (data8_def=0x0)
    (data9_def=0x0)
    (data10_def=0x0)
    (data11_def=0x0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x0)
    (data1=0x0)
    (data2=0x0)
    (data3=0x0)
    (data4=0x0)
    (data5=0x0)
    (data8=0x0)
    (data9=0x0)
    (data10=0x0)
    (data11=0x0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x0)
    (data1_val=0x0)
    (data2_val=0x0)
    (data3_val=0x0)
    (data4_val=0x0)
    (data5_val=0x0)
    (data8_val=0x0)
    (data9_val=0x0)
    (data10_val=0x0)
    (data11_val=0x0)
target=62, linearSearch=nullptr
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x0)
    (data1_def=0x0)
    (data2_def=0x0)
    (data3_def=0x0)
    (data4_def=0x0)
    (data5_def=0x0)
    (data8_def=0x0)
    (data9_def=0x0)
    (data10_def=0x0)
    (data11_def=0x0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x0)
    (data1=0x0)
    (data2=0x0)
    (data3=0x0)
    (data4=0x0)
    (data5=0x0)
    (data8=0x0)
    (data9=0x0)
    (data10=0x0)
    (data11=0x0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x0)
    (data1_val=0x0)
    (data2_val=0x0)
    (data3_val=0x0)
    (data4_val=0x0)
    (data5_val=0x0)
    (data8_val=0x0)
    (data9_val=0x0)
    (data10_val=0x0)
    (data11_val=0x0)
target=126, linearSearch=nullptr
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=0x0)
    (data1_def=0x0)
    (data2_def=0x0)
    (data3_def=0x0)
    (data4_def=0x0)
    (data5_def=0x0)
    (data8_def=0x0)
    (data9_def=0x0)
    (data10_def=0x0)
    (data11_def=0x0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0x0)
    (data1=0x0)
    (data2=0x0)
    (data3=0x0)
    (data4=0x0)
    (data5=0x0)
    (data8=0x0)
    (data9=0x0)
    (data10=0x0)
    (data11=0x0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0x0)
    (data1_val=0x0)
    (data2_val=0x0)
    (data3_val=0x0)
    (data4_val=0x0)
    (data5_val=0x0)
    (data8_val=0x0)
    (data9_val=0x0)
    (data10_val=0x0)
    (data11_val=0x0)
target=254, linearSearch=nullptr

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x0)
    (data1_def=0x0)
    (data2_def=0x0)
    (data3_def=0x0)
    (data4_def=0x0)
    (data5_def=0x0)
    (data8_def=0x0)
    (data9_def=0x0)
   (data10_def=0x0)
    (data11_def=0x0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x0)
    (data1=0x0)
    (data2=0x0)
    (data3=0x0)
    (data4=0x0)
    (data5=0x0)
    (data8=0x0)
    (data9=0x0)
    (data10=0x0)
    (data11=0x0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x0)
    (data1_val=0x0)
    (data2_val=0x0)
    (data3_val=0x0)
    (data4_val=0x0)
    (data5_val=0x0)
    (data8_val=0x0)
    (data9_val=0x0)
    (data10_val=0x0)
    (data11_val=0x0)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x80020510)
    (data1_def=0x80020510)
    (data2_def=0x80020510)
    (data3_def=0x80020510)
    (data4_def=0x80020510)
    (data5_def=0x80020510)
    (data8_def=0x80020510)
    (data9_def=0x80020510)
   (data10_def=0x80020510)
    (data11_def=0x80020510)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x80020510)
    (data1=0x80020510)
    (data2=0x80020510)
    (data3=0x80020510)
    (data4=0x80020510)
    (data5=0x80020510)
    (data8=0x80020510)
    (data9=0x80020510)
    (data10=0x80020510)
    (data11=0x80020510)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x80020510)
    (data1_val=0x80020510)
    (data2_val=0x80020510)
    (data3_val=0x80020510)
    (data4_val=0x80020510)
    (data5_val=0x80020510)
    (data8_val=0x80020510)
    (data9_val=0x80020510)
    (data10_val=0x80020510)
    (data11_val=0x80020510)
target=0, binarySearch=[0, 91]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x800206f0)
    (data1_def=0x800206f0)
    (data2_def=0x800206f0)
    (data3_def=0x800206f0)
    (data4_def=0x800206f0)
    (data5_def=0x800206f0)
    (data8_def=0x800206f0)
    (data9_def=0x800206f0)
   (data10_def=0x800206f0)
    (data11_def=0x800206f0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x800206f0)
    (data1=0x800206f0)
    (data2=0x800206f0)
    (data3=0x800206f0)
    (data4=0x800206f0)
    (data5=0x800206f0)
    (data8=0x800206f0)
    (data9=0x800206f0)
    (data10=0x800206f0)
    (data11=0x800206f0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x800206f0)
    (data1_val=0x800206f0)
    (data2_val=0x800206f0)
    (data3_val=0x800206f0)
    (data4_val=0x800206f0)
    (data5_val=0x800206f0)
    (data8_val=0x800206f0)
    (data9_val=0x800206f0)
    (data10_val=0x800206f0)
    (data11_val=0x800206f0)
target=2, binarySearch=[2, 68]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x80020ab0)
    (data1_def=0x80020ab0)
    (data2_def=0x80020ab0)
    (data3_def=0x80020ab0)
    (data4_def=0x80020ab0)
    (data5_def=0x80020ab0)
    (data8_def=0x80020ab0)
    (data9_def=0x80020ab0)
   (data10_def=0x80020ab0)
    (data11_def=0x80020ab0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x80020ab0)
    (data1=0x80020ab0)
    (data2=0x80020ab0)
    (data3=0x80020ab0)
    (data4=0x80020ab0)
    (data5=0x80020ab0)
    (data8=0x80020ab0)
    (data9=0x80020ab0)
    (data10=0x80020ab0)
    (data11=0x80020ab0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x80020ab0)
    (data1_val=0x80020ab0)
    (data2_val=0x80020ab0)
    (data3_val=0x80020ab0)
    (data4_val=0x80020ab0)
    (data5_val=0x80020ab0)
    (data8_val=0x80020ab0)
    (data9_val=0x80020ab0)
    (data10_val=0x80020ab0)
    (data11_val=0x80020ab0)
target=6, binarySearch=[6, 67]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x80021230)
    (data1_def=0x80021230)
    (data2_def=0x80021230)
    (data3_def=0x80021230)
    (data4_def=0x80021230)
    (data5_def=0x80021230)
    (data8_def=0x80021230)
    (data9_def=0x80021230)
   (data10_def=0x80021230)
    (data11_def=0x80021230)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x80021230)
    (data1=0x80021230)
    (data2=0x80021230)
    (data3=0x80021230)
    (data4=0x80021230)
    (data5=0x80021230)
    (data8=0x80021230)
    (data9=0x80021230)
    (data10=0x80021230)
    (data11=0x80021230)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x80021230)
    (data1_val=0x80021230)
    (data2_val=0x80021230)
    (data3_val=0x80021230)
    (data4_val=0x80021230)
    (data5_val=0x80021230)
    (data8_val=0x80021230)
    (data9_val=0x80021230)
    (data10_val=0x80021230)
    (data11_val=0x80021230)
target=14, binarySearch=[14, 82]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x80022130)
    (data1_def=0x80022130)
    (data2_def=0x80022130)
    (data3_def=0x80022130)
    (data4_def=0x80022130)
    (data5_def=0x80022130)
    (data8_def=0x80022130)
    (data9_def=0x80022130)
   (data10_def=0x80022130)
    (data11_def=0x80022130)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x80022130)
    (data1=0x80022130)
    (data2=0x80022130)
    (data3=0x80022130)
    (data4=0x80022130)
    (data5=0x80022130)
    (data8=0x80022130)
    (data9=0x80022130)
    (data10=0x80022130)
    (data11=0x80022130)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x80022130)
    (data1_val=0x80022130)
    (data2_val=0x80022130)
    (data3_val=0x80022130)
    (data4_val=0x80022130)
    (data5_val=0x80022130)
    (data8_val=0x80022130)
    (data9_val=0x80022130)
    (data10_val=0x80022130)
    (data11_val=0x80022130)
target=30, binarySearch=[30, 59]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x0)
    (data1_def=0x0)
    (data2_def=0x0)
    (data3_def=0x0)
    (data4_def=0x0)
    (data5_def=0x0)
    (data8_def=0x0)
    (data9_def=0x0)
   (data10_def=0x0)
    (data11_def=0x0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x0)
    (data1=0x0)
    (data2=0x0)
    (data3=0x0)
    (data4=0x0)
    (data5=0x0)
    (data8=0x0)
    (data9=0x0)
    (data10=0x0)
    (data11=0x0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x0)
    (data1_val=0x0)
    (data2_val=0x0)
    (data3_val=0x0)
    (data4_val=0x0)
    (data5_val=0x0)
    (data8_val=0x0)
    (data9_val=0x0)
    (data10_val=0x0)
    (data11_val=0x0)
target=62, binarySearch=nullptr
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x0)
    (data1_def=0x0)
    (data2_def=0x0)
    (data3_def=0x0)
    (data4_def=0x0)
    (data5_def=0x0)
    (data8_def=0x0)
    (data9_def=0x0)
   (data10_def=0x0)
    (data11_def=0x0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x0)
    (data1=0x0)
    (data2=0x0)
    (data3=0x0)
    (data4=0x0)
    (data5=0x0)
    (data8=0x0)
    (data9=0x0)
    (data10=0x0)
    (data11=0x0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x0)
    (data1_val=0x0)
    (data2_val=0x0)
    (data3_val=0x0)
    (data4_val=0x0)
    (data5_val=0x0)
    (data8_val=0x0)
    (data9_val=0x0)
    (data10_val=0x0)
    (data11_val=0x0)
target=126, binarySearch=nullptr
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=0x0)
    (data1_def=0x0)
    (data2_def=0x0)
    (data3_def=0x0)
    (data4_def=0x0)
    (data5_def=0x0)
    (data8_def=0x0)
    (data9_def=0x0)
   (data10_def=0x0)
    (data11_def=0x0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0x0)
    (data1=0x0)
    (data2=0x0)
    (data3=0x0)
    (data4=0x0)
    (data5=0x0)
    (data8=0x0)
    (data9=0x0)
    (data10=0x0)
    (data11=0x0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0x0)
    (data1_val=0x0)
    (data2_val=0x0)
    (data3_val=0x0)
    (data4_val=0x0)
    (data5_val=0x0)
    (data8_val=0x0)
    (data9_val=0x0)
    (data10_val=0x0)
    (data11_val=0x0)
target=254, binarySearch=nullptr
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=0.033014000 sec.
