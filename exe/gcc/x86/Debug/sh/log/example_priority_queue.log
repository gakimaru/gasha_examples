--------------------------------------------------------------------------------
[Test for priority_queue::containerAdapter(Priority Queue)]

--- Enqueue ---
[3: 0(seq=0)]
[3: 1(seq=1)]
[3: 2(seq=2)]
[4: 3(seq=3)]
[5: 4(seq=4)]
[4: 5(seq=5)]
[5: 6(seq=6)]
[3: 7(seq=7)]
[5: 8(seq=8)]
[3: 9(seq=9)]
[4:10(seq=10)]
[4:11(seq=11)]
[2:12(seq=12)]
[3:13(seq=13)]
[2:14(seq=14)]
[5:15(seq=15)]
[1:16(seq=16)]
[5:17(seq=17)]
[2:18(seq=18)]
[2:19(seq=19)]
*elapsed_time=0.000104000 sec

--- Show tree (count=20) ---
depth_max=4 (limit for showing=4)
                      .----------------------{1:16}----------------------.                      
          .----------{2:19}----------.                    .----------{2:12}----------.          
    .----{2:14}----.        .----{2:18}----.        .----{3: 1}----.        .----{3:13}----.    
 .-{3: 0}-.  .-{3: 7}-.  .-{3: 2]      [4:10]      [4: 5]      [4:11]      [5: 6]      [3: 9]   
[5:15][4: 3][5: 8][5:17][5: 4]                                                                  

--- Dequeue ---
[1:16] [2:19] [2:18] 
*elapsed_time=0.000007000 sec

--- Show tree (count=17) ---
depth_max=4 (limit for showing=4)
                      .----------------------{2:14}----------------------.                      
          .----------{3: 7}----------.                    .----------{2:12}----------.          
    .----{3: 0}----.        .----{3: 2}----.        .----{3: 1}----.        .----{3:13}----.    
 .-{4: 3}-.    [5:17]      [5: 4]      [4:10]      [4: 5]      [4:11]      [5: 6]      [3: 9]   
[5:15][5: 8]                                                                                    

--- Change Priority ---
[2:14(seq=14)] -> [5:14(seq=20)]
*elapsed_time=0.000003000 sec

--- Change Priority ---
[2:12(seq=12)] -> [2:12(seq=21)]
*elapsed_time=0.000006000 sec

--- Change Priority ---
[2:12(seq=21)] -> [4:12(seq=22)]
*elapsed_time=0.000007000 sec

--- Show tree (count=17) ---
depth_max=4 (limit for showing=4)
                      .----------------------{3:13}----------------------.                      
          .----------{3: 7}----------.                    .----------{3: 9}----------.          
    .----{3: 0}----.        .----{3: 2}----.        .----{3: 1}----.        .----{4:12}----.    
 .-{4: 3}-.    [5:17]      [5: 4]      [4:10]      [4: 5]      [4:11]      [5: 6]      [5:14]   
[5:15][5: 8]                                                                                    

--- Dequeue ---
[3:13] [3: 9] [3: 7] [3: 2] [3: 1] [3: 0] [4:12] [4:11] [4:10] [4: 5] 
*elapsed_time=0.000008000 sec

--- Show tree (count=7) ---
depth_max=2 (limit for showing=4)
    .----{4: 3}----.    
 .-{5:14}-.  .-{5:17}-. 
[5: 4][5:15][5: 8][5: 6]

--- Dequeue ---
[4: 3] [5:14] [5:17] [5:15] [5: 8] [5: 6] [5: 4] 
*elapsed_time=0.000005000 sec

--- Show tree (count=0) ---
depth_max=-1 (limit for showing=4)

--------------------------------------------------------------------------------
[Test for priority_queue::containerAdapter(Priority Queue)] *Clear

--- Enqueue ---
[3: 0(seq=0)]
[3: 1(seq=1)]
[3: 2(seq=2)]
[4: 3(seq=3)]
[5: 4(seq=4)]
[4: 5(seq=5)]
[5: 6(seq=6)]
[3: 7(seq=7)]
[5: 8(seq=8)]
[3: 9(seq=9)]
[4:10(seq=10)]
[4:11(seq=11)]
[2:12(seq=12)]
[3:13(seq=13)]
[2:14(seq=14)]
[5:15(seq=15)]
[1:16(seq=16)]
[5:17(seq=17)]
[2:18(seq=18)]
[2:19(seq=19)]
*elapsed_time=0.000037000 sec

--- Show tree (count=20) ---
depth_max=4 (limit for showing=4)
                      .----------------------{1:16}----------------------.                      
          .----------{2:19}----------.                    .----------{2:12}----------.          
    .----{2:14}----.        .----{2:18}----.        .----{3: 1}----.        .----{3:13}----.    
 .-{3: 0}-.  .-{3: 7}-.  .-{3: 2]      [4:10]      [4: 5]      [4:11]      [5: 6]      [3: 9]   
[5:15][4: 3][5: 8][5:17][5: 4]                                                                  

--- Clear ---
OK
*elapsed_time=0.000001000 sec

--- Show tree (count=0) ---
depth_max=-1 (limit for showing=4)

--------------------------------------------------------------------------------
[Test for priority_queue::containerAdapter(Priority Queue)] *Pointer

pop: [1: 5](seq=4)
pop: [2: 3](seq=2)
pop: [3: 1](seq=0)
pop: [4: 2](seq=1)
pop: [5: 4](seq=3)

--------------------------------------------------------------------------------
[Test for priority_queue::containerAdapter(Priority Queue)] *Second time

--- Enqueue ---
[3: 0(seq=0)]
[3: 1(seq=1)]
[3: 2(seq=2)]
[4: 3(seq=3)]
[5: 4(seq=4)]
[4: 5(seq=5)]
[5: 6(seq=6)]
[3: 7(seq=7)]
[5: 8(seq=8)]
[3: 9(seq=9)]
[4:10(seq=10)]
[4:11(seq=11)]
[2:12(seq=12)]
[3:13(seq=13)]
[2:14(seq=14)]
[5:15(seq=15)]
[1:16(seq=16)]
[5:17(seq=17)]
[2:18(seq=18)]
[2:19(seq=19)]
*elapsed_time=0.000054000 sec

--- Show tree (count=20) ---
depth_max=4 (limit for showing=4)
                      .----------------------{1:16}----------------------.                      
          .----------{2:19}----------.                    .----------{2:12}----------.          
    .----{2:14}----.        .----{2:18}----.        .----{3: 1}----.        .----{3:13}----.    
 .-{3: 0}-.  .-{3: 7}-.  .-{3: 2]      [4:10]      [4: 5]      [4:11]      [5: 6]      [3: 9]   
[5:15][4: 3][5: 8][5:17][5: 4]                                                                  

--- Dequeue ---
[1:16] [2:19] [2:18] [2:14] [2:12] [3:13] [3: 9] [3: 7] [3: 2] [3: 1] 
*elapsed_time=0.000010000 sec

--- Show tree (count=10) ---
depth_max=3 (limit for showing=4)
          .----------{3: 0}----------.          
    .----{4:10}----.        .----{4:11}----.    
 .-{4: 3}-.  .-{5: 6]      [4: 5]      [5:15]   
[5: 8][5:17][5: 4]                              

--- Dequeue ---
[3: 0] [4:11] [4:10] [4: 5] [4: 3] [5:17] [5:15] [5: 8] [5: 6] [5: 4] 
*elapsed_time=0.000007000 sec

--- Show tree (count=0) ---
depth_max=-1 (limit for showing=4)

--- end ---
*elapsed_time=0.000887000 sec

--------------------------------------------------------------------------------
[Test for binary_heap::container(Binary Heap)]

--- Push nodes(Binary Heap) ---
[3: 0]
[3: 1]
[3: 2]
[4: 3]
[5: 4]
[4: 5]
[5: 6]
[3: 7]
[5: 8]
[3: 9]
[4:10]
[4:11]
[2:12]
[3:13]
[2:14]
[5:15]
[1:16]
[5:17]
[2:18]
[2:19]
*elapsed_time=0.000034000 sec

--- Show tree (count=20) ---
depth_max=4 (limit for showing=4)
                      .----------------------{5: 4}----------------------.                      
          .----------{5: 8}----------.                    .----------{5: 6}----------.          
    .----{5:15}----.        .----{4:10}----.        .----{4:11}----.        .----{4: 5}----.    
 .-{4: 3}-.  .-{5:17}-.  .-{3: 9]      [3: 0]      [3: 2]      [2:12]      [3:13]      [2:14]   
[3: 7][1:16][3: 1][2:18][2:19]                                                                  

--- Pop nodes(Binary Heap) ---
[5: 4] [5: 6] [5: 8] [5:15] [5:17] [4: 5] [4:11] [4:10] [4: 3] [3:13] 
*elapsed_time=0.000008000 sec

--- Show tree (count=10) ---
depth_max=3 (limit for showing=4)
          .----------{3: 2}----------.          
    .----{3: 0}----.        .----{2:19}----.    
 .-{3: 1}-.  .-{3: 9]      [2:18]      [1:16]   
[3: 7][2:14][2:12]                              

--- Pop nodes(Binary Heap) ---
[3: 2] [3: 0] [3: 9] [3: 1] [3: 7] [2:19] [2:18] [2:12] [2:14] [1:16] 
*elapsed_time=0.000006000 sec

--- Show tree (count=0) ---
depth_max=-1 (limit for showing=4)

--------------------------------------------------------------------------------
[Test for std::priority_queue(STL)]

--- Push nodes(STL) ---
[3: 0]
[3: 1]
[3: 2]
[4: 3]
[5: 4]
[4: 5]
[5: 6]
[3: 7]
[5: 8]
[3: 9]
[4:10]
[4:11]
[2:12]
[3:13]
[2:14]
[5:15]
[1:16]
[5:17]
[2:18]
[2:19]
*elapsed_time=0.000040000 sec

--- Pop nodes(STL) ---
[5: 4] [5: 6] [5: 8] [5:15] [5:17] [4: 5] [4:11] [4:10] [4: 3] [3:13] 
*elapsed_time=0.000013000 sec

--- Pop nodes(STL) ---
[3: 2] [3: 0] [3: 9] [3: 1] [3: 7] [2:19] [2:18] [2:12] [2:14] [1:16] 
*elapsed_time=0.000011000 sec

--- end ---
*elapsed_time=0.000276000 sec

--- example_simple_priority_queue ---
data = 0 0 0
data = {1, {0,2}} {3, {0,0}} {5, {0,0}}

--- example_simple_binary_heap ---
data = 5 3 1
data = {5,6} {3,4} {1,2}
