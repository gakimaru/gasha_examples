============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=4951 / record(s)=10000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=5002 / record(s)=10000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=4984 / record(s)=10000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=10000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=3333 / record(s)=10000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=10000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=4976 / record(s)=10000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003003200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.011011500 sec.
* Average time     = 0.001573071 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.003003200 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.004003200 sec.
* Average time     = 0.000571886 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001700 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.004003800 sec.
* Average time     = 0.000571971 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.005004400 sec.
* Average time     = 0.000714914 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001400 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.003002900 sec.
* Average time     = 0.000428986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000997000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.006002600 sec.
* Average time     = 0.000857514 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.235223800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.247234300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.232220900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.259246700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.063059800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.239227900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 1.276213400 sec.
* Average time     = 0.182316200 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.259246700 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.183176000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.180172700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.173162500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.242230500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.223212600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 1.001954300 sec.
* Average time     = 0.143136329 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.242230500 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.128122300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.127120900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.123117300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.183174200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.058055500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.154146900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.773737100 sec.
* Average time     = 0.110533871 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.183174200 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.005004700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1922616 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.005004400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1902755 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.006005600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1895908 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=494802 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.003002300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1474414 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=514605 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.005004100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1903279 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.026022600 sec.
* Average time     = 0.003717514 sec.
* Min time         = 0.001000600 sec.
* Max time         = 0.006005600 sec.
* Total Swapped    =  10108379 count(s)
* Average  Swapped =   1444054 count(s)
* Min Swapped      =    494802 count(s)
* Max Swapped      =   1922616 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57500 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57587 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57584 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=18345 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=7303 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=58823 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.009008000 sec.
* Average time     = 0.001286857 sec.
* Min time         = 0.001000300 sec.
* Max time         = 0.002002100 sec.
* Total Swapped    =    257142 count(s)
* Average  Swapped =     36734 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     58823 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.156149000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.124119600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.119113500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.249237600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.186177100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 0.834796800 sec.
* Average time     = 0.119256686 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.249237600 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33719 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33677 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33444 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=36402 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.003003000 sec.
* Average time     = 0.000429000 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =    152242 count(s)
* Average  Swapped =     21748 count(s)
* Min Swapped      =      3333 count(s)
* Max Swapped      =     36402 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.121114700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.122117600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9995 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.122116100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.124117100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.122117900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.123117900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.122116400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9989 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.856817700 sec.
* Average time     = 0.122402529 sec.
* Min time         = 0.121114700 sec.
* Max time         = 0.124117100 sec.
* Total Swapped    =     48300 count(s)
* Average  Swapped =      6900 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129635 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002001500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129583 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002002000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129778 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=218680 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.002002000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=116627 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=213143 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002001400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=123006 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.014012600 sec.
* Average time     = 0.002001800 sec.
* Min time         = 0.002001400 sec.
* Max time         = 0.002002100 sec.
* Total Swapped    =   1060452 count(s)
* Average  Swapped =    151493 count(s)
* Min Swapped      =    116627 count(s)
* Max Swapped      =    218680 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.115110000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9985 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.114108500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9987 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.113107900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9983 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.249235500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.188178900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9994 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.779740800 sec.
* Average time     = 0.111391543 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.249235500 sec.
* Total Swapped    =     59947 count(s)
* Average  Swapped =      8563 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48473 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48925 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48799 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=37222 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=5156 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49469 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.004004600 sec.
* Average time     = 0.000572086 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001500 sec.
* Total Swapped    =    238044 count(s)
* Average  Swapped =     34006 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     49469 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.072068400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58291 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.071067500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58193 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.071067400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58188 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.156148700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=60442 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.116110200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58404 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.486462200 sec.
* Average time     = 0.069494600 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.156148700 sec.
* Total Swapped    =    303524 count(s)
* Average  Swapped =     43360 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     60442 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31152 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31250 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31256 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=6022 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1024 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33844 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.001001200 sec.
* Average time     = 0.000143029 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =    134548 count(s)
* Average  Swapped =     19221 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     33844 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9996 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9998 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.002001500 sec.
* Average time     = 0.000285929 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000900 sec.
* Total Swapped    =     49997 count(s)
* Average  Swapped =      7142 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     10000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 10000 Count(s)
Total Array size   = 800000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.011011500/  0.001573071/  0.000000000/  0.003003200
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.004003200/  0.000571886/  0.000000000/  0.001001700
- std::sort(inline-func):   0.004003800/  0.000571971/  0.000000000/  0.001001200
- std::sort(functor):       0.005004400/  0.000714914/  0.000000000/  0.001001400
- std::sort(lambda):        0.003002900/  0.000428986/  0.000000000/  0.001001200
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.006002600/  0.000857514/  0.000000000/  0.001001200
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           1.276213400/  0.182316200/  0.000000000/  0.259246700  162016591/   23145227/          0/   49985001
- Shaker sort<S>:           1.001954300/  0.143136329/  0.000000000/  0.242230500  162016591/   23145227/          0/   49985001
- Odd-Even sort<S>:         0.773737100/  0.110533871/  0.000000000/  0.183174200  162016591/   23145227/          0/   49985001
- Shear sort:               0.026022600/  0.003717514/  0.001000600/  0.006005600   10108379/    1444054/     494802/    1922616
- Comb sort:                0.009008000/  0.001286857/  0.001000300/  0.002002100     257142/      36734/          0/      58823
- Gnome sort<S>:            0.834796800/  0.119256686/  0.000000000/  0.249237600  162016591/   23145227/          0/   49985001
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.003003000/  0.000429000/  0.000000000/  0.001001200     152242/      21748/       3333/      36402
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.856817700/  0.122402529/  0.121114700/  0.124117100      48300/       6900/          0/       9995
- Heap sort:                0.014012600/  0.002001800/  0.002001400/  0.002002100    1060452/     151493/     116627/     218680
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.779740800/  0.111391543/  0.000000000/  0.249235500      59947/       8563/          0/       9999
- Shell sort:               0.004004600/  0.000572086/  0.000000000/  0.001001500     238044/      34006/          0/      49469
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.486462200/  0.069494600/  0.000000000/  0.156148700     303524/      43360/          0/      60442
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.001001200/  0.000143029/  0.000000000/  0.001001200     134548/      19221/          0/      33844
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.002001500/  0.000285929/  0.000000000/  0.001000900      49997/       7142/          0/      10000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=31152)
(result1=31152)
(result3=31152)
(result4=31152)
(result5=31152)
(result6=31152)
(result8=31152)
(result9=31152)
(result10=31152)
(result11=31095)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=0000000000000000)
    (data1_def=0000000000000000)
    (data2_def=0000000000000000)
    (data3_def=0000000000000000)
    (data4_def=0000000000000000)
    (data5_def=0000000000000000)
    (data8_def=0000000000000000)
    (data9_def=0000000000000000)
    (data10_def=0000000000000000)
    (data11_def=0000000000000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0000000000000000)
    (data1=0000000000000000)
    (data2=0000000000000000)
    (data3=0000000000000000)
    (data4=0000000000000000)
    (data5=0000000000000000)
    (data8=0000000000000000)
    (data9=0000000000000000)
    (data10=0000000000000000)
    (data11=0000000000000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0000000000000000)
    (data1_val=0000000000000000)
    (data2_val=0000000000000000)
    (data3_val=0000000000000000)
    (data4_val=0000000000000000)
    (data5_val=0000000000000000)
    (data8_val=0000000000000000)
    (data9_val=0000000000000000)
    (data10_val=0000000000000000)
    (data11_val=0000000000000000)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=000000822749C2D0)
    (data1_def=000000822749C2D0)
    (data2_def=000000822749C2D0)
    (data3_def=000000822749C2D0)
    (data4_def=000000822749C2D0)
    (data5_def=000000822749C2D0)
    (data8_def=000000822749C2D0)
    (data9_def=000000822749C2D0)
    (data10_def=000000822749C2D0)
    (data11_def=000000822749C2D0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=000000822749C2D0)
    (data1=000000822749C2D0)
    (data2=000000822749C2D0)
    (data3=000000822749C2D0)
    (data4=000000822749C2D0)
    (data5=000000822749C2D0)
    (data8=000000822749C2D0)
    (data9=000000822749C2D0)
    (data10=000000822749C2D0)
    (data11=000000822749C2D0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=000000822749C2D0)
    (data1_val=000000822749C2D0)
    (data2_val=000000822749C2D0)
    (data3_val=000000822749C2D0)
    (data4_val=000000822749C2D0)
    (data5_val=000000822749C2D0)
    (data8_val=000000822749C2D0)
    (data9_val=000000822749C2D0)
    (data10_val=000000822749C2D0)
    (data11_val=000000822749C2D0)
target=0, linearSearch=[0, 2342]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=0000008227479AA0)
    (data1_def=0000008227479AA0)
    (data2_def=0000008227479AA0)
    (data3_def=0000008227479AA0)
    (data4_def=0000008227479AA0)
    (data5_def=0000008227479AA0)
    (data8_def=0000008227479AA0)
    (data9_def=0000008227479AA0)
    (data10_def=0000008227479AA0)
    (data11_def=0000008227479AA0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0000008227479AA0)
    (data1=0000008227479AA0)
    (data2=0000008227479AA0)
    (data3=0000008227479AA0)
    (data4=0000008227479AA0)
    (data5=0000008227479AA0)
    (data8=0000008227479AA0)
    (data9=0000008227479AA0)
    (data10=0000008227479AA0)
    (data11=0000008227479AA0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0000008227479AA0)
    (data1_val=0000008227479AA0)
    (data2_val=0000008227479AA0)
    (data3_val=0000008227479AA0)
    (data4_val=0000008227479AA0)
    (data5_val=0000008227479AA0)
    (data8_val=0000008227479AA0)
    (data9_val=0000008227479AA0)
    (data10_val=0000008227479AA0)
    (data11_val=0000008227479AA0)
target=2, linearSearch=[2, 575]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=0000008227482510)
    (data1_def=0000008227482510)
    (data2_def=0000008227482510)
    (data3_def=0000008227482510)
    (data4_def=0000008227482510)
    (data5_def=0000008227482510)
    (data8_def=0000008227482510)
    (data9_def=0000008227482510)
    (data10_def=0000008227482510)
    (data11_def=0000008227482510)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0000008227482510)
    (data1=0000008227482510)
    (data2=0000008227482510)
    (data3=0000008227482510)
    (data4=0000008227482510)
    (data5=0000008227482510)
    (data8=0000008227482510)
    (data9=0000008227482510)
    (data10=0000008227482510)
    (data11=0000008227482510)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0000008227482510)
    (data1_val=0000008227482510)
    (data2_val=0000008227482510)
    (data3_val=0000008227482510)
    (data4_val=0000008227482510)
    (data5_val=0000008227482510)
    (data8_val=0000008227482510)
    (data9_val=0000008227482510)
    (data10_val=0000008227482510)
    (data11_val=0000008227482510)
target=6, linearSearch=[6, 1018]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000082274998A0)
    (data1_def=00000082274998A0)
    (data2_def=00000082274998A0)
    (data3_def=00000082274998A0)
    (data4_def=00000082274998A0)
    (data5_def=00000082274998A0)
    (data8_def=00000082274998A0)
    (data9_def=00000082274998A0)
    (data10_def=00000082274998A0)
    (data11_def=00000082274998A0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000082274998A0)
    (data1=00000082274998A0)
    (data2=00000082274998A0)
    (data3=00000082274998A0)
    (data4=00000082274998A0)
    (data5=00000082274998A0)
    (data8=00000082274998A0)
    (data9=00000082274998A0)
    (data10=00000082274998A0)
    (data11=00000082274998A0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000082274998A0)
    (data1_val=00000082274998A0)
    (data2_val=00000082274998A0)
    (data3_val=00000082274998A0)
    (data4_val=00000082274998A0)
    (data5_val=00000082274998A0)
    (data8_val=00000082274998A0)
    (data9_val=00000082274998A0)
    (data10_val=00000082274998A0)
    (data11_val=00000082274998A0)
target=14, linearSearch=[14, 2207]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=000000822748CCE0)
    (data1_def=000000822748CCE0)
    (data2_def=000000822748CCE0)
    (data3_def=000000822748CCE0)
    (data4_def=000000822748CCE0)
    (data5_def=000000822748CCE0)
    (data8_def=000000822748CCE0)
    (data9_def=000000822748CCE0)
    (data10_def=000000822748CCE0)
    (data11_def=000000822748CCE0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=000000822748CCE0)
    (data1=000000822748CCE0)
    (data2=000000822748CCE0)
    (data3=000000822748CCE0)
    (data4=000000822748CCE0)
    (data5=000000822748CCE0)
    (data8=000000822748CCE0)
    (data9=000000822748CCE0)
    (data10=000000822748CCE0)
    (data11=000000822748CCE0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=000000822748CCE0)
    (data1_val=000000822748CCE0)
    (data2_val=000000822748CCE0)
    (data3_val=000000822748CCE0)
    (data4_val=000000822748CCE0)
    (data5_val=000000822748CCE0)
    (data8_val=000000822748CCE0)
    (data9_val=000000822748CCE0)
    (data10_val=000000822748CCE0)
    (data11_val=000000822748CCE0)
target=30, linearSearch=[30, 1555]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=0000008227481980)
    (data1_def=0000008227481980)
    (data2_def=0000008227481980)
    (data3_def=0000008227481980)
    (data4_def=0000008227481980)
    (data5_def=0000008227481980)
    (data8_def=0000008227481980)
    (data9_def=0000008227481980)
    (data10_def=0000008227481980)
    (data11_def=0000008227481980)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0000008227481980)
    (data1=0000008227481980)
    (data2=0000008227481980)
    (data3=0000008227481980)
    (data4=0000008227481980)
    (data5=0000008227481980)
    (data8=0000008227481980)
    (data9=0000008227481980)
    (data10=0000008227481980)
    (data11=0000008227481980)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0000008227481980)
    (data1_val=0000008227481980)
    (data2_val=0000008227481980)
    (data3_val=0000008227481980)
    (data4_val=0000008227481980)
    (data5_val=0000008227481980)
    (data8_val=0000008227481980)
    (data9_val=0000008227481980)
    (data10_val=0000008227481980)
    (data11_val=0000008227481980)
target=62, linearSearch=[62, 981]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000082274879C0)
    (data1_def=00000082274879C0)
    (data2_def=00000082274879C0)
    (data3_def=00000082274879C0)
    (data4_def=00000082274879C0)
    (data5_def=00000082274879C0)
    (data8_def=00000082274879C0)
    (data9_def=00000082274879C0)
    (data10_def=00000082274879C0)
    (data11_def=00000082274879C0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000082274879C0)
    (data1=00000082274879C0)
    (data2=00000082274879C0)
    (data3=00000082274879C0)
    (data4=00000082274879C0)
    (data5=00000082274879C0)
    (data8=00000082274879C0)
    (data9=00000082274879C0)
    (data10=00000082274879C0)
    (data11=00000082274879C0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000082274879C0)
    (data1_val=00000082274879C0)
    (data2_val=00000082274879C0)
    (data3_val=00000082274879C0)
    (data4_val=00000082274879C0)
    (data5_val=00000082274879C0)
    (data8_val=00000082274879C0)
    (data9_val=00000082274879C0)
    (data10_val=00000082274879C0)
    (data11_val=00000082274879C0)
target=126, linearSearch=[126, 1289]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=000000822750DC00)
    (data1_def=000000822750DC00)
    (data2_def=000000822750DC00)
    (data3_def=000000822750DC00)
    (data4_def=000000822750DC00)
    (data5_def=000000822750DC00)
    (data8_def=000000822750DC00)
    (data9_def=000000822750DC00)
    (data10_def=000000822750DC00)
    (data11_def=000000822750DC00)
  linearSearch(*array_shuffle1, search_predicate);
    (data=000000822750DC00)
    (data1=000000822750DC00)
    (data2=000000822750DC00)
    (data3=000000822750DC00)
    (data4=000000822750DC00)
    (data5=000000822750DC00)
    (data8=000000822750DC00)
    (data9=000000822750DC00)
    (data10=000000822750DC00)
    (data11=000000822750DC00)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=000000822750DC00)
    (data1_val=000000822750DC00)
    (data2_val=000000822750DC00)
    (data3_val=000000822750DC00)
    (data4_val=000000822750DC00)
    (data5_val=000000822750DC00)
    (data8_val=000000822750DC00)
    (data9_val=000000822750DC00)
    (data10_val=000000822750DC00)
    (data11_val=000000822750DC00)
target=254, linearSearch=[254, 8157]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=0000000000000000)
    (data1_def=0000000000000000)
    (data2_def=0000000000000000)
    (data3_def=0000000000000000)
    (data4_def=0000000000000000)
    (data5_def=0000000000000000)
    (data8_def=0000000000000000)
    (data9_def=0000000000000000)
   (data10_def=0000000000000000)
    (data11_def=0000000000000000)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0000000000000000)
    (data1=0000000000000000)
    (data2=0000000000000000)
    (data3=0000000000000000)
    (data4=0000000000000000)
    (data5=0000000000000000)
    (data8=0000000000000000)
    (data9=0000000000000000)
    (data10=0000000000000000)
    (data11=0000000000000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0000000000000000)
    (data1_val=0000000000000000)
    (data2_val=0000000000000000)
    (data3_val=0000000000000000)
    (data4_val=0000000000000000)
    (data5_val=0000000000000000)
    (data8_val=0000000000000000)
    (data9_val=0000000000000000)
    (data10_val=0000000000000000)
    (data11_val=0000000000000000)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=000000822746E6F0)
    (data1_def=000000822746E6F0)
    (data2_def=000000822746E6F0)
    (data3_def=000000822746E6F0)
    (data4_def=000000822746E6F0)
    (data5_def=000000822746E6F0)
    (data8_def=000000822746E6F0)
    (data9_def=000000822746E6F0)
   (data10_def=000000822746E6F0)
    (data11_def=000000822746E6F0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=000000822746E6F0)
    (data1=000000822746E6F0)
    (data2=000000822746E6F0)
    (data3=000000822746E6F0)
    (data4=000000822746E6F0)
    (data5=000000822746E6F0)
    (data8=000000822746E6F0)
    (data9=000000822746E6F0)
    (data10=000000822746E6F0)
    (data11=000000822746E6F0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=000000822746E6F0)
    (data1_val=000000822746E6F0)
    (data2_val=000000822746E6F0)
    (data3_val=000000822746E6F0)
    (data4_val=000000822746E6F0)
    (data5_val=000000822746E6F0)
    (data8_val=000000822746E6F0)
    (data9_val=000000822746E6F0)
    (data10_val=000000822746E6F0)
    (data11_val=000000822746E6F0)
target=0, binarySearch=[0, 2342]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=000000822746E8D0)
    (data1_def=000000822746E8D0)
    (data2_def=000000822746E8D0)
    (data3_def=000000822746E8D0)
    (data4_def=000000822746E8D0)
    (data5_def=000000822746E8D0)
    (data8_def=000000822746E8D0)
    (data9_def=000000822746E8D0)
   (data10_def=000000822746E8D0)
    (data11_def=000000822746E8D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=000000822746E8D0)
    (data1=000000822746E8D0)
    (data2=000000822746E8D0)
    (data3=000000822746E8D0)
    (data4=000000822746E8D0)
    (data5=000000822746E8D0)
    (data8=000000822746E8D0)
    (data9=000000822746E8D0)
    (data10=000000822746E8D0)
    (data11=000000822746E8D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=000000822746E8D0)
    (data1_val=000000822746E8D0)
    (data2_val=000000822746E8D0)
    (data3_val=000000822746E8D0)
    (data4_val=000000822746E8D0)
    (data5_val=000000822746E8D0)
    (data8_val=000000822746E8D0)
    (data9_val=000000822746E8D0)
    (data10_val=000000822746E8D0)
    (data11_val=000000822746E8D0)
target=2, binarySearch=[2, 6831]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=000000822746EC90)
    (data1_def=000000822746EC90)
    (data2_def=000000822746EC90)
    (data3_def=000000822746EC90)
    (data4_def=000000822746EC90)
    (data5_def=000000822746EC90)
    (data8_def=000000822746EC90)
    (data9_def=000000822746EC90)
   (data10_def=000000822746EC90)
    (data11_def=000000822746EC90)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=000000822746EC90)
    (data1=000000822746EC90)
    (data2=000000822746EC90)
    (data3=000000822746EC90)
    (data4=000000822746EC90)
    (data5=000000822746EC90)
    (data8=000000822746EC90)
    (data9=000000822746EC90)
    (data10=000000822746EC90)
    (data11=000000822746EC90)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=000000822746EC90)
    (data1_val=000000822746EC90)
    (data2_val=000000822746EC90)
    (data3_val=000000822746EC90)
    (data4_val=000000822746EC90)
    (data5_val=000000822746EC90)
    (data8_val=000000822746EC90)
    (data9_val=000000822746EC90)
    (data10_val=000000822746EC90)
    (data11_val=000000822746EC90)
target=6, binarySearch=[6, 1018]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=000000822746F410)
    (data1_def=000000822746F410)
    (data2_def=000000822746F410)
    (data3_def=000000822746F410)
    (data4_def=000000822746F410)
    (data5_def=000000822746F410)
    (data8_def=000000822746F410)
    (data9_def=000000822746F410)
   (data10_def=000000822746F410)
    (data11_def=000000822746F410)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=000000822746F410)
    (data1=000000822746F410)
    (data2=000000822746F410)
    (data3=000000822746F410)
    (data4=000000822746F410)
    (data5=000000822746F410)
    (data8=000000822746F410)
    (data9=000000822746F410)
    (data10=000000822746F410)
    (data11=000000822746F410)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=000000822746F410)
    (data1_val=000000822746F410)
    (data2_val=000000822746F410)
    (data3_val=000000822746F410)
    (data4_val=000000822746F410)
    (data5_val=000000822746F410)
    (data8_val=000000822746F410)
    (data9_val=000000822746F410)
    (data10_val=000000822746F410)
    (data11_val=000000822746F410)
target=14, binarySearch=[14, 4706]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=0000008227470310)
    (data1_def=0000008227470310)
    (data2_def=0000008227470310)
    (data3_def=0000008227470310)
    (data4_def=0000008227470310)
    (data5_def=0000008227470310)
    (data8_def=0000008227470310)
    (data9_def=0000008227470310)
   (data10_def=0000008227470310)
    (data11_def=0000008227470310)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0000008227470310)
    (data1=0000008227470310)
    (data2=0000008227470310)
    (data3=0000008227470310)
    (data4=0000008227470310)
    (data5=0000008227470310)
    (data8=0000008227470310)
    (data9=0000008227470310)
    (data10=0000008227470310)
    (data11=0000008227470310)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0000008227470310)
    (data1_val=0000008227470310)
    (data2_val=0000008227470310)
    (data3_val=0000008227470310)
    (data4_val=0000008227470310)
    (data5_val=0000008227470310)
    (data8_val=0000008227470310)
    (data9_val=0000008227470310)
    (data10_val=0000008227470310)
    (data11_val=0000008227470310)
target=30, binarySearch=[30, 5065]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=0000008227472110)
    (data1_def=0000008227472110)
    (data2_def=0000008227472110)
    (data3_def=0000008227472110)
    (data4_def=0000008227472110)
    (data5_def=0000008227472110)
    (data8_def=0000008227472110)
    (data9_def=0000008227472110)
   (data10_def=0000008227472110)
    (data11_def=0000008227472110)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0000008227472110)
    (data1=0000008227472110)
    (data2=0000008227472110)
    (data3=0000008227472110)
    (data4=0000008227472110)
    (data5=0000008227472110)
    (data8=0000008227472110)
    (data9=0000008227472110)
    (data10=0000008227472110)
    (data11=0000008227472110)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0000008227472110)
    (data1_val=0000008227472110)
    (data2_val=0000008227472110)
    (data3_val=0000008227472110)
    (data4_val=0000008227472110)
    (data5_val=0000008227472110)
    (data8_val=0000008227472110)
    (data9_val=0000008227472110)
    (data10_val=0000008227472110)
    (data11_val=0000008227472110)
target=62, binarySearch=[62, 9221]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=0000008227475D10)
    (data1_def=0000008227475D10)
    (data2_def=0000008227475D10)
    (data3_def=0000008227475D10)
    (data4_def=0000008227475D10)
    (data5_def=0000008227475D10)
    (data8_def=0000008227475D10)
    (data9_def=0000008227475D10)
   (data10_def=0000008227475D10)
    (data11_def=0000008227475D10)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0000008227475D10)
    (data1=0000008227475D10)
    (data2=0000008227475D10)
    (data3=0000008227475D10)
    (data4=0000008227475D10)
    (data5=0000008227475D10)
    (data8=0000008227475D10)
    (data9=0000008227475D10)
    (data10=0000008227475D10)
    (data11=0000008227475D10)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0000008227475D10)
    (data1_val=0000008227475D10)
    (data2_val=0000008227475D10)
    (data3_val=0000008227475D10)
    (data4_val=0000008227475D10)
    (data5_val=0000008227475D10)
    (data8_val=0000008227475D10)
    (data9_val=0000008227475D10)
    (data10_val=0000008227475D10)
    (data11_val=0000008227475D10)
target=126, binarySearch=[126, 1289]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=000000822747D510)
    (data1_def=000000822747D510)
    (data2_def=000000822747D510)
    (data3_def=000000822747D510)
    (data4_def=000000822747D510)
    (data5_def=000000822747D510)
    (data8_def=000000822747D510)
    (data9_def=000000822747D510)
   (data10_def=000000822747D510)
    (data11_def=000000822747D510)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=000000822747D510)
    (data1=000000822747D510)
    (data2=000000822747D510)
    (data3=000000822747D510)
    (data4=000000822747D510)
    (data5=000000822747D510)
    (data8=000000822747D510)
    (data9=000000822747D510)
    (data10=000000822747D510)
    (data11=000000822747D510)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=000000822747D510)
    (data1_val=000000822747D510)
    (data2_val=000000822747D510)
    (data3_val=000000822747D510)
    (data4_val=000000822747D510)
    (data5_val=000000822747D510)
    (data8_val=000000822747D510)
    (data9_val=000000822747D510)
    (data10_val=000000822747D510)
    (data11_val=000000822747D510)
target=254, binarySearch=[254, 8763]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=6.166871700 sec.
