============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=4951 / record(s)=10000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=5002 / record(s)=10000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=4984 / record(s)=10000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=10000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=3333 / record(s)=10000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=10000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=4976 / record(s)=10000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001973400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003021700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000978600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.010976900 sec.
* Average time     = 0.001568129 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.003021700 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000998900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000999200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.002999300 sec.
* Average time     = 0.000428471 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000999400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000998900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.005000900 sec.
* Average time     = 0.000714414 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000900 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000999100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.002999700 sec.
* Average time     = 0.000428529 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000900 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001002700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000999200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.002001900 sec.
* Average time     = 0.000285986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001002700 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001002900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000990700 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001002300 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001002400 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001010800 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000987700 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.006996500 sec.
* Average time     = 0.000999500 sec.
* Min time         = 0.000987700 sec.
* Max time         = 0.001010800 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.212032300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.213992700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.213014400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.265034200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.063996200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.233020900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 1.201090700 sec.
* Average time     = 0.171584386 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.265034200 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.179009600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.179009800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.183009900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.246997900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.232994300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 1.021021500 sec.
* Average time     = 0.145860214 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.246997900 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.129007600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.135008500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.132008200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.190010400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.070003900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.157009400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.813048000 sec.
* Average time     = 0.116149714 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.190010400 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.006000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1922616 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.005999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1902755 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.005999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1895908 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=494802 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.004000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1474414 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=514605 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.005000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1903279 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.029001800 sec.
* Average time     = 0.004143114 sec.
* Min time         = 0.001000000 sec.
* Max time         = 0.006000900 sec.
* Total Swapped    =  10108379 count(s)
* Average  Swapped =   1444054 count(s)
* Min Swapped      =    494802 count(s)
* Max Swapped      =   1922616 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57500 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57587 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57584 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=18345 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=7303 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001999400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=58823 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.007000000 sec.
* Average time     = 0.001000000 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002000000 sec.
* Total Swapped    =    257142 count(s)
* Average  Swapped =     36734 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     58823 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.203031000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.144988300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.120007600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.254007900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.225013800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 0.947048600 sec.
* Average time     = 0.135292657 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.254007900 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33719 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33677 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33444 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=36402 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.003000800 sec.
* Average time     = 0.000428686 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000500 sec.
* Total Swapped    =    152242 count(s)
* Average  Swapped =     21748 count(s)
* Min Swapped      =      3333 count(s)
* Max Swapped      =     36402 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.125008700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.124028000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9995 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.123987300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.124034200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.123981500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.124007000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.126007000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9989 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.871053700 sec.
* Average time     = 0.124436243 sec.
* Min time         = 0.123981500 sec.
* Max time         = 0.126007000 sec.
* Total Swapped    =     48300 count(s)
* Average  Swapped =      6900 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002003500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129635 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003024300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129583 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001991500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129778 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=218680 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001979800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=116627 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.002000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=213143 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=123006 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.015001200 sec.
* Average time     = 0.002143029 sec.
* Min time         = 0.001979800 sec.
* Max time         = 0.003024300 sec.
* Total Swapped    =   1060452 count(s)
* Average  Swapped =    151493 count(s)
* Min Swapped      =    116627 count(s)
* Max Swapped      =    218680 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.117006600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9985 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.116006700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9987 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.115023600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9983 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.273010800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.213990100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9994 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.835037800 sec.
* Average time     = 0.119291114 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.273010800 sec.
* Total Swapped    =     59947 count(s)
* Average  Swapped =      8563 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000979500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48473 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48925 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000999800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48799 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001020100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=37222 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=5156 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49469 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.005000500 sec.
* Average time     = 0.000714357 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001020100 sec.
* Total Swapped    =    238044 count(s)
* Average  Swapped =     34006 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     49469 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.082991000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58291 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.085004500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58193 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.074004400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58188 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.161028200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=60442 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.120007800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58404 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.524037700 sec.
* Average time     = 0.074862529 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.161028200 sec.
* Total Swapped    =    303524 count(s)
* Average  Swapped =     43360 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     60442 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31152 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31250 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31256 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=6022 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1024 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33844 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.001001800 sec.
* Average time     = 0.000143114 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001800 sec.
* Total Swapped    =    134548 count(s)
* Average  Swapped =     19221 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     33844 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9996 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000978900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9998 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000997600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.003978300 sec.
* Average time     = 0.000568329 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =     49997 count(s)
* Average  Swapped =      7142 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     10000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 10000 Count(s)
Total Array size   = 800000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.010976900/  0.001568129/  0.000000000/  0.003021700
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.002999300/  0.000428471/  0.000000000/  0.001001200
- std::sort(inline-func):   0.005000900/  0.000714414/  0.000000000/  0.001000900
- std::sort(functor):       0.002999700/  0.000428529/  0.000000000/  0.001000900
- std::sort(lambda):        0.002001900/  0.000285986/  0.000000000/  0.001002700
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.006996500/  0.000999500/  0.000987700/  0.001010800
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           1.201090700/  0.171584386/  0.000000000/  0.265034200  162016591/   23145227/          0/   49985001
- Shaker sort<S>:           1.021021500/  0.145860214/  0.000000000/  0.246997900  162016591/   23145227/          0/   49985001
- Odd-Even sort<S>:         0.813048000/  0.116149714/  0.000000000/  0.190010400  162016591/   23145227/          0/   49985001
- Shear sort:               0.029001800/  0.004143114/  0.001000000/  0.006000900   10108379/    1444054/     494802/    1922616
- Comb sort:                0.007000000/  0.001000000/  0.000000000/  0.002000000     257142/      36734/          0/      58823
- Gnome sort<S>:            0.947048600/  0.135292657/  0.000000000/  0.254007900  162016591/   23145227/          0/   49985001
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.003000800/  0.000428686/  0.000000000/  0.001000500     152242/      21748/       3333/      36402
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.871053700/  0.124436243/  0.123981500/  0.126007000      48300/       6900/          0/       9995
- Heap sort:                0.015001200/  0.002143029/  0.001979800/  0.003024300    1060452/     151493/     116627/     218680
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.835037800/  0.119291114/  0.000000000/  0.273010800      59947/       8563/          0/       9999
- Shell sort:               0.005000500/  0.000714357/  0.000000000/  0.001020100     238044/      34006/          0/      49469
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.524037700/  0.074862529/  0.000000000/  0.161028200     303524/      43360/          0/      60442
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.001001800/  0.000143114/  0.000000000/  0.001001800     134548/      19221/          0/      33844
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.003978300/  0.000568329/  0.000000000/  0.001001200      49997/       7142/          0/      10000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=31152)
(result1=31152)
(result3=31152)
(result4=31152)
(result5=31152)
(result6=31152)
(result8=31152)
(result9=31152)
(result10=31152)
(result11=31095)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=0000000000000000)
    (data1_def=0000000000000000)
    (data2_def=0000000000000000)
    (data3_def=0000000000000000)
    (data4_def=0000000000000000)
    (data5_def=0000000000000000)
    (data8_def=0000000000000000)
    (data9_def=0000000000000000)
    (data10_def=0000000000000000)
    (data11_def=0000000000000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0000000000000000)
    (data1=0000000000000000)
    (data2=0000000000000000)
    (data3=0000000000000000)
    (data4=0000000000000000)
    (data5=0000000000000000)
    (data8=0000000000000000)
    (data9=0000000000000000)
    (data10=0000000000000000)
    (data11=0000000000000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0000000000000000)
    (data1_val=0000000000000000)
    (data2_val=0000000000000000)
    (data3_val=0000000000000000)
    (data4_val=0000000000000000)
    (data5_val=0000000000000000)
    (data8_val=0000000000000000)
    (data9_val=0000000000000000)
    (data10_val=0000000000000000)
    (data11_val=0000000000000000)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=0000000F0528C290)
    (data1_def=0000000F0528C290)
    (data2_def=0000000F0528C290)
    (data3_def=0000000F0528C290)
    (data4_def=0000000F0528C290)
    (data5_def=0000000F0528C290)
    (data8_def=0000000F0528C290)
    (data9_def=0000000F0528C290)
    (data10_def=0000000F0528C290)
    (data11_def=0000000F0528C290)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0000000F0528C290)
    (data1=0000000F0528C290)
    (data2=0000000F0528C290)
    (data3=0000000F0528C290)
    (data4=0000000F0528C290)
    (data5=0000000F0528C290)
    (data8=0000000F0528C290)
    (data9=0000000F0528C290)
    (data10=0000000F0528C290)
    (data11=0000000F0528C290)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0000000F0528C290)
    (data1_val=0000000F0528C290)
    (data2_val=0000000F0528C290)
    (data3_val=0000000F0528C290)
    (data4_val=0000000F0528C290)
    (data5_val=0000000F0528C290)
    (data8_val=0000000F0528C290)
    (data9_val=0000000F0528C290)
    (data10_val=0000000F0528C290)
    (data11_val=0000000F0528C290)
target=0, linearSearch=[0, 2342]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=0000000F05269A60)
    (data1_def=0000000F05269A60)
    (data2_def=0000000F05269A60)
    (data3_def=0000000F05269A60)
    (data4_def=0000000F05269A60)
    (data5_def=0000000F05269A60)
    (data8_def=0000000F05269A60)
    (data9_def=0000000F05269A60)
    (data10_def=0000000F05269A60)
    (data11_def=0000000F05269A60)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0000000F05269A60)
    (data1=0000000F05269A60)
    (data2=0000000F05269A60)
    (data3=0000000F05269A60)
    (data4=0000000F05269A60)
    (data5=0000000F05269A60)
    (data8=0000000F05269A60)
    (data9=0000000F05269A60)
    (data10=0000000F05269A60)
    (data11=0000000F05269A60)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0000000F05269A60)
    (data1_val=0000000F05269A60)
    (data2_val=0000000F05269A60)
    (data3_val=0000000F05269A60)
    (data4_val=0000000F05269A60)
    (data5_val=0000000F05269A60)
    (data8_val=0000000F05269A60)
    (data9_val=0000000F05269A60)
    (data10_val=0000000F05269A60)
    (data11_val=0000000F05269A60)
target=2, linearSearch=[2, 575]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=0000000F052724D0)
    (data1_def=0000000F052724D0)
    (data2_def=0000000F052724D0)
    (data3_def=0000000F052724D0)
    (data4_def=0000000F052724D0)
    (data5_def=0000000F052724D0)
    (data8_def=0000000F052724D0)
    (data9_def=0000000F052724D0)
    (data10_def=0000000F052724D0)
    (data11_def=0000000F052724D0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0000000F052724D0)
    (data1=0000000F052724D0)
    (data2=0000000F052724D0)
    (data3=0000000F052724D0)
    (data4=0000000F052724D0)
    (data5=0000000F052724D0)
    (data8=0000000F052724D0)
    (data9=0000000F052724D0)
    (data10=0000000F052724D0)
    (data11=0000000F052724D0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0000000F052724D0)
    (data1_val=0000000F052724D0)
    (data2_val=0000000F052724D0)
    (data3_val=0000000F052724D0)
    (data4_val=0000000F052724D0)
    (data5_val=0000000F052724D0)
    (data8_val=0000000F052724D0)
    (data9_val=0000000F052724D0)
    (data10_val=0000000F052724D0)
    (data11_val=0000000F052724D0)
target=6, linearSearch=[6, 1018]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=0000000F05289860)
    (data1_def=0000000F05289860)
    (data2_def=0000000F05289860)
    (data3_def=0000000F05289860)
    (data4_def=0000000F05289860)
    (data5_def=0000000F05289860)
    (data8_def=0000000F05289860)
    (data9_def=0000000F05289860)
    (data10_def=0000000F05289860)
    (data11_def=0000000F05289860)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0000000F05289860)
    (data1=0000000F05289860)
    (data2=0000000F05289860)
    (data3=0000000F05289860)
    (data4=0000000F05289860)
    (data5=0000000F05289860)
    (data8=0000000F05289860)
    (data9=0000000F05289860)
    (data10=0000000F05289860)
    (data11=0000000F05289860)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0000000F05289860)
    (data1_val=0000000F05289860)
    (data2_val=0000000F05289860)
    (data3_val=0000000F05289860)
    (data4_val=0000000F05289860)
    (data5_val=0000000F05289860)
    (data8_val=0000000F05289860)
    (data9_val=0000000F05289860)
    (data10_val=0000000F05289860)
    (data11_val=0000000F05289860)
target=14, linearSearch=[14, 2207]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=0000000F0527CCA0)
    (data1_def=0000000F0527CCA0)
    (data2_def=0000000F0527CCA0)
    (data3_def=0000000F0527CCA0)
    (data4_def=0000000F0527CCA0)
    (data5_def=0000000F0527CCA0)
    (data8_def=0000000F0527CCA0)
    (data9_def=0000000F0527CCA0)
    (data10_def=0000000F0527CCA0)
    (data11_def=0000000F0527CCA0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0000000F0527CCA0)
    (data1=0000000F0527CCA0)
    (data2=0000000F0527CCA0)
    (data3=0000000F0527CCA0)
    (data4=0000000F0527CCA0)
    (data5=0000000F0527CCA0)
    (data8=0000000F0527CCA0)
    (data9=0000000F0527CCA0)
    (data10=0000000F0527CCA0)
    (data11=0000000F0527CCA0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0000000F0527CCA0)
    (data1_val=0000000F0527CCA0)
    (data2_val=0000000F0527CCA0)
    (data3_val=0000000F0527CCA0)
    (data4_val=0000000F0527CCA0)
    (data5_val=0000000F0527CCA0)
    (data8_val=0000000F0527CCA0)
    (data9_val=0000000F0527CCA0)
    (data10_val=0000000F0527CCA0)
    (data11_val=0000000F0527CCA0)
target=30, linearSearch=[30, 1555]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=0000000F05271940)
    (data1_def=0000000F05271940)
    (data2_def=0000000F05271940)
    (data3_def=0000000F05271940)
    (data4_def=0000000F05271940)
    (data5_def=0000000F05271940)
    (data8_def=0000000F05271940)
    (data9_def=0000000F05271940)
    (data10_def=0000000F05271940)
    (data11_def=0000000F05271940)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0000000F05271940)
    (data1=0000000F05271940)
    (data2=0000000F05271940)
    (data3=0000000F05271940)
    (data4=0000000F05271940)
    (data5=0000000F05271940)
    (data8=0000000F05271940)
    (data9=0000000F05271940)
    (data10=0000000F05271940)
    (data11=0000000F05271940)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0000000F05271940)
    (data1_val=0000000F05271940)
    (data2_val=0000000F05271940)
    (data3_val=0000000F05271940)
    (data4_val=0000000F05271940)
    (data5_val=0000000F05271940)
    (data8_val=0000000F05271940)
    (data9_val=0000000F05271940)
    (data10_val=0000000F05271940)
    (data11_val=0000000F05271940)
target=62, linearSearch=[62, 981]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=0000000F05277980)
    (data1_def=0000000F05277980)
    (data2_def=0000000F05277980)
    (data3_def=0000000F05277980)
    (data4_def=0000000F05277980)
    (data5_def=0000000F05277980)
    (data8_def=0000000F05277980)
    (data9_def=0000000F05277980)
    (data10_def=0000000F05277980)
    (data11_def=0000000F05277980)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0000000F05277980)
    (data1=0000000F05277980)
    (data2=0000000F05277980)
    (data3=0000000F05277980)
    (data4=0000000F05277980)
    (data5=0000000F05277980)
    (data8=0000000F05277980)
    (data9=0000000F05277980)
    (data10=0000000F05277980)
    (data11=0000000F05277980)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0000000F05277980)
    (data1_val=0000000F05277980)
    (data2_val=0000000F05277980)
    (data3_val=0000000F05277980)
    (data4_val=0000000F05277980)
    (data5_val=0000000F05277980)
    (data8_val=0000000F05277980)
    (data9_val=0000000F05277980)
    (data10_val=0000000F05277980)
    (data11_val=0000000F05277980)
target=126, linearSearch=[126, 1289]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=0000000F052FDBC0)
    (data1_def=0000000F052FDBC0)
    (data2_def=0000000F052FDBC0)
    (data3_def=0000000F052FDBC0)
    (data4_def=0000000F052FDBC0)
    (data5_def=0000000F052FDBC0)
    (data8_def=0000000F052FDBC0)
    (data9_def=0000000F052FDBC0)
    (data10_def=0000000F052FDBC0)
    (data11_def=0000000F052FDBC0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0000000F052FDBC0)
    (data1=0000000F052FDBC0)
    (data2=0000000F052FDBC0)
    (data3=0000000F052FDBC0)
    (data4=0000000F052FDBC0)
    (data5=0000000F052FDBC0)
    (data8=0000000F052FDBC0)
    (data9=0000000F052FDBC0)
    (data10=0000000F052FDBC0)
    (data11=0000000F052FDBC0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0000000F052FDBC0)
    (data1_val=0000000F052FDBC0)
    (data2_val=0000000F052FDBC0)
    (data3_val=0000000F052FDBC0)
    (data4_val=0000000F052FDBC0)
    (data5_val=0000000F052FDBC0)
    (data8_val=0000000F052FDBC0)
    (data9_val=0000000F052FDBC0)
    (data10_val=0000000F052FDBC0)
    (data11_val=0000000F052FDBC0)
target=254, linearSearch=[254, 8157]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=0000000000000000)
    (data1_def=0000000000000000)
    (data2_def=0000000000000000)
    (data3_def=0000000000000000)
    (data4_def=0000000000000000)
    (data5_def=0000000000000000)
    (data8_def=0000000000000000)
    (data9_def=0000000000000000)
   (data10_def=0000000000000000)
    (data11_def=0000000000000000)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0000000000000000)
    (data1=0000000000000000)
    (data2=0000000000000000)
    (data3=0000000000000000)
    (data4=0000000000000000)
    (data5=0000000000000000)
    (data8=0000000000000000)
    (data9=0000000000000000)
    (data10=0000000000000000)
    (data11=0000000000000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0000000000000000)
    (data1_val=0000000000000000)
    (data2_val=0000000000000000)
    (data3_val=0000000000000000)
    (data4_val=0000000000000000)
    (data5_val=0000000000000000)
    (data8_val=0000000000000000)
    (data9_val=0000000000000000)
    (data10_val=0000000000000000)
    (data11_val=0000000000000000)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=0000000F0525E6B0)
    (data1_def=0000000F0525E6B0)
    (data2_def=0000000F0525E6B0)
    (data3_def=0000000F0525E6B0)
    (data4_def=0000000F0525E6B0)
    (data5_def=0000000F0525E6B0)
    (data8_def=0000000F0525E6B0)
    (data9_def=0000000F0525E6B0)
   (data10_def=0000000F0525E6B0)
    (data11_def=0000000F0525E6B0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0000000F0525E6B0)
    (data1=0000000F0525E6B0)
    (data2=0000000F0525E6B0)
    (data3=0000000F0525E6B0)
    (data4=0000000F0525E6B0)
    (data5=0000000F0525E6B0)
    (data8=0000000F0525E6B0)
    (data9=0000000F0525E6B0)
    (data10=0000000F0525E6B0)
    (data11=0000000F0525E6B0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0000000F0525E6B0)
    (data1_val=0000000F0525E6B0)
    (data2_val=0000000F0525E6B0)
    (data3_val=0000000F0525E6B0)
    (data4_val=0000000F0525E6B0)
    (data5_val=0000000F0525E6B0)
    (data8_val=0000000F0525E6B0)
    (data9_val=0000000F0525E6B0)
    (data10_val=0000000F0525E6B0)
    (data11_val=0000000F0525E6B0)
target=0, binarySearch=[0, 2342]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=0000000F0525E890)
    (data1_def=0000000F0525E890)
    (data2_def=0000000F0525E890)
    (data3_def=0000000F0525E890)
    (data4_def=0000000F0525E890)
    (data5_def=0000000F0525E890)
    (data8_def=0000000F0525E890)
    (data9_def=0000000F0525E890)
   (data10_def=0000000F0525E890)
    (data11_def=0000000F0525E890)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0000000F0525E890)
    (data1=0000000F0525E890)
    (data2=0000000F0525E890)
    (data3=0000000F0525E890)
    (data4=0000000F0525E890)
    (data5=0000000F0525E890)
    (data8=0000000F0525E890)
    (data9=0000000F0525E890)
    (data10=0000000F0525E890)
    (data11=0000000F0525E890)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0000000F0525E890)
    (data1_val=0000000F0525E890)
    (data2_val=0000000F0525E890)
    (data3_val=0000000F0525E890)
    (data4_val=0000000F0525E890)
    (data5_val=0000000F0525E890)
    (data8_val=0000000F0525E890)
    (data9_val=0000000F0525E890)
    (data10_val=0000000F0525E890)
    (data11_val=0000000F0525E890)
target=2, binarySearch=[2, 6831]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=0000000F0525EC50)
    (data1_def=0000000F0525EC50)
    (data2_def=0000000F0525EC50)
    (data3_def=0000000F0525EC50)
    (data4_def=0000000F0525EC50)
    (data5_def=0000000F0525EC50)
    (data8_def=0000000F0525EC50)
    (data9_def=0000000F0525EC50)
   (data10_def=0000000F0525EC50)
    (data11_def=0000000F0525EC50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0000000F0525EC50)
    (data1=0000000F0525EC50)
    (data2=0000000F0525EC50)
    (data3=0000000F0525EC50)
    (data4=0000000F0525EC50)
    (data5=0000000F0525EC50)
    (data8=0000000F0525EC50)
    (data9=0000000F0525EC50)
    (data10=0000000F0525EC50)
    (data11=0000000F0525EC50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0000000F0525EC50)
    (data1_val=0000000F0525EC50)
    (data2_val=0000000F0525EC50)
    (data3_val=0000000F0525EC50)
    (data4_val=0000000F0525EC50)
    (data5_val=0000000F0525EC50)
    (data8_val=0000000F0525EC50)
    (data9_val=0000000F0525EC50)
    (data10_val=0000000F0525EC50)
    (data11_val=0000000F0525EC50)
target=6, binarySearch=[6, 1018]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=0000000F0525F3D0)
    (data1_def=0000000F0525F3D0)
    (data2_def=0000000F0525F3D0)
    (data3_def=0000000F0525F3D0)
    (data4_def=0000000F0525F3D0)
    (data5_def=0000000F0525F3D0)
    (data8_def=0000000F0525F3D0)
    (data9_def=0000000F0525F3D0)
   (data10_def=0000000F0525F3D0)
    (data11_def=0000000F0525F3D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0000000F0525F3D0)
    (data1=0000000F0525F3D0)
    (data2=0000000F0525F3D0)
    (data3=0000000F0525F3D0)
    (data4=0000000F0525F3D0)
    (data5=0000000F0525F3D0)
    (data8=0000000F0525F3D0)
    (data9=0000000F0525F3D0)
    (data10=0000000F0525F3D0)
    (data11=0000000F0525F3D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0000000F0525F3D0)
    (data1_val=0000000F0525F3D0)
    (data2_val=0000000F0525F3D0)
    (data3_val=0000000F0525F3D0)
    (data4_val=0000000F0525F3D0)
    (data5_val=0000000F0525F3D0)
    (data8_val=0000000F0525F3D0)
    (data9_val=0000000F0525F3D0)
    (data10_val=0000000F0525F3D0)
    (data11_val=0000000F0525F3D0)
target=14, binarySearch=[14, 4706]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=0000000F052602D0)
    (data1_def=0000000F052602D0)
    (data2_def=0000000F052602D0)
    (data3_def=0000000F052602D0)
    (data4_def=0000000F052602D0)
    (data5_def=0000000F052602D0)
    (data8_def=0000000F052602D0)
    (data9_def=0000000F052602D0)
   (data10_def=0000000F052602D0)
    (data11_def=0000000F052602D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0000000F052602D0)
    (data1=0000000F052602D0)
    (data2=0000000F052602D0)
    (data3=0000000F052602D0)
    (data4=0000000F052602D0)
    (data5=0000000F052602D0)
    (data8=0000000F052602D0)
    (data9=0000000F052602D0)
    (data10=0000000F052602D0)
    (data11=0000000F052602D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0000000F052602D0)
    (data1_val=0000000F052602D0)
    (data2_val=0000000F052602D0)
    (data3_val=0000000F052602D0)
    (data4_val=0000000F052602D0)
    (data5_val=0000000F052602D0)
    (data8_val=0000000F052602D0)
    (data9_val=0000000F052602D0)
    (data10_val=0000000F052602D0)
    (data11_val=0000000F052602D0)
target=30, binarySearch=[30, 5065]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=0000000F052620D0)
    (data1_def=0000000F052620D0)
    (data2_def=0000000F052620D0)
    (data3_def=0000000F052620D0)
    (data4_def=0000000F052620D0)
    (data5_def=0000000F052620D0)
    (data8_def=0000000F052620D0)
    (data9_def=0000000F052620D0)
   (data10_def=0000000F052620D0)
    (data11_def=0000000F052620D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0000000F052620D0)
    (data1=0000000F052620D0)
    (data2=0000000F052620D0)
    (data3=0000000F052620D0)
    (data4=0000000F052620D0)
    (data5=0000000F052620D0)
    (data8=0000000F052620D0)
    (data9=0000000F052620D0)
    (data10=0000000F052620D0)
    (data11=0000000F052620D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0000000F052620D0)
    (data1_val=0000000F052620D0)
    (data2_val=0000000F052620D0)
    (data3_val=0000000F052620D0)
    (data4_val=0000000F052620D0)
    (data5_val=0000000F052620D0)
    (data8_val=0000000F052620D0)
    (data9_val=0000000F052620D0)
    (data10_val=0000000F052620D0)
    (data11_val=0000000F052620D0)
target=62, binarySearch=[62, 9221]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=0000000F05265CD0)
    (data1_def=0000000F05265CD0)
    (data2_def=0000000F05265CD0)
    (data3_def=0000000F05265CD0)
    (data4_def=0000000F05265CD0)
    (data5_def=0000000F05265CD0)
    (data8_def=0000000F05265CD0)
    (data9_def=0000000F05265CD0)
   (data10_def=0000000F05265CD0)
    (data11_def=0000000F05265CD0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0000000F05265CD0)
    (data1=0000000F05265CD0)
    (data2=0000000F05265CD0)
    (data3=0000000F05265CD0)
    (data4=0000000F05265CD0)
    (data5=0000000F05265CD0)
    (data8=0000000F05265CD0)
    (data9=0000000F05265CD0)
    (data10=0000000F05265CD0)
    (data11=0000000F05265CD0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0000000F05265CD0)
    (data1_val=0000000F05265CD0)
    (data2_val=0000000F05265CD0)
    (data3_val=0000000F05265CD0)
    (data4_val=0000000F05265CD0)
    (data5_val=0000000F05265CD0)
    (data8_val=0000000F05265CD0)
    (data9_val=0000000F05265CD0)
    (data10_val=0000000F05265CD0)
    (data11_val=0000000F05265CD0)
target=126, binarySearch=[126, 1289]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=0000000F0526D4D0)
    (data1_def=0000000F0526D4D0)
    (data2_def=0000000F0526D4D0)
    (data3_def=0000000F0526D4D0)
    (data4_def=0000000F0526D4D0)
    (data5_def=0000000F0526D4D0)
    (data8_def=0000000F0526D4D0)
    (data9_def=0000000F0526D4D0)
   (data10_def=0000000F0526D4D0)
    (data11_def=0000000F0526D4D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0000000F0526D4D0)
    (data1=0000000F0526D4D0)
    (data2=0000000F0526D4D0)
    (data3=0000000F0526D4D0)
    (data4=0000000F0526D4D0)
    (data5=0000000F0526D4D0)
    (data8=0000000F0526D4D0)
    (data9=0000000F0526D4D0)
    (data10=0000000F0526D4D0)
    (data11=0000000F0526D4D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0000000F0526D4D0)
    (data1_val=0000000F0526D4D0)
    (data2_val=0000000F0526D4D0)
    (data3_val=0000000F0526D4D0)
    (data4_val=0000000F0526D4D0)
    (data5_val=0000000F0526D4D0)
    (data8_val=0000000F0526D4D0)
    (data9_val=0000000F0526D4D0)
    (data10_val=0000000F0526D4D0)
    (data11_val=0000000F0526D4D0)
target=254, binarySearch=[254, 8763]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=6.388351600 sec.
