============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=4951 / record(s)=10000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=5002 / record(s)=10000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=4984 / record(s)=10000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=10000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=3333 / record(s)=10000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=10000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=4976 / record(s)=10000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.003003800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.003002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.011011700 sec.
* Average time     = 0.001573100 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.003003800 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.004003600 sec.
* Average time     = 0.000571943 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000999100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001002700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.005004700 sec.
* Average time     = 0.000714957 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001002700 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.003002900 sec.
* Average time     = 0.000428986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.004003800 sec.
* Average time     = 0.000571971 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.006005200 sec.
* Average time     = 0.000857886 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.213204100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.212192700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.219209100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.332316500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.064060700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.231219900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 1.272203000 sec.
* Average time     = 0.181743286 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.332316500 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.230219400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.182174200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.177168400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.244232000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.274259900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 1.109055100 sec.
* Average time     = 0.158436443 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.274259900 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.119113500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.126120000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.123117300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.182173300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.060057200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.154146600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.764727900 sec.
* Average time     = 0.109246843 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.182173300 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.005005000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1922616 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.005004700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1902755 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.006005600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1895908 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=494802 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.004003800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1474414 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=514605 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.005004700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1903279 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.028026700 sec.
* Average time     = 0.004003814 sec.
* Min time         = 0.001001100 sec.
* Max time         = 0.006005600 sec.
* Total Swapped    =  10108379 count(s)
* Average  Swapped =   1444054 count(s)
* Min Swapped      =    494802 count(s)
* Max Swapped      =   1922616 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57500 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57587 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57584 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=18345 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=7303 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=58823 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.006006400 sec.
* Average time     = 0.000858057 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =    257142 count(s)
* Average  Swapped =     36734 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     58823 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.153145500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.124117900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.119113500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.252240200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.191697900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 0.840315000 sec.
* Average time     = 0.120045000 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.252240200 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000500600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33719 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000500600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33677 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33444 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000500300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000500500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=36402 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.003002900 sec.
* Average time     = 0.000428986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000900 sec.
* Total Swapped    =    152242 count(s)
* Average  Swapped =     21748 count(s)
* Min Swapped      =      3333 count(s)
* Max Swapped      =     36402 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.124627000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.123627900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9995 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.127134300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.125132200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.124627600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.123627300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.123723000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9989 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.872499300 sec.
* Average time     = 0.124642757 sec.
* Min time         = 0.123627300 sec.
* Max time         = 0.127134300 sec.
* Total Swapped    =     48300 count(s)
* Average  Swapped =      6900 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002502300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129635 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129583 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002002000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129778 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.002503000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=218680 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.002002000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=116627 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=213143 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002504100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=123006 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.015517300 sec.
* Average time     = 0.002216757 sec.
* Min time         = 0.002001800 sec.
* Max time         = 0.002504100 sec.
* Total Swapped    =   1060452 count(s)
* Average  Swapped =    151493 count(s)
* Min Swapped      =    116627 count(s)
* Max Swapped      =    218680 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.118616100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9985 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.119114700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9987 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.115623400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9983 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.252777700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.191895200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9994 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.798027100 sec.
* Average time     = 0.114003871 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.252777700 sec.
* Total Swapped    =     59947 count(s)
* Average  Swapped =      8563 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001504400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48473 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48925 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48799 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000500600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=37222 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=5156 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000500600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49469 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.004507900 sec.
* Average time     = 0.000643986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001504400 sec.
* Total Swapped    =    238044 count(s)
* Average  Swapped =     34006 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     49469 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.074084100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58291 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.074582700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58193 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.074084400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58188 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.202207000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=60442 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.136146600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58404 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.561104800 sec.
* Average time     = 0.080157829 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.202207000 sec.
* Total Swapped    =    303524 count(s)
* Average  Swapped =     43360 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     60442 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31152 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000500600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31250 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31256 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000500000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=6022 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1024 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33844 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.004003800 sec.
* Average time     = 0.000571971 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001700 sec.
* Total Swapped    =    134548 count(s)
* Average  Swapped =     19221 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     33844 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000500600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9996 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000500600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9998 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.002002100 sec.
* Average time     = 0.000286014 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000900 sec.
* Total Swapped    =     49997 count(s)
* Average  Swapped =      7142 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     10000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 10000 Count(s)
Total Array size   = 800000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.011011700/  0.001573100/  0.000000000/  0.003003800
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.004003600/  0.000571943/  0.000000000/  0.001001200
- std::sort(inline-func):   0.005004700/  0.000714957/  0.000000000/  0.001002700
- std::sort(functor):       0.003002900/  0.000428986/  0.000000000/  0.001001200
- std::sort(lambda):        0.004003800/  0.000571971/  0.000000000/  0.001001200
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.006005200/  0.000857886/  0.000000000/  0.001001200
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           1.272203000/  0.181743286/  0.000000000/  0.332316500  162016591/   23145227/          0/   49985001
- Shaker sort<S>:           1.109055100/  0.158436443/  0.000000000/  0.274259900  162016591/   23145227/          0/   49985001
- Odd-Even sort<S>:         0.764727900/  0.109246843/  0.000000000/  0.182173300  162016591/   23145227/          0/   49985001
- Shear sort:               0.028026700/  0.004003814/  0.001001100/  0.006005600   10108379/    1444054/     494802/    1922616
- Comb sort:                0.006006400/  0.000858057/  0.000000000/  0.001001200     257142/      36734/          0/      58823
- Gnome sort<S>:            0.840315000/  0.120045000/  0.000000000/  0.252240200  162016591/   23145227/          0/   49985001
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.003002900/  0.000428986/  0.000000000/  0.001000900     152242/      21748/       3333/      36402
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.872499300/  0.124642757/  0.123627300/  0.127134300      48300/       6900/          0/       9995
- Heap sort:                0.015517300/  0.002216757/  0.002001800/  0.002504100    1060452/     151493/     116627/     218680
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.798027100/  0.114003871/  0.000000000/  0.252777700      59947/       8563/          0/       9999
- Shell sort:               0.004507900/  0.000643986/  0.000000000/  0.001504400     238044/      34006/          0/      49469
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.561104800/  0.080157829/  0.000000000/  0.202207000     303524/      43360/          0/      60442
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.004003800/  0.000571971/  0.000000000/  0.001001700     134548/      19221/          0/      33844
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.002002100/  0.000286014/  0.000000000/  0.001000900      49997/       7142/          0/      10000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=31152)
(result1=31152)
(result3=31152)
(result4=31152)
(result5=31152)
(result6=31152)
(result8=31152)
(result9=31152)
(result10=31152)
(result11=31095)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=0000000000000000)
    (data1_def=0000000000000000)
    (data2_def=0000000000000000)
    (data3_def=0000000000000000)
    (data4_def=0000000000000000)
    (data5_def=0000000000000000)
    (data8_def=0000000000000000)
    (data9_def=0000000000000000)
    (data10_def=0000000000000000)
    (data11_def=0000000000000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0000000000000000)
    (data1=0000000000000000)
    (data2=0000000000000000)
    (data3=0000000000000000)
    (data4=0000000000000000)
    (data5=0000000000000000)
    (data8=0000000000000000)
    (data9=0000000000000000)
    (data10=0000000000000000)
    (data11=0000000000000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0000000000000000)
    (data1_val=0000000000000000)
    (data2_val=0000000000000000)
    (data3_val=0000000000000000)
    (data4_val=0000000000000000)
    (data5_val=0000000000000000)
    (data8_val=0000000000000000)
    (data9_val=0000000000000000)
    (data10_val=0000000000000000)
    (data11_val=0000000000000000)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000061A56BC290)
    (data1_def=00000061A56BC290)
    (data2_def=00000061A56BC290)
    (data3_def=00000061A56BC290)
    (data4_def=00000061A56BC290)
    (data5_def=00000061A56BC290)
    (data8_def=00000061A56BC290)
    (data9_def=00000061A56BC290)
    (data10_def=00000061A56BC290)
    (data11_def=00000061A56BC290)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000061A56BC290)
    (data1=00000061A56BC290)
    (data2=00000061A56BC290)
    (data3=00000061A56BC290)
    (data4=00000061A56BC290)
    (data5=00000061A56BC290)
    (data8=00000061A56BC290)
    (data9=00000061A56BC290)
    (data10=00000061A56BC290)
    (data11=00000061A56BC290)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000061A56BC290)
    (data1_val=00000061A56BC290)
    (data2_val=00000061A56BC290)
    (data3_val=00000061A56BC290)
    (data4_val=00000061A56BC290)
    (data5_val=00000061A56BC290)
    (data8_val=00000061A56BC290)
    (data9_val=00000061A56BC290)
    (data10_val=00000061A56BC290)
    (data11_val=00000061A56BC290)
target=0, linearSearch=[0, 2342]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000061A5699A60)
    (data1_def=00000061A5699A60)
    (data2_def=00000061A5699A60)
    (data3_def=00000061A5699A60)
    (data4_def=00000061A5699A60)
    (data5_def=00000061A5699A60)
    (data8_def=00000061A5699A60)
    (data9_def=00000061A5699A60)
    (data10_def=00000061A5699A60)
    (data11_def=00000061A5699A60)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000061A5699A60)
    (data1=00000061A5699A60)
    (data2=00000061A5699A60)
    (data3=00000061A5699A60)
    (data4=00000061A5699A60)
    (data5=00000061A5699A60)
    (data8=00000061A5699A60)
    (data9=00000061A5699A60)
    (data10=00000061A5699A60)
    (data11=00000061A5699A60)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000061A5699A60)
    (data1_val=00000061A5699A60)
    (data2_val=00000061A5699A60)
    (data3_val=00000061A5699A60)
    (data4_val=00000061A5699A60)
    (data5_val=00000061A5699A60)
    (data8_val=00000061A5699A60)
    (data9_val=00000061A5699A60)
    (data10_val=00000061A5699A60)
    (data11_val=00000061A5699A60)
target=2, linearSearch=[2, 575]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000061A56A24D0)
    (data1_def=00000061A56A24D0)
    (data2_def=00000061A56A24D0)
    (data3_def=00000061A56A24D0)
    (data4_def=00000061A56A24D0)
    (data5_def=00000061A56A24D0)
    (data8_def=00000061A56A24D0)
    (data9_def=00000061A56A24D0)
    (data10_def=00000061A56A24D0)
    (data11_def=00000061A56A24D0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000061A56A24D0)
    (data1=00000061A56A24D0)
    (data2=00000061A56A24D0)
    (data3=00000061A56A24D0)
    (data4=00000061A56A24D0)
    (data5=00000061A56A24D0)
    (data8=00000061A56A24D0)
    (data9=00000061A56A24D0)
    (data10=00000061A56A24D0)
    (data11=00000061A56A24D0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000061A56A24D0)
    (data1_val=00000061A56A24D0)
    (data2_val=00000061A56A24D0)
    (data3_val=00000061A56A24D0)
    (data4_val=00000061A56A24D0)
    (data5_val=00000061A56A24D0)
    (data8_val=00000061A56A24D0)
    (data9_val=00000061A56A24D0)
    (data10_val=00000061A56A24D0)
    (data11_val=00000061A56A24D0)
target=6, linearSearch=[6, 1018]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000061A56B9860)
    (data1_def=00000061A56B9860)
    (data2_def=00000061A56B9860)
    (data3_def=00000061A56B9860)
    (data4_def=00000061A56B9860)
    (data5_def=00000061A56B9860)
    (data8_def=00000061A56B9860)
    (data9_def=00000061A56B9860)
    (data10_def=00000061A56B9860)
    (data11_def=00000061A56B9860)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000061A56B9860)
    (data1=00000061A56B9860)
    (data2=00000061A56B9860)
    (data3=00000061A56B9860)
    (data4=00000061A56B9860)
    (data5=00000061A56B9860)
    (data8=00000061A56B9860)
    (data9=00000061A56B9860)
    (data10=00000061A56B9860)
    (data11=00000061A56B9860)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000061A56B9860)
    (data1_val=00000061A56B9860)
    (data2_val=00000061A56B9860)
    (data3_val=00000061A56B9860)
    (data4_val=00000061A56B9860)
    (data5_val=00000061A56B9860)
    (data8_val=00000061A56B9860)
    (data9_val=00000061A56B9860)
    (data10_val=00000061A56B9860)
    (data11_val=00000061A56B9860)
target=14, linearSearch=[14, 2207]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000061A56ACCA0)
    (data1_def=00000061A56ACCA0)
    (data2_def=00000061A56ACCA0)
    (data3_def=00000061A56ACCA0)
    (data4_def=00000061A56ACCA0)
    (data5_def=00000061A56ACCA0)
    (data8_def=00000061A56ACCA0)
    (data9_def=00000061A56ACCA0)
    (data10_def=00000061A56ACCA0)
    (data11_def=00000061A56ACCA0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000061A56ACCA0)
    (data1=00000061A56ACCA0)
    (data2=00000061A56ACCA0)
    (data3=00000061A56ACCA0)
    (data4=00000061A56ACCA0)
    (data5=00000061A56ACCA0)
    (data8=00000061A56ACCA0)
    (data9=00000061A56ACCA0)
    (data10=00000061A56ACCA0)
    (data11=00000061A56ACCA0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000061A56ACCA0)
    (data1_val=00000061A56ACCA0)
    (data2_val=00000061A56ACCA0)
    (data3_val=00000061A56ACCA0)
    (data4_val=00000061A56ACCA0)
    (data5_val=00000061A56ACCA0)
    (data8_val=00000061A56ACCA0)
    (data9_val=00000061A56ACCA0)
    (data10_val=00000061A56ACCA0)
    (data11_val=00000061A56ACCA0)
target=30, linearSearch=[30, 1555]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000061A56A1940)
    (data1_def=00000061A56A1940)
    (data2_def=00000061A56A1940)
    (data3_def=00000061A56A1940)
    (data4_def=00000061A56A1940)
    (data5_def=00000061A56A1940)
    (data8_def=00000061A56A1940)
    (data9_def=00000061A56A1940)
    (data10_def=00000061A56A1940)
    (data11_def=00000061A56A1940)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000061A56A1940)
    (data1=00000061A56A1940)
    (data2=00000061A56A1940)
    (data3=00000061A56A1940)
    (data4=00000061A56A1940)
    (data5=00000061A56A1940)
    (data8=00000061A56A1940)
    (data9=00000061A56A1940)
    (data10=00000061A56A1940)
    (data11=00000061A56A1940)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000061A56A1940)
    (data1_val=00000061A56A1940)
    (data2_val=00000061A56A1940)
    (data3_val=00000061A56A1940)
    (data4_val=00000061A56A1940)
    (data5_val=00000061A56A1940)
    (data8_val=00000061A56A1940)
    (data9_val=00000061A56A1940)
    (data10_val=00000061A56A1940)
    (data11_val=00000061A56A1940)
target=62, linearSearch=[62, 981]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000061A56A7980)
    (data1_def=00000061A56A7980)
    (data2_def=00000061A56A7980)
    (data3_def=00000061A56A7980)
    (data4_def=00000061A56A7980)
    (data5_def=00000061A56A7980)
    (data8_def=00000061A56A7980)
    (data9_def=00000061A56A7980)
    (data10_def=00000061A56A7980)
    (data11_def=00000061A56A7980)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000061A56A7980)
    (data1=00000061A56A7980)
    (data2=00000061A56A7980)
    (data3=00000061A56A7980)
    (data4=00000061A56A7980)
    (data5=00000061A56A7980)
    (data8=00000061A56A7980)
    (data9=00000061A56A7980)
    (data10=00000061A56A7980)
    (data11=00000061A56A7980)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000061A56A7980)
    (data1_val=00000061A56A7980)
    (data2_val=00000061A56A7980)
    (data3_val=00000061A56A7980)
    (data4_val=00000061A56A7980)
    (data5_val=00000061A56A7980)
    (data8_val=00000061A56A7980)
    (data9_val=00000061A56A7980)
    (data10_val=00000061A56A7980)
    (data11_val=00000061A56A7980)
target=126, linearSearch=[126, 1289]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000061A572DBC0)
    (data1_def=00000061A572DBC0)
    (data2_def=00000061A572DBC0)
    (data3_def=00000061A572DBC0)
    (data4_def=00000061A572DBC0)
    (data5_def=00000061A572DBC0)
    (data8_def=00000061A572DBC0)
    (data9_def=00000061A572DBC0)
    (data10_def=00000061A572DBC0)
    (data11_def=00000061A572DBC0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000061A572DBC0)
    (data1=00000061A572DBC0)
    (data2=00000061A572DBC0)
    (data3=00000061A572DBC0)
    (data4=00000061A572DBC0)
    (data5=00000061A572DBC0)
    (data8=00000061A572DBC0)
    (data9=00000061A572DBC0)
    (data10=00000061A572DBC0)
    (data11=00000061A572DBC0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000061A572DBC0)
    (data1_val=00000061A572DBC0)
    (data2_val=00000061A572DBC0)
    (data3_val=00000061A572DBC0)
    (data4_val=00000061A572DBC0)
    (data5_val=00000061A572DBC0)
    (data8_val=00000061A572DBC0)
    (data9_val=00000061A572DBC0)
    (data10_val=00000061A572DBC0)
    (data11_val=00000061A572DBC0)
target=254, linearSearch=[254, 8157]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=0000000000000000)
    (data1_def=0000000000000000)
    (data2_def=0000000000000000)
    (data3_def=0000000000000000)
    (data4_def=0000000000000000)
    (data5_def=0000000000000000)
    (data8_def=0000000000000000)
    (data9_def=0000000000000000)
   (data10_def=0000000000000000)
    (data11_def=0000000000000000)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0000000000000000)
    (data1=0000000000000000)
    (data2=0000000000000000)
    (data3=0000000000000000)
    (data4=0000000000000000)
    (data5=0000000000000000)
    (data8=0000000000000000)
    (data9=0000000000000000)
    (data10=0000000000000000)
    (data11=0000000000000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0000000000000000)
    (data1_val=0000000000000000)
    (data2_val=0000000000000000)
    (data3_val=0000000000000000)
    (data4_val=0000000000000000)
    (data5_val=0000000000000000)
    (data8_val=0000000000000000)
    (data9_val=0000000000000000)
    (data10_val=0000000000000000)
    (data11_val=0000000000000000)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000061A568E6B0)
    (data1_def=00000061A568E6B0)
    (data2_def=00000061A568E6B0)
    (data3_def=00000061A568E6B0)
    (data4_def=00000061A568E6B0)
    (data5_def=00000061A568E6B0)
    (data8_def=00000061A568E6B0)
    (data9_def=00000061A568E6B0)
   (data10_def=00000061A568E6B0)
    (data11_def=00000061A568E6B0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000061A568E6B0)
    (data1=00000061A568E6B0)
    (data2=00000061A568E6B0)
    (data3=00000061A568E6B0)
    (data4=00000061A568E6B0)
    (data5=00000061A568E6B0)
    (data8=00000061A568E6B0)
    (data9=00000061A568E6B0)
    (data10=00000061A568E6B0)
    (data11=00000061A568E6B0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000061A568E6B0)
    (data1_val=00000061A568E6B0)
    (data2_val=00000061A568E6B0)
    (data3_val=00000061A568E6B0)
    (data4_val=00000061A568E6B0)
    (data5_val=00000061A568E6B0)
    (data8_val=00000061A568E6B0)
    (data9_val=00000061A568E6B0)
    (data10_val=00000061A568E6B0)
    (data11_val=00000061A568E6B0)
target=0, binarySearch=[0, 2342]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000061A568E890)
    (data1_def=00000061A568E890)
    (data2_def=00000061A568E890)
    (data3_def=00000061A568E890)
    (data4_def=00000061A568E890)
    (data5_def=00000061A568E890)
    (data8_def=00000061A568E890)
    (data9_def=00000061A568E890)
   (data10_def=00000061A568E890)
    (data11_def=00000061A568E890)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000061A568E890)
    (data1=00000061A568E890)
    (data2=00000061A568E890)
    (data3=00000061A568E890)
    (data4=00000061A568E890)
    (data5=00000061A568E890)
    (data8=00000061A568E890)
    (data9=00000061A568E890)
    (data10=00000061A568E890)
    (data11=00000061A568E890)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000061A568E890)
    (data1_val=00000061A568E890)
    (data2_val=00000061A568E890)
    (data3_val=00000061A568E890)
    (data4_val=00000061A568E890)
    (data5_val=00000061A568E890)
    (data8_val=00000061A568E890)
    (data9_val=00000061A568E890)
    (data10_val=00000061A568E890)
    (data11_val=00000061A568E890)
target=2, binarySearch=[2, 6831]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000061A568EC50)
    (data1_def=00000061A568EC50)
    (data2_def=00000061A568EC50)
    (data3_def=00000061A568EC50)
    (data4_def=00000061A568EC50)
    (data5_def=00000061A568EC50)
    (data8_def=00000061A568EC50)
    (data9_def=00000061A568EC50)
   (data10_def=00000061A568EC50)
    (data11_def=00000061A568EC50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000061A568EC50)
    (data1=00000061A568EC50)
    (data2=00000061A568EC50)
    (data3=00000061A568EC50)
    (data4=00000061A568EC50)
    (data5=00000061A568EC50)
    (data8=00000061A568EC50)
    (data9=00000061A568EC50)
    (data10=00000061A568EC50)
    (data11=00000061A568EC50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000061A568EC50)
    (data1_val=00000061A568EC50)
    (data2_val=00000061A568EC50)
    (data3_val=00000061A568EC50)
    (data4_val=00000061A568EC50)
    (data5_val=00000061A568EC50)
    (data8_val=00000061A568EC50)
    (data9_val=00000061A568EC50)
    (data10_val=00000061A568EC50)
    (data11_val=00000061A568EC50)
target=6, binarySearch=[6, 1018]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000061A568F3D0)
    (data1_def=00000061A568F3D0)
    (data2_def=00000061A568F3D0)
    (data3_def=00000061A568F3D0)
    (data4_def=00000061A568F3D0)
    (data5_def=00000061A568F3D0)
    (data8_def=00000061A568F3D0)
    (data9_def=00000061A568F3D0)
   (data10_def=00000061A568F3D0)
    (data11_def=00000061A568F3D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000061A568F3D0)
    (data1=00000061A568F3D0)
    (data2=00000061A568F3D0)
    (data3=00000061A568F3D0)
    (data4=00000061A568F3D0)
    (data5=00000061A568F3D0)
    (data8=00000061A568F3D0)
    (data9=00000061A568F3D0)
    (data10=00000061A568F3D0)
    (data11=00000061A568F3D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000061A568F3D0)
    (data1_val=00000061A568F3D0)
    (data2_val=00000061A568F3D0)
    (data3_val=00000061A568F3D0)
    (data4_val=00000061A568F3D0)
    (data5_val=00000061A568F3D0)
    (data8_val=00000061A568F3D0)
    (data9_val=00000061A568F3D0)
    (data10_val=00000061A568F3D0)
    (data11_val=00000061A568F3D0)
target=14, binarySearch=[14, 4706]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000061A56902D0)
    (data1_def=00000061A56902D0)
    (data2_def=00000061A56902D0)
    (data3_def=00000061A56902D0)
    (data4_def=00000061A56902D0)
    (data5_def=00000061A56902D0)
    (data8_def=00000061A56902D0)
    (data9_def=00000061A56902D0)
   (data10_def=00000061A56902D0)
    (data11_def=00000061A56902D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000061A56902D0)
    (data1=00000061A56902D0)
    (data2=00000061A56902D0)
    (data3=00000061A56902D0)
    (data4=00000061A56902D0)
    (data5=00000061A56902D0)
    (data8=00000061A56902D0)
    (data9=00000061A56902D0)
    (data10=00000061A56902D0)
    (data11=00000061A56902D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000061A56902D0)
    (data1_val=00000061A56902D0)
    (data2_val=00000061A56902D0)
    (data3_val=00000061A56902D0)
    (data4_val=00000061A56902D0)
    (data5_val=00000061A56902D0)
    (data8_val=00000061A56902D0)
    (data9_val=00000061A56902D0)
    (data10_val=00000061A56902D0)
    (data11_val=00000061A56902D0)
target=30, binarySearch=[30, 5065]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000061A56920D0)
    (data1_def=00000061A56920D0)
    (data2_def=00000061A56920D0)
    (data3_def=00000061A56920D0)
    (data4_def=00000061A56920D0)
    (data5_def=00000061A56920D0)
    (data8_def=00000061A56920D0)
    (data9_def=00000061A56920D0)
   (data10_def=00000061A56920D0)
    (data11_def=00000061A56920D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000061A56920D0)
    (data1=00000061A56920D0)
    (data2=00000061A56920D0)
    (data3=00000061A56920D0)
    (data4=00000061A56920D0)
    (data5=00000061A56920D0)
    (data8=00000061A56920D0)
    (data9=00000061A56920D0)
    (data10=00000061A56920D0)
    (data11=00000061A56920D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000061A56920D0)
    (data1_val=00000061A56920D0)
    (data2_val=00000061A56920D0)
    (data3_val=00000061A56920D0)
    (data4_val=00000061A56920D0)
    (data5_val=00000061A56920D0)
    (data8_val=00000061A56920D0)
    (data9_val=00000061A56920D0)
    (data10_val=00000061A56920D0)
    (data11_val=00000061A56920D0)
target=62, binarySearch=[62, 9221]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000061A5695CD0)
    (data1_def=00000061A5695CD0)
    (data2_def=00000061A5695CD0)
    (data3_def=00000061A5695CD0)
    (data4_def=00000061A5695CD0)
    (data5_def=00000061A5695CD0)
    (data8_def=00000061A5695CD0)
    (data9_def=00000061A5695CD0)
   (data10_def=00000061A5695CD0)
    (data11_def=00000061A5695CD0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000061A5695CD0)
    (data1=00000061A5695CD0)
    (data2=00000061A5695CD0)
    (data3=00000061A5695CD0)
    (data4=00000061A5695CD0)
    (data5=00000061A5695CD0)
    (data8=00000061A5695CD0)
    (data9=00000061A5695CD0)
    (data10=00000061A5695CD0)
    (data11=00000061A5695CD0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000061A5695CD0)
    (data1_val=00000061A5695CD0)
    (data2_val=00000061A5695CD0)
    (data3_val=00000061A5695CD0)
    (data4_val=00000061A5695CD0)
    (data5_val=00000061A5695CD0)
    (data8_val=00000061A5695CD0)
    (data9_val=00000061A5695CD0)
    (data10_val=00000061A5695CD0)
    (data11_val=00000061A5695CD0)
target=126, binarySearch=[126, 1289]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000061A569D4D0)
    (data1_def=00000061A569D4D0)
    (data2_def=00000061A569D4D0)
    (data3_def=00000061A569D4D0)
    (data4_def=00000061A569D4D0)
    (data5_def=00000061A569D4D0)
    (data8_def=00000061A569D4D0)
    (data9_def=00000061A569D4D0)
   (data10_def=00000061A569D4D0)
    (data11_def=00000061A569D4D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000061A569D4D0)
    (data1=00000061A569D4D0)
    (data2=00000061A569D4D0)
    (data3=00000061A569D4D0)
    (data4=00000061A569D4D0)
    (data5=00000061A569D4D0)
    (data8=00000061A569D4D0)
    (data9=00000061A569D4D0)
    (data10=00000061A569D4D0)
    (data11=00000061A569D4D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000061A569D4D0)
    (data1_val=00000061A569D4D0)
    (data2_val=00000061A569D4D0)
    (data3_val=00000061A569D4D0)
    (data4_val=00000061A569D4D0)
    (data5_val=00000061A569D4D0)
    (data8_val=00000061A569D4D0)
    (data9_val=00000061A569D4D0)
    (data10_val=00000061A569D4D0)
    (data11_val=00000061A569D4D0)
target=254, binarySearch=[254, 8763]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=6.356083600 sec.
