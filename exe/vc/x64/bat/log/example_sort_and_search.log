============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=4951 / record(s)=10000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=5002 / record(s)=10000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=4984 / record(s)=10000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=10000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=3333 / record(s)=10000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=10000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=4976 / record(s)=10000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.003003800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.003004400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.011011100 sec.
* Average time     = 0.001573014 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.003004400 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001003200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.005006700 sec.
* Average time     = 0.000715243 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001003200 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001002300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.005005900 sec.
* Average time     = 0.000715129 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001002300 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.001001100 sec.
* Average time     = 0.000143014 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001100 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000997900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.005003200 sec.
* Average time     = 0.000714743 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001002900 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001500 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002001400 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001002400 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001002300 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001002000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.008010200 sec.
* Average time     = 0.001144314 sec.
* Min time         = 0.001000300 sec.
* Max time         = 0.002001400 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.236225200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.237226300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.243228700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.273260300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.063060000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.255241600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 1.308242100 sec.
* Average time     = 0.186891729 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.273260300 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.200191500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.176167200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.173163400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.241231000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.225214100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 1.015967200 sec.
* Average time     = 0.145138171 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.241231000 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.126118300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.125118600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.126120000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.179170500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.060057100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.153145900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.769730400 sec.
* Average time     = 0.109961486 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.179170500 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.005004700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1892312 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.005004600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1873730 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.005004700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1860168 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=485134 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.003002600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1465201 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=485527 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.005004600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1882044 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.026024500 sec.
* Average time     = 0.003717786 sec.
* Min time         = 0.001001200 sec.
* Max time         = 0.005004700 sec.
* Total Swapped    =   9944116 count(s)
* Average  Swapped =   1420588 count(s)
* Min Swapped      =    485134 count(s)
* Max Swapped      =   1892312 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57500 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002001500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57587 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57584 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=18345 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=7303 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=58823 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.008007600 sec.
* Average time     = 0.001143943 sec.
* Min time         = 0.001000800 sec.
* Max time         = 0.002001500 sec.
* Total Swapped    =    257142 count(s)
* Average  Swapped =     36734 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     58823 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.154147600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.120113700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.120115000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.251239300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.186176900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 0.831792500 sec.
* Average time     = 0.118827500 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.251239300 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33719 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33677 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33444 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=36402 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.003002900 sec.
* Average time     = 0.000428986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =    152242 count(s)
* Average  Swapped =     21748 count(s)
* Min Swapped      =      3333 count(s)
* Max Swapped      =     36402 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.121115100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.121115000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9995 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.122115400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.122116900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.122116200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.124125400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.123108600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9989 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.855812600 sec.
* Average time     = 0.122258943 sec.
* Min time         = 0.121115000 sec.
* Max time         = 0.124125400 sec.
* Total Swapped    =     48300 count(s)
* Average  Swapped =      6900 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002002300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129635 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003003000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129583 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129778 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=218680 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=116627 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=213143 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=123006 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.015013500 sec.
* Average time     = 0.002144786 sec.
* Min time         = 0.002000600 sec.
* Max time         = 0.003003000 sec.
* Total Swapped    =   1060452 count(s)
* Average  Swapped =    151493 count(s)
* Min Swapped      =    116627 count(s)
* Max Swapped      =    218680 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.116111000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9985 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.116110100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9987 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.115109800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9983 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.247234600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.187178300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9994 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.781743800 sec.
* Average time     = 0.111677686 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.247234600 sec.
* Total Swapped    =     59947 count(s)
* Average  Swapped =      8563 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48473 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48925 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48799 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=37222 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=5156 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49469 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.005004500 sec.
* Average time     = 0.000714929 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000900 sec.
* Total Swapped    =    238044 count(s)
* Average  Swapped =     34006 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     49469 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.074070000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58291 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.073068200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58193 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.070066400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58188 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.158150500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=60442 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.119113100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58404 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.494468200 sec.
* Average time     = 0.070638314 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.158150500 sec.
* Total Swapped    =    303524 count(s)
* Average  Swapped =     43360 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     60442 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31152 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31250 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31256 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=6022 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1024 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33844 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.003002400 sec.
* Average time     = 0.000428914 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000900 sec.
* Total Swapped    =    134548 count(s)
* Average  Swapped =     19221 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     33844 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9996 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9998 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.003003000 sec.
* Average time     = 0.000429000 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =     49997 count(s)
* Average  Swapped =      7142 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     10000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 10000 Count(s)
Total Array size   = 800000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.011011100/  0.001573014/  0.000000000/  0.003004400
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.005006700/  0.000715243/  0.000000000/  0.001003200
- std::sort(inline-func):   0.005005900/  0.000715129/  0.000000000/  0.001002300
- std::sort(functor):       0.001001100/  0.000143014/  0.000000000/  0.001001100
- std::sort(lambda):        0.005003200/  0.000714743/  0.000000000/  0.001002900
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.008010200/  0.001144314/  0.001000300/  0.002001400
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           1.308242100/  0.186891729/  0.000000000/  0.273260300  162016591/   23145227/          0/   49985001
- Shaker sort<S>:           1.015967200/  0.145138171/  0.000000000/  0.241231000  162016591/   23145227/          0/   49985001
- Odd-Even sort<S>:         0.769730400/  0.109961486/  0.000000000/  0.179170500  162016591/   23145227/          0/   49985001
- Shear sort:               0.026024500/  0.003717786/  0.001001200/  0.005004700    9944116/    1420588/     485134/    1892312
- Comb sort:                0.008007600/  0.001143943/  0.001000800/  0.002001500     257142/      36734/          0/      58823
- Gnome sort<S>:            0.831792500/  0.118827500/  0.000000000/  0.251239300  162016591/   23145227/          0/   49985001
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.003002900/  0.000428986/  0.000000000/  0.001001200     152242/      21748/       3333/      36402
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.855812600/  0.122258943/  0.121115000/  0.124125400      48300/       6900/          0/       9995
- Heap sort:                0.015013500/  0.002144786/  0.002000600/  0.003003000    1060452/     151493/     116627/     218680
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.781743800/  0.111677686/  0.000000000/  0.247234600      59947/       8563/          0/       9999
- Shell sort:               0.005004500/  0.000714929/  0.000000000/  0.001000900     238044/      34006/          0/      49469
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.494468200/  0.070638314/  0.000000000/  0.158150500     303524/      43360/          0/      60442
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.003002400/  0.000428914/  0.000000000/  0.001000900     134548/      19221/          0/      33844
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.003003000/  0.000429000/  0.000000000/  0.001001200      49997/       7142/          0/      10000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=31152)
(result1=31152)
(result3=31152)
(result4=31152)
(result5=31152)
(result6=31152)
(result8=31152)
(result9=31152)
(result10=31152)
(result11=31095)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=0000000000000000)
    (data1_def=0000000000000000)
    (data2_def=0000000000000000)
    (data3_def=0000000000000000)
    (data4_def=0000000000000000)
    (data5_def=0000000000000000)
    (data8_def=0000000000000000)
    (data9_def=0000000000000000)
    (data10_def=0000000000000000)
    (data11_def=0000000000000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0000000000000000)
    (data1=0000000000000000)
    (data2=0000000000000000)
    (data3=0000000000000000)
    (data4=0000000000000000)
    (data5=0000000000000000)
    (data8=0000000000000000)
    (data9=0000000000000000)
    (data10=0000000000000000)
    (data11=0000000000000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0000000000000000)
    (data1_val=0000000000000000)
    (data2_val=0000000000000000)
    (data3_val=0000000000000000)
    (data4_val=0000000000000000)
    (data5_val=0000000000000000)
    (data8_val=0000000000000000)
    (data9_val=0000000000000000)
    (data10_val=0000000000000000)
    (data11_val=0000000000000000)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=000000B89DAECB30)
    (data1_def=000000B89DAECB30)
    (data2_def=000000B89DAECB30)
    (data3_def=000000B89DAECB30)
    (data4_def=000000B89DAECB30)
    (data5_def=000000B89DAECB30)
    (data8_def=000000B89DAECB30)
    (data9_def=000000B89DAECB30)
    (data10_def=000000B89DAECB30)
    (data11_def=000000B89DAECB30)
  linearSearch(*array_shuffle1, search_predicate);
    (data=000000B89DAECB30)
    (data1=000000B89DAECB30)
    (data2=000000B89DAECB30)
    (data3=000000B89DAECB30)
    (data4=000000B89DAECB30)
    (data5=000000B89DAECB30)
    (data8=000000B89DAECB30)
    (data9=000000B89DAECB30)
    (data10=000000B89DAECB30)
    (data11=000000B89DAECB30)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=000000B89DAECB30)
    (data1_val=000000B89DAECB30)
    (data2_val=000000B89DAECB30)
    (data3_val=000000B89DAECB30)
    (data4_val=000000B89DAECB30)
    (data5_val=000000B89DAECB30)
    (data8_val=000000B89DAECB30)
    (data9_val=000000B89DAECB30)
    (data10_val=000000B89DAECB30)
    (data11_val=000000B89DAECB30)
target=0, linearSearch=[0, 2342]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=000000B89DACA300)
    (data1_def=000000B89DACA300)
    (data2_def=000000B89DACA300)
    (data3_def=000000B89DACA300)
    (data4_def=000000B89DACA300)
    (data5_def=000000B89DACA300)
    (data8_def=000000B89DACA300)
    (data9_def=000000B89DACA300)
    (data10_def=000000B89DACA300)
    (data11_def=000000B89DACA300)
  linearSearch(*array_shuffle1, search_predicate);
    (data=000000B89DACA300)
    (data1=000000B89DACA300)
    (data2=000000B89DACA300)
    (data3=000000B89DACA300)
    (data4=000000B89DACA300)
    (data5=000000B89DACA300)
    (data8=000000B89DACA300)
    (data9=000000B89DACA300)
    (data10=000000B89DACA300)
    (data11=000000B89DACA300)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=000000B89DACA300)
    (data1_val=000000B89DACA300)
    (data2_val=000000B89DACA300)
    (data3_val=000000B89DACA300)
    (data4_val=000000B89DACA300)
    (data5_val=000000B89DACA300)
    (data8_val=000000B89DACA300)
    (data9_val=000000B89DACA300)
    (data10_val=000000B89DACA300)
    (data11_val=000000B89DACA300)
target=2, linearSearch=[2, 575]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=000000B89DAD2D70)
    (data1_def=000000B89DAD2D70)
    (data2_def=000000B89DAD2D70)
    (data3_def=000000B89DAD2D70)
    (data4_def=000000B89DAD2D70)
    (data5_def=000000B89DAD2D70)
    (data8_def=000000B89DAD2D70)
    (data9_def=000000B89DAD2D70)
    (data10_def=000000B89DAD2D70)
    (data11_def=000000B89DAD2D70)
  linearSearch(*array_shuffle1, search_predicate);
    (data=000000B89DAD2D70)
    (data1=000000B89DAD2D70)
    (data2=000000B89DAD2D70)
    (data3=000000B89DAD2D70)
    (data4=000000B89DAD2D70)
    (data5=000000B89DAD2D70)
    (data8=000000B89DAD2D70)
    (data9=000000B89DAD2D70)
    (data10=000000B89DAD2D70)
    (data11=000000B89DAD2D70)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=000000B89DAD2D70)
    (data1_val=000000B89DAD2D70)
    (data2_val=000000B89DAD2D70)
    (data3_val=000000B89DAD2D70)
    (data4_val=000000B89DAD2D70)
    (data5_val=000000B89DAD2D70)
    (data8_val=000000B89DAD2D70)
    (data9_val=000000B89DAD2D70)
    (data10_val=000000B89DAD2D70)
    (data11_val=000000B89DAD2D70)
target=6, linearSearch=[6, 1018]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=000000B89DAEA100)
    (data1_def=000000B89DAEA100)
    (data2_def=000000B89DAEA100)
    (data3_def=000000B89DAEA100)
    (data4_def=000000B89DAEA100)
    (data5_def=000000B89DAEA100)
    (data8_def=000000B89DAEA100)
    (data9_def=000000B89DAEA100)
    (data10_def=000000B89DAEA100)
    (data11_def=000000B89DAEA100)
  linearSearch(*array_shuffle1, search_predicate);
    (data=000000B89DAEA100)
    (data1=000000B89DAEA100)
    (data2=000000B89DAEA100)
    (data3=000000B89DAEA100)
    (data4=000000B89DAEA100)
    (data5=000000B89DAEA100)
    (data8=000000B89DAEA100)
    (data9=000000B89DAEA100)
    (data10=000000B89DAEA100)
    (data11=000000B89DAEA100)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=000000B89DAEA100)
    (data1_val=000000B89DAEA100)
    (data2_val=000000B89DAEA100)
    (data3_val=000000B89DAEA100)
    (data4_val=000000B89DAEA100)
    (data5_val=000000B89DAEA100)
    (data8_val=000000B89DAEA100)
    (data9_val=000000B89DAEA100)
    (data10_val=000000B89DAEA100)
    (data11_val=000000B89DAEA100)
target=14, linearSearch=[14, 2207]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=000000B89DADD540)
    (data1_def=000000B89DADD540)
    (data2_def=000000B89DADD540)
    (data3_def=000000B89DADD540)
    (data4_def=000000B89DADD540)
    (data5_def=000000B89DADD540)
    (data8_def=000000B89DADD540)
    (data9_def=000000B89DADD540)
    (data10_def=000000B89DADD540)
    (data11_def=000000B89DADD540)
  linearSearch(*array_shuffle1, search_predicate);
    (data=000000B89DADD540)
    (data1=000000B89DADD540)
    (data2=000000B89DADD540)
    (data3=000000B89DADD540)
    (data4=000000B89DADD540)
    (data5=000000B89DADD540)
    (data8=000000B89DADD540)
    (data9=000000B89DADD540)
    (data10=000000B89DADD540)
    (data11=000000B89DADD540)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=000000B89DADD540)
    (data1_val=000000B89DADD540)
    (data2_val=000000B89DADD540)
    (data3_val=000000B89DADD540)
    (data4_val=000000B89DADD540)
    (data5_val=000000B89DADD540)
    (data8_val=000000B89DADD540)
    (data9_val=000000B89DADD540)
    (data10_val=000000B89DADD540)
    (data11_val=000000B89DADD540)
target=30, linearSearch=[30, 1555]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=000000B89DAD21E0)
    (data1_def=000000B89DAD21E0)
    (data2_def=000000B89DAD21E0)
    (data3_def=000000B89DAD21E0)
    (data4_def=000000B89DAD21E0)
    (data5_def=000000B89DAD21E0)
    (data8_def=000000B89DAD21E0)
    (data9_def=000000B89DAD21E0)
    (data10_def=000000B89DAD21E0)
    (data11_def=000000B89DAD21E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=000000B89DAD21E0)
    (data1=000000B89DAD21E0)
    (data2=000000B89DAD21E0)
    (data3=000000B89DAD21E0)
    (data4=000000B89DAD21E0)
    (data5=000000B89DAD21E0)
    (data8=000000B89DAD21E0)
    (data9=000000B89DAD21E0)
    (data10=000000B89DAD21E0)
    (data11=000000B89DAD21E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=000000B89DAD21E0)
    (data1_val=000000B89DAD21E0)
    (data2_val=000000B89DAD21E0)
    (data3_val=000000B89DAD21E0)
    (data4_val=000000B89DAD21E0)
    (data5_val=000000B89DAD21E0)
    (data8_val=000000B89DAD21E0)
    (data9_val=000000B89DAD21E0)
    (data10_val=000000B89DAD21E0)
    (data11_val=000000B89DAD21E0)
target=62, linearSearch=[62, 981]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=000000B89DAD8220)
    (data1_def=000000B89DAD8220)
    (data2_def=000000B89DAD8220)
    (data3_def=000000B89DAD8220)
    (data4_def=000000B89DAD8220)
    (data5_def=000000B89DAD8220)
    (data8_def=000000B89DAD8220)
    (data9_def=000000B89DAD8220)
    (data10_def=000000B89DAD8220)
    (data11_def=000000B89DAD8220)
  linearSearch(*array_shuffle1, search_predicate);
    (data=000000B89DAD8220)
    (data1=000000B89DAD8220)
    (data2=000000B89DAD8220)
    (data3=000000B89DAD8220)
    (data4=000000B89DAD8220)
    (data5=000000B89DAD8220)
    (data8=000000B89DAD8220)
    (data9=000000B89DAD8220)
    (data10=000000B89DAD8220)
    (data11=000000B89DAD8220)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=000000B89DAD8220)
    (data1_val=000000B89DAD8220)
    (data2_val=000000B89DAD8220)
    (data3_val=000000B89DAD8220)
    (data4_val=000000B89DAD8220)
    (data5_val=000000B89DAD8220)
    (data8_val=000000B89DAD8220)
    (data9_val=000000B89DAD8220)
    (data10_val=000000B89DAD8220)
    (data11_val=000000B89DAD8220)
target=126, linearSearch=[126, 1289]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=000000B89DB5E460)
    (data1_def=000000B89DB5E460)
    (data2_def=000000B89DB5E460)
    (data3_def=000000B89DB5E460)
    (data4_def=000000B89DB5E460)
    (data5_def=000000B89DB5E460)
    (data8_def=000000B89DB5E460)
    (data9_def=000000B89DB5E460)
    (data10_def=000000B89DB5E460)
    (data11_def=000000B89DB5E460)
  linearSearch(*array_shuffle1, search_predicate);
    (data=000000B89DB5E460)
    (data1=000000B89DB5E460)
    (data2=000000B89DB5E460)
    (data3=000000B89DB5E460)
    (data4=000000B89DB5E460)
    (data5=000000B89DB5E460)
    (data8=000000B89DB5E460)
    (data9=000000B89DB5E460)
    (data10=000000B89DB5E460)
    (data11=000000B89DB5E460)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=000000B89DB5E460)
    (data1_val=000000B89DB5E460)
    (data2_val=000000B89DB5E460)
    (data3_val=000000B89DB5E460)
    (data4_val=000000B89DB5E460)
    (data5_val=000000B89DB5E460)
    (data8_val=000000B89DB5E460)
    (data9_val=000000B89DB5E460)
    (data10_val=000000B89DB5E460)
    (data11_val=000000B89DB5E460)
target=254, linearSearch=[254, 8157]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=0000000000000000)
    (data1_def=0000000000000000)
    (data2_def=0000000000000000)
    (data3_def=0000000000000000)
    (data4_def=0000000000000000)
    (data5_def=0000000000000000)
    (data8_def=0000000000000000)
    (data9_def=0000000000000000)
   (data10_def=0000000000000000)
    (data11_def=0000000000000000)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0000000000000000)
    (data1=0000000000000000)
    (data2=0000000000000000)
    (data3=0000000000000000)
    (data4=0000000000000000)
    (data5=0000000000000000)
    (data8=0000000000000000)
    (data9=0000000000000000)
    (data10=0000000000000000)
    (data11=0000000000000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0000000000000000)
    (data1_val=0000000000000000)
    (data2_val=0000000000000000)
    (data3_val=0000000000000000)
    (data4_val=0000000000000000)
    (data5_val=0000000000000000)
    (data8_val=0000000000000000)
    (data9_val=0000000000000000)
    (data10_val=0000000000000000)
    (data11_val=0000000000000000)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=000000B89DABEF50)
    (data1_def=000000B89DABEF50)
    (data2_def=000000B89DABEF50)
    (data3_def=000000B89DABEF50)
    (data4_def=000000B89DABEF50)
    (data5_def=000000B89DABEF50)
    (data8_def=000000B89DABEF50)
    (data9_def=000000B89DABEF50)
   (data10_def=000000B89DABEF50)
    (data11_def=000000B89DABEF50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=000000B89DABEF50)
    (data1=000000B89DABEF50)
    (data2=000000B89DABEF50)
    (data3=000000B89DABEF50)
    (data4=000000B89DABEF50)
    (data5=000000B89DABEF50)
    (data8=000000B89DABEF50)
    (data9=000000B89DABEF50)
    (data10=000000B89DABEF50)
    (data11=000000B89DABEF50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=000000B89DABEF50)
    (data1_val=000000B89DABEF50)
    (data2_val=000000B89DABEF50)
    (data3_val=000000B89DABEF50)
    (data4_val=000000B89DABEF50)
    (data5_val=000000B89DABEF50)
    (data8_val=000000B89DABEF50)
    (data9_val=000000B89DABEF50)
    (data10_val=000000B89DABEF50)
    (data11_val=000000B89DABEF50)
target=0, binarySearch=[0, 2342]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=000000B89DABF130)
    (data1_def=000000B89DABF130)
    (data2_def=000000B89DABF130)
    (data3_def=000000B89DABF130)
    (data4_def=000000B89DABF130)
    (data5_def=000000B89DABF130)
    (data8_def=000000B89DABF130)
    (data9_def=000000B89DABF130)
   (data10_def=000000B89DABF130)
    (data11_def=000000B89DABF130)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=000000B89DABF130)
    (data1=000000B89DABF130)
    (data2=000000B89DABF130)
    (data3=000000B89DABF130)
    (data4=000000B89DABF130)
    (data5=000000B89DABF130)
    (data8=000000B89DABF130)
    (data9=000000B89DABF130)
    (data10=000000B89DABF130)
    (data11=000000B89DABF130)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=000000B89DABF130)
    (data1_val=000000B89DABF130)
    (data2_val=000000B89DABF130)
    (data3_val=000000B89DABF130)
    (data4_val=000000B89DABF130)
    (data5_val=000000B89DABF130)
    (data8_val=000000B89DABF130)
    (data9_val=000000B89DABF130)
    (data10_val=000000B89DABF130)
    (data11_val=000000B89DABF130)
target=2, binarySearch=[2, 6831]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=000000B89DABF4F0)
    (data1_def=000000B89DABF4F0)
    (data2_def=000000B89DABF4F0)
    (data3_def=000000B89DABF4F0)
    (data4_def=000000B89DABF4F0)
    (data5_def=000000B89DABF4F0)
    (data8_def=000000B89DABF4F0)
    (data9_def=000000B89DABF4F0)
   (data10_def=000000B89DABF4F0)
    (data11_def=000000B89DABF4F0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=000000B89DABF4F0)
    (data1=000000B89DABF4F0)
    (data2=000000B89DABF4F0)
    (data3=000000B89DABF4F0)
    (data4=000000B89DABF4F0)
    (data5=000000B89DABF4F0)
    (data8=000000B89DABF4F0)
    (data9=000000B89DABF4F0)
    (data10=000000B89DABF4F0)
    (data11=000000B89DABF4F0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=000000B89DABF4F0)
    (data1_val=000000B89DABF4F0)
    (data2_val=000000B89DABF4F0)
    (data3_val=000000B89DABF4F0)
    (data4_val=000000B89DABF4F0)
    (data5_val=000000B89DABF4F0)
    (data8_val=000000B89DABF4F0)
    (data9_val=000000B89DABF4F0)
    (data10_val=000000B89DABF4F0)
    (data11_val=000000B89DABF4F0)
target=6, binarySearch=[6, 1018]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=000000B89DABFC70)
    (data1_def=000000B89DABFC70)
    (data2_def=000000B89DABFC70)
    (data3_def=000000B89DABFC70)
    (data4_def=000000B89DABFC70)
    (data5_def=000000B89DABFC70)
    (data8_def=000000B89DABFC70)
    (data9_def=000000B89DABFC70)
   (data10_def=000000B89DABFC70)
    (data11_def=000000B89DABFC70)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=000000B89DABFC70)
    (data1=000000B89DABFC70)
    (data2=000000B89DABFC70)
    (data3=000000B89DABFC70)
    (data4=000000B89DABFC70)
    (data5=000000B89DABFC70)
    (data8=000000B89DABFC70)
    (data9=000000B89DABFC70)
    (data10=000000B89DABFC70)
    (data11=000000B89DABFC70)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=000000B89DABFC70)
    (data1_val=000000B89DABFC70)
    (data2_val=000000B89DABFC70)
    (data3_val=000000B89DABFC70)
    (data4_val=000000B89DABFC70)
    (data5_val=000000B89DABFC70)
    (data8_val=000000B89DABFC70)
    (data9_val=000000B89DABFC70)
    (data10_val=000000B89DABFC70)
    (data11_val=000000B89DABFC70)
target=14, binarySearch=[14, 4706]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=000000B89DAC0B70)
    (data1_def=000000B89DAC0B70)
    (data2_def=000000B89DAC0B70)
    (data3_def=000000B89DAC0B70)
    (data4_def=000000B89DAC0B70)
    (data5_def=000000B89DAC0B70)
    (data8_def=000000B89DAC0B70)
    (data9_def=000000B89DAC0B70)
   (data10_def=000000B89DAC0B70)
    (data11_def=000000B89DAC0B70)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=000000B89DAC0B70)
    (data1=000000B89DAC0B70)
    (data2=000000B89DAC0B70)
    (data3=000000B89DAC0B70)
    (data4=000000B89DAC0B70)
    (data5=000000B89DAC0B70)
    (data8=000000B89DAC0B70)
    (data9=000000B89DAC0B70)
    (data10=000000B89DAC0B70)
    (data11=000000B89DAC0B70)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=000000B89DAC0B70)
    (data1_val=000000B89DAC0B70)
    (data2_val=000000B89DAC0B70)
    (data3_val=000000B89DAC0B70)
    (data4_val=000000B89DAC0B70)
    (data5_val=000000B89DAC0B70)
    (data8_val=000000B89DAC0B70)
    (data9_val=000000B89DAC0B70)
    (data10_val=000000B89DAC0B70)
    (data11_val=000000B89DAC0B70)
target=30, binarySearch=[30, 5065]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=000000B89DAC2970)
    (data1_def=000000B89DAC2970)
    (data2_def=000000B89DAC2970)
    (data3_def=000000B89DAC2970)
    (data4_def=000000B89DAC2970)
    (data5_def=000000B89DAC2970)
    (data8_def=000000B89DAC2970)
    (data9_def=000000B89DAC2970)
   (data10_def=000000B89DAC2970)
    (data11_def=000000B89DAC2970)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=000000B89DAC2970)
    (data1=000000B89DAC2970)
    (data2=000000B89DAC2970)
    (data3=000000B89DAC2970)
    (data4=000000B89DAC2970)
    (data5=000000B89DAC2970)
    (data8=000000B89DAC2970)
    (data9=000000B89DAC2970)
    (data10=000000B89DAC2970)
    (data11=000000B89DAC2970)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=000000B89DAC2970)
    (data1_val=000000B89DAC2970)
    (data2_val=000000B89DAC2970)
    (data3_val=000000B89DAC2970)
    (data4_val=000000B89DAC2970)
    (data5_val=000000B89DAC2970)
    (data8_val=000000B89DAC2970)
    (data9_val=000000B89DAC2970)
    (data10_val=000000B89DAC2970)
    (data11_val=000000B89DAC2970)
target=62, binarySearch=[62, 9221]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=000000B89DAC6570)
    (data1_def=000000B89DAC6570)
    (data2_def=000000B89DAC6570)
    (data3_def=000000B89DAC6570)
    (data4_def=000000B89DAC6570)
    (data5_def=000000B89DAC6570)
    (data8_def=000000B89DAC6570)
    (data9_def=000000B89DAC6570)
   (data10_def=000000B89DAC6570)
    (data11_def=000000B89DAC6570)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=000000B89DAC6570)
    (data1=000000B89DAC6570)
    (data2=000000B89DAC6570)
    (data3=000000B89DAC6570)
    (data4=000000B89DAC6570)
    (data5=000000B89DAC6570)
    (data8=000000B89DAC6570)
    (data9=000000B89DAC6570)
    (data10=000000B89DAC6570)
    (data11=000000B89DAC6570)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=000000B89DAC6570)
    (data1_val=000000B89DAC6570)
    (data2_val=000000B89DAC6570)
    (data3_val=000000B89DAC6570)
    (data4_val=000000B89DAC6570)
    (data5_val=000000B89DAC6570)
    (data8_val=000000B89DAC6570)
    (data9_val=000000B89DAC6570)
    (data10_val=000000B89DAC6570)
    (data11_val=000000B89DAC6570)
target=126, binarySearch=[126, 1289]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=000000B89DACDD70)
    (data1_def=000000B89DACDD70)
    (data2_def=000000B89DACDD70)
    (data3_def=000000B89DACDD70)
    (data4_def=000000B89DACDD70)
    (data5_def=000000B89DACDD70)
    (data8_def=000000B89DACDD70)
    (data9_def=000000B89DACDD70)
   (data10_def=000000B89DACDD70)
    (data11_def=000000B89DACDD70)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=000000B89DACDD70)
    (data1=000000B89DACDD70)
    (data2=000000B89DACDD70)
    (data3=000000B89DACDD70)
    (data4=000000B89DACDD70)
    (data5=000000B89DACDD70)
    (data8=000000B89DACDD70)
    (data9=000000B89DACDD70)
    (data10=000000B89DACDD70)
    (data11=000000B89DACDD70)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=000000B89DACDD70)
    (data1_val=000000B89DACDD70)
    (data2_val=000000B89DACDD70)
    (data3_val=000000B89DACDD70)
    (data4_val=000000B89DACDD70)
    (data5_val=000000B89DACDD70)
    (data8_val=000000B89DACDD70)
    (data9_val=000000B89DACDD70)
    (data10_val=000000B89DACDD70)
    (data11_val=000000B89DACDD70)
target=254, binarySearch=[254, 8763]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=6.200895200 sec.
