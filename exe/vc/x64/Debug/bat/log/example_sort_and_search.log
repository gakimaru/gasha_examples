============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=488 / record(s)=1000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=499 / record(s)=1000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=494 / record(s)=1000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=1000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=333 / record(s)=1000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=1000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=507 / record(s)=1000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001500 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.003003200 sec.
* Average time     = 0.000429029 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001500 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.005005000 sec.
* Average time     = 0.000715000 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=1000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.003002900 sec.
* Average time     = 0.000428986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.004003800 sec.
* Average time     = 0.000571971 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.005004700 sec.
* Average time     = 0.000714957 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=1000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=1000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=1000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.003003000 sec.
* Average time     = 0.000429000 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.036033900 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=247900 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.024022900 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=244992 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.024022900 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=251557 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.041039200 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=498501 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.005005000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=1995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.033031100 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=373277 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 0.163155000 sec.
* Average time     = 0.023307857 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.041039200 sec.
* Total Swapped    =   1618222 count(s)
* Average  Swapped =    231174 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =    498501 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.022021300 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=247900 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.022020600 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=244992 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.023021900 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=251557 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.042039900 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=498501 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=1995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.033031300 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=373277 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 0.142135000 sec.
* Average time     = 0.020305000 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.042039900 sec.
* Total Swapped    =   1618222 count(s)
* Average  Swapped =    231174 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =    498501 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.011009700 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=247900 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.012011400 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=244992 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.011010300 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=251557 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.020019000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=498501 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.004003800 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=1995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.014013200 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=373277 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.072067400 sec.
* Average time     = 0.010295343 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.020019000 sec.
* Total Swapped    =   1618222 count(s)
* Average  Swapped =    231174 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =    498501 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=48827 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=48914 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002002000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=49588 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=14850 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=43102 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=16789 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=48619 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.009008500 sec.
* Average time     = 0.001286929 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002002100 sec.
* Total Swapped    =    270689 count(s)
* Average  Swapped =     38669 count(s)
* Min Swapped      =     14850 count(s)
* Max Swapped      =     49588 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=3949 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=3942 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=3917 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=1401 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=754 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=4108 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.005004900 sec.
* Average time     = 0.000714986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =     18071 count(s)
* Average  Swapped =      2581 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      4108 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.030028700 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=247900 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.031029300 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=244992 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.030029600 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=251557 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.042040200 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=498501 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=1995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.032030400 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=373277 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 0.165158200 sec.
* Average time     = 0.023594029 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.042040200 sec.
* Total Swapped    =   1618222 count(s)
* Average  Swapped =    231174 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =    498501 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=2538 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=2552 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=2597 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=833 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=2827 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.002002400 sec.
* Average time     = 0.000286057 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =     12014 count(s)
* Average  Swapped =      1716 count(s)
* Min Swapped      =       333 count(s)
* Max Swapped      =      2827 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.005004400 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=993 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.005004700 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=987 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.005004700 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=995 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.005004700 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.005005000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=833 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.006005000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.008007900 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=994 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.039036400 sec.
* Average time     = 0.005576629 sec.
* Min time         = 0.005004400 sec.
* Max time         = 0.008007900 sec.
* Total Swapped    =      4805 count(s)
* Average  Swapped =       686 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =       995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002002000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=9605 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=9644 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=9619 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.002002000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=15116 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001002300 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=8312 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.002000600 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=14570 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=8926 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.012011700 sec.
* Average time     = 0.001715957 sec.
* Min time         = 0.001000900 sec.
* Max time         = 0.002002100 sec.
* Total Swapped    =     75792 count(s)
* Average  Swapped =     10827 count(s)
* Min Swapped      =      8312 count(s)
* Max Swapped      =     15116 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.010009400 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=989 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.010009600 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=988 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.011010900 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=993 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.020019000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.015014400 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=994 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.066063300 sec.
* Average time     = 0.009437614 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.020019000 sec.
* Total Swapped    =      5962 count(s)
* Average  Swapped =       851 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =       999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=3268 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=3343 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=3339 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=2652 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=704 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=3428 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.004003800 sec.
* Average time     = 0.000571971 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =     16734 count(s)
* Average  Swapped =      2390 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      3428 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.007007600 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=4278 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.007006500 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=4290 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.007006400 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=4295 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.014013200 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=4516 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=1006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.011010500 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=4303 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.046044200 sec.
* Average time     = 0.006577743 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.014013200 sec.
* Total Swapped    =     22688 count(s)
* Average  Swapped =      3241 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      4516 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=2296 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=2321 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=2327 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001500 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=576 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=78 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=2578 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.004003800 sec.
* Average time     = 0.000571971 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001500 sec.
* Total Swapped    =     10176 count(s)
* Average  Swapped =      1453 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      2578 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=1000 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=999 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=1000 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=1000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.002000900 sec.
* Average time     = 0.000285843 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000600 sec.
* Total Swapped    =      5002 count(s)
* Average  Swapped =       714 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      1000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 1000 Count(s)
Total Array size   = 80000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.003003200/  0.000429029/  0.000000000/  0.001001500
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.005005000/  0.000715000/  0.000000000/  0.001001200
- std::sort(inline-func):   0.003002900/  0.000428986/  0.000000000/  0.001001200
- std::sort(functor):       0.004003800/  0.000571971/  0.000000000/  0.001001200
- std::sort(lambda):        0.005004700/  0.000714957/  0.000000000/  0.001001200
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.003003000/  0.000429000/  0.000000000/  0.001001200
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           0.163155000/  0.023307857/  0.000000000/  0.041039200    1618222/     231174/          0/     498501
- Shaker sort<S>:           0.142135000/  0.020305000/  0.000000000/  0.042039900    1618222/     231174/          0/     498501
- Odd-Even sort<S>:         0.072067400/  0.010295343/  0.000000000/  0.020019000    1618222/     231174/          0/     498501
- Shear sort:               0.009008500/  0.001286929/  0.000000000/  0.002002100     270689/      38669/      14850/      49588
- Comb sort:                0.005004900/  0.000714986/  0.000000000/  0.001001200      18071/       2581/          0/       4108
- Gnome sort<S>:            0.165158200/  0.023594029/  0.000000000/  0.042040200    1618222/     231174/          0/     498501
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.002002400/  0.000286057/  0.000000000/  0.001001200      12014/       1716/        333/       2827
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.039036400/  0.005576629/  0.005004400/  0.008007900       4805/        686/          0/        995
- Heap sort:                0.012011700/  0.001715957/  0.001000900/  0.002002100      75792/      10827/       8312/      15116
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.066063300/  0.009437614/  0.000000000/  0.020019000       5962/        851/          0/        999
- Shell sort:               0.004003800/  0.000571971/  0.000000000/  0.001001200      16734/       2390/          0/       3428
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.046044200/  0.006577743/  0.000000000/  0.014013200      22688/       3241/          0/       4516
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.004003800/  0.000571971/  0.000000000/  0.001001500      10176/       1453/          0/       2578
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.002000900/  0.000285843/  0.000000000/  0.001000600       5002/        714/          0/       1000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=2296)
(result1=2296)
(result3=2296)
(result4=2296)
(result5=2296)
(result6=2296)
(result8=2296)
(result9=2296)
(result10=2296)
(result11=2316)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=0000000000000000)
    (data1_def=0000000000000000)
    (data2_def=0000000000000000)
    (data3_def=0000000000000000)
    (data4_def=0000000000000000)
    (data5_def=0000000000000000)
    (data8_def=0000000000000000)
    (data9_def=0000000000000000)
    (data10_def=0000000000000000)
    (data11_def=0000000000000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0000000000000000)
    (data1=0000000000000000)
    (data2=0000000000000000)
    (data3=0000000000000000)
    (data4=0000000000000000)
    (data5=0000000000000000)
    (data8=0000000000000000)
    (data9=0000000000000000)
    (data10=0000000000000000)
    (data11=0000000000000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0000000000000000)
    (data1_val=0000000000000000)
    (data2_val=0000000000000000)
    (data3_val=0000000000000000)
    (data4_val=0000000000000000)
    (data5_val=0000000000000000)
    (data8_val=0000000000000000)
    (data9_val=0000000000000000)
    (data10_val=0000000000000000)
    (data11_val=0000000000000000)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=0000008C9CB57EE0)
    (data1_def=0000008C9CB57EE0)
    (data2_def=0000008C9CB57EE0)
    (data3_def=0000008C9CB57EE0)
    (data4_def=0000008C9CB57EE0)
    (data5_def=0000008C9CB57EE0)
    (data8_def=0000008C9CB57EE0)
    (data9_def=0000008C9CB57EE0)
    (data10_def=0000008C9CB57EE0)
    (data11_def=0000008C9CB57EE0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0000008C9CB57EE0)
    (data1=0000008C9CB57EE0)
    (data2=0000008C9CB57EE0)
    (data3=0000008C9CB57EE0)
    (data4=0000008C9CB57EE0)
    (data5=0000008C9CB57EE0)
    (data8=0000008C9CB57EE0)
    (data9=0000008C9CB57EE0)
    (data10=0000008C9CB57EE0)
    (data11=0000008C9CB57EE0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0000008C9CB57EE0)
    (data1_val=0000008C9CB57EE0)
    (data2_val=0000008C9CB57EE0)
    (data3_val=0000008C9CB57EE0)
    (data4_val=0000008C9CB57EE0)
    (data5_val=0000008C9CB57EE0)
    (data8_val=0000008C9CB57EE0)
    (data9_val=0000008C9CB57EE0)
    (data10_val=0000008C9CB57EE0)
    (data11_val=0000008C9CB57EE0)
target=0, linearSearch=[0, 304]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=0000008C9CB57530)
    (data1_def=0000008C9CB57530)
    (data2_def=0000008C9CB57530)
    (data3_def=0000008C9CB57530)
    (data4_def=0000008C9CB57530)
    (data5_def=0000008C9CB57530)
    (data8_def=0000008C9CB57530)
    (data9_def=0000008C9CB57530)
    (data10_def=0000008C9CB57530)
    (data11_def=0000008C9CB57530)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0000008C9CB57530)
    (data1=0000008C9CB57530)
    (data2=0000008C9CB57530)
    (data3=0000008C9CB57530)
    (data4=0000008C9CB57530)
    (data5=0000008C9CB57530)
    (data8=0000008C9CB57530)
    (data9=0000008C9CB57530)
    (data10=0000008C9CB57530)
    (data11=0000008C9CB57530)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0000008C9CB57530)
    (data1_val=0000008C9CB57530)
    (data2_val=0000008C9CB57530)
    (data3_val=0000008C9CB57530)
    (data4_val=0000008C9CB57530)
    (data5_val=0000008C9CB57530)
    (data8_val=0000008C9CB57530)
    (data9_val=0000008C9CB57530)
    (data10_val=0000008C9CB57530)
    (data11_val=0000008C9CB57530)
target=2, linearSearch=[2, 273]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=0000008C9CB58B10)
    (data1_def=0000008C9CB58B10)
    (data2_def=0000008C9CB58B10)
    (data3_def=0000008C9CB58B10)
    (data4_def=0000008C9CB58B10)
    (data5_def=0000008C9CB58B10)
    (data8_def=0000008C9CB58B10)
    (data9_def=0000008C9CB58B10)
    (data10_def=0000008C9CB58B10)
    (data11_def=0000008C9CB58B10)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0000008C9CB58B10)
    (data1=0000008C9CB58B10)
    (data2=0000008C9CB58B10)
    (data3=0000008C9CB58B10)
    (data4=0000008C9CB58B10)
    (data5=0000008C9CB58B10)
    (data8=0000008C9CB58B10)
    (data9=0000008C9CB58B10)
    (data10=0000008C9CB58B10)
    (data11=0000008C9CB58B10)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0000008C9CB58B10)
    (data1_val=0000008C9CB58B10)
    (data2_val=0000008C9CB58B10)
    (data3_val=0000008C9CB58B10)
    (data4_val=0000008C9CB58B10)
    (data5_val=0000008C9CB58B10)
    (data8_val=0000008C9CB58B10)
    (data9_val=0000008C9CB58B10)
    (data10_val=0000008C9CB58B10)
    (data11_val=0000008C9CB58B10)
target=6, linearSearch=[6, 343]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=0000008C9CB52620)
    (data1_def=0000008C9CB52620)
    (data2_def=0000008C9CB52620)
    (data3_def=0000008C9CB52620)
    (data4_def=0000008C9CB52620)
    (data5_def=0000008C9CB52620)
    (data8_def=0000008C9CB52620)
    (data9_def=0000008C9CB52620)
    (data10_def=0000008C9CB52620)
    (data11_def=0000008C9CB52620)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0000008C9CB52620)
    (data1=0000008C9CB52620)
    (data2=0000008C9CB52620)
    (data3=0000008C9CB52620)
    (data4=0000008C9CB52620)
    (data5=0000008C9CB52620)
    (data8=0000008C9CB52620)
    (data9=0000008C9CB52620)
    (data10=0000008C9CB52620)
    (data11=0000008C9CB52620)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0000008C9CB52620)
    (data1_val=0000008C9CB52620)
    (data2_val=0000008C9CB52620)
    (data3_val=0000008C9CB52620)
    (data4_val=0000008C9CB52620)
    (data5_val=0000008C9CB52620)
    (data8_val=0000008C9CB52620)
    (data9_val=0000008C9CB52620)
    (data10_val=0000008C9CB52620)
    (data11_val=0000008C9CB52620)
target=14, linearSearch=[14, 20]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=0000008C9CB5A550)
    (data1_def=0000008C9CB5A550)
    (data2_def=0000008C9CB5A550)
    (data3_def=0000008C9CB5A550)
    (data4_def=0000008C9CB5A550)
    (data5_def=0000008C9CB5A550)
    (data8_def=0000008C9CB5A550)
    (data9_def=0000008C9CB5A550)
    (data10_def=0000008C9CB5A550)
    (data11_def=0000008C9CB5A550)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0000008C9CB5A550)
    (data1=0000008C9CB5A550)
    (data2=0000008C9CB5A550)
    (data3=0000008C9CB5A550)
    (data4=0000008C9CB5A550)
    (data5=0000008C9CB5A550)
    (data8=0000008C9CB5A550)
    (data9=0000008C9CB5A550)
    (data10=0000008C9CB5A550)
    (data11=0000008C9CB5A550)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0000008C9CB5A550)
    (data1_val=0000008C9CB5A550)
    (data2_val=0000008C9CB5A550)
    (data3_val=0000008C9CB5A550)
    (data4_val=0000008C9CB5A550)
    (data5_val=0000008C9CB5A550)
    (data8_val=0000008C9CB5A550)
    (data9_val=0000008C9CB5A550)
    (data10_val=0000008C9CB5A550)
    (data11_val=0000008C9CB5A550)
target=30, linearSearch=[30, 427]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=0000008C9CB5E3D0)
    (data1_def=0000008C9CB5E3D0)
    (data2_def=0000008C9CB5E3D0)
    (data3_def=0000008C9CB5E3D0)
    (data4_def=0000008C9CB5E3D0)
    (data5_def=0000008C9CB5E3D0)
    (data8_def=0000008C9CB5E3D0)
    (data9_def=0000008C9CB5E3D0)
    (data10_def=0000008C9CB5E3D0)
    (data11_def=0000008C9CB5E3D0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0000008C9CB5E3D0)
    (data1=0000008C9CB5E3D0)
    (data2=0000008C9CB5E3D0)
    (data3=0000008C9CB5E3D0)
    (data4=0000008C9CB5E3D0)
    (data5=0000008C9CB5E3D0)
    (data8=0000008C9CB5E3D0)
    (data9=0000008C9CB5E3D0)
    (data10=0000008C9CB5E3D0)
    (data11=0000008C9CB5E3D0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0000008C9CB5E3D0)
    (data1_val=0000008C9CB5E3D0)
    (data2_val=0000008C9CB5E3D0)
    (data3_val=0000008C9CB5E3D0)
    (data4_val=0000008C9CB5E3D0)
    (data5_val=0000008C9CB5E3D0)
    (data8_val=0000008C9CB5E3D0)
    (data9_val=0000008C9CB5E3D0)
    (data10_val=0000008C9CB5E3D0)
    (data11_val=0000008C9CB5E3D0)
target=62, linearSearch=[62, 627]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=0000008C9CB55AF0)
    (data1_def=0000008C9CB55AF0)
    (data2_def=0000008C9CB55AF0)
    (data3_def=0000008C9CB55AF0)
    (data4_def=0000008C9CB55AF0)
    (data5_def=0000008C9CB55AF0)
    (data8_def=0000008C9CB55AF0)
    (data9_def=0000008C9CB55AF0)
    (data10_def=0000008C9CB55AF0)
    (data11_def=0000008C9CB55AF0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0000008C9CB55AF0)
    (data1=0000008C9CB55AF0)
    (data2=0000008C9CB55AF0)
    (data3=0000008C9CB55AF0)
    (data4=0000008C9CB55AF0)
    (data5=0000008C9CB55AF0)
    (data8=0000008C9CB55AF0)
    (data9=0000008C9CB55AF0)
    (data10=0000008C9CB55AF0)
    (data11=0000008C9CB55AF0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0000008C9CB55AF0)
    (data1_val=0000008C9CB55AF0)
    (data2_val=0000008C9CB55AF0)
    (data3_val=0000008C9CB55AF0)
    (data4_val=0000008C9CB55AF0)
    (data5_val=0000008C9CB55AF0)
    (data8_val=0000008C9CB55AF0)
    (data9_val=0000008C9CB55AF0)
    (data10_val=0000008C9CB55AF0)
    (data11_val=0000008C9CB55AF0)
target=126, linearSearch=[126, 189]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=0000008C9CB55140)
    (data1_def=0000008C9CB55140)
    (data2_def=0000008C9CB55140)
    (data3_def=0000008C9CB55140)
    (data4_def=0000008C9CB55140)
    (data5_def=0000008C9CB55140)
    (data8_def=0000008C9CB55140)
    (data9_def=0000008C9CB55140)
    (data10_def=0000008C9CB55140)
    (data11_def=0000008C9CB55140)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0000008C9CB55140)
    (data1=0000008C9CB55140)
    (data2=0000008C9CB55140)
    (data3=0000008C9CB55140)
    (data4=0000008C9CB55140)
    (data5=0000008C9CB55140)
    (data8=0000008C9CB55140)
    (data9=0000008C9CB55140)
    (data10=0000008C9CB55140)
    (data11=0000008C9CB55140)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0000008C9CB55140)
    (data1_val=0000008C9CB55140)
    (data2_val=0000008C9CB55140)
    (data3_val=0000008C9CB55140)
    (data4_val=0000008C9CB55140)
    (data5_val=0000008C9CB55140)
    (data8_val=0000008C9CB55140)
    (data9_val=0000008C9CB55140)
    (data10_val=0000008C9CB55140)
    (data11_val=0000008C9CB55140)
target=254, linearSearch=[254, 158]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=0000000000000000)
    (data1_def=0000000000000000)
    (data2_def=0000000000000000)
    (data3_def=0000000000000000)
    (data4_def=0000000000000000)
    (data5_def=0000000000000000)
    (data8_def=0000000000000000)
    (data9_def=0000000000000000)
   (data10_def=0000000000000000)
    (data11_def=0000000000000000)
  binarySearch(*array_shuffle1, search_comparison);
    (data=0000000000000000)
    (data1=0000000000000000)
    (data2=0000000000000000)
    (data3=0000000000000000)
    (data4=0000000000000000)
    (data5=0000000000000000)
    (data8=0000000000000000)
    (data9=0000000000000000)
    (data10=0000000000000000)
    (data11=0000000000000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0000000000000000)
    (data1_val=0000000000000000)
    (data2_val=0000000000000000)
    (data3_val=0000000000000000)
    (data4_val=0000000000000000)
    (data5_val=0000000000000000)
    (data8_val=0000000000000000)
    (data9_val=0000000000000000)
    (data10_val=0000000000000000)
    (data11_val=0000000000000000)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=0000008C9CB51FE0)
    (data1_def=0000008C9CB51FE0)
    (data2_def=0000008C9CB51FE0)
    (data3_def=0000008C9CB51FE0)
    (data4_def=0000008C9CB51FE0)
    (data5_def=0000008C9CB51FE0)
    (data8_def=0000008C9CB51FE0)
    (data9_def=0000008C9CB51FE0)
   (data10_def=0000008C9CB51FE0)
    (data11_def=0000008C9CB51FE0)
  binarySearch(*array_shuffle1, search_comparison);
    (data=0000008C9CB51FE0)
    (data1=0000008C9CB51FE0)
    (data2=0000008C9CB51FE0)
    (data3=0000008C9CB51FE0)
    (data4=0000008C9CB51FE0)
    (data5=0000008C9CB51FE0)
    (data8=0000008C9CB51FE0)
    (data9=0000008C9CB51FE0)
    (data10=0000008C9CB51FE0)
    (data11=0000008C9CB51FE0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0000008C9CB51FE0)
    (data1_val=0000008C9CB51FE0)
    (data2_val=0000008C9CB51FE0)
    (data3_val=0000008C9CB51FE0)
    (data4_val=0000008C9CB51FE0)
    (data5_val=0000008C9CB51FE0)
    (data8_val=0000008C9CB51FE0)
    (data9_val=0000008C9CB51FE0)
    (data10_val=0000008C9CB51FE0)
    (data11_val=0000008C9CB51FE0)
target=0, binarySearch=[0, 471]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=0000008C9CB521C0)
    (data1_def=0000008C9CB521C0)
    (data2_def=0000008C9CB521C0)
    (data3_def=0000008C9CB521C0)
    (data4_def=0000008C9CB521C0)
    (data5_def=0000008C9CB521C0)
    (data8_def=0000008C9CB521C0)
    (data9_def=0000008C9CB521C0)
   (data10_def=0000008C9CB521C0)
    (data11_def=0000008C9CB521C0)
  binarySearch(*array_shuffle1, search_comparison);
    (data=0000008C9CB521C0)
    (data1=0000008C9CB521C0)
    (data2=0000008C9CB521C0)
    (data3=0000008C9CB521C0)
    (data4=0000008C9CB521C0)
    (data5=0000008C9CB521C0)
    (data8=0000008C9CB521C0)
    (data9=0000008C9CB521C0)
    (data10=0000008C9CB521C0)
    (data11=0000008C9CB521C0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0000008C9CB521C0)
    (data1_val=0000008C9CB521C0)
    (data2_val=0000008C9CB521C0)
    (data3_val=0000008C9CB521C0)
    (data4_val=0000008C9CB521C0)
    (data5_val=0000008C9CB521C0)
    (data8_val=0000008C9CB521C0)
    (data9_val=0000008C9CB521C0)
    (data10_val=0000008C9CB521C0)
    (data11_val=0000008C9CB521C0)
target=2, binarySearch=[2, 575]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=0000008C9CB52580)
    (data1_def=0000008C9CB52580)
    (data2_def=0000008C9CB52580)
    (data3_def=0000008C9CB52580)
    (data4_def=0000008C9CB52580)
    (data5_def=0000008C9CB52580)
    (data8_def=0000008C9CB52580)
    (data9_def=0000008C9CB52580)
   (data10_def=0000008C9CB52580)
    (data11_def=0000008C9CB52580)
  binarySearch(*array_shuffle1, search_comparison);
    (data=0000008C9CB52580)
    (data1=0000008C9CB52580)
    (data2=0000008C9CB52580)
    (data3=0000008C9CB52580)
    (data4=0000008C9CB52580)
    (data5=0000008C9CB52580)
    (data8=0000008C9CB52580)
    (data9=0000008C9CB52580)
    (data10=0000008C9CB52580)
    (data11=0000008C9CB52580)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0000008C9CB52580)
    (data1_val=0000008C9CB52580)
    (data2_val=0000008C9CB52580)
    (data3_val=0000008C9CB52580)
    (data4_val=0000008C9CB52580)
    (data5_val=0000008C9CB52580)
    (data8_val=0000008C9CB52580)
    (data9_val=0000008C9CB52580)
    (data10_val=0000008C9CB52580)
    (data11_val=0000008C9CB52580)
target=6, binarySearch=[6, 681]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=0000008C9CB52D00)
    (data1_def=0000008C9CB52D00)
    (data2_def=0000008C9CB52D00)
    (data3_def=0000008C9CB52D00)
    (data4_def=0000008C9CB52D00)
    (data5_def=0000008C9CB52D00)
    (data8_def=0000008C9CB52D00)
    (data9_def=0000008C9CB52D00)
   (data10_def=0000008C9CB52D00)
    (data11_def=0000008C9CB52D00)
  binarySearch(*array_shuffle1, search_comparison);
    (data=0000008C9CB52D00)
    (data1=0000008C9CB52D00)
    (data2=0000008C9CB52D00)
    (data3=0000008C9CB52D00)
    (data4=0000008C9CB52D00)
    (data5=0000008C9CB52D00)
    (data8=0000008C9CB52D00)
    (data9=0000008C9CB52D00)
    (data10=0000008C9CB52D00)
    (data11=0000008C9CB52D00)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0000008C9CB52D00)
    (data1_val=0000008C9CB52D00)
    (data2_val=0000008C9CB52D00)
    (data3_val=0000008C9CB52D00)
    (data4_val=0000008C9CB52D00)
    (data5_val=0000008C9CB52D00)
    (data8_val=0000008C9CB52D00)
    (data9_val=0000008C9CB52D00)
    (data10_val=0000008C9CB52D00)
    (data11_val=0000008C9CB52D00)
target=14, binarySearch=[14, 260]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=0000008C9CB53C00)
    (data1_def=0000008C9CB53C00)
    (data2_def=0000008C9CB53C00)
    (data3_def=0000008C9CB53C00)
    (data4_def=0000008C9CB53C00)
    (data5_def=0000008C9CB53C00)
    (data8_def=0000008C9CB53C00)
    (data9_def=0000008C9CB53C00)
   (data10_def=0000008C9CB53C00)
    (data11_def=0000008C9CB53C00)
  binarySearch(*array_shuffle1, search_comparison);
    (data=0000008C9CB53C00)
    (data1=0000008C9CB53C00)
    (data2=0000008C9CB53C00)
    (data3=0000008C9CB53C00)
    (data4=0000008C9CB53C00)
    (data5=0000008C9CB53C00)
    (data8=0000008C9CB53C00)
    (data9=0000008C9CB53C00)
    (data10=0000008C9CB53C00)
    (data11=0000008C9CB53C00)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0000008C9CB53C00)
    (data1_val=0000008C9CB53C00)
    (data2_val=0000008C9CB53C00)
    (data3_val=0000008C9CB53C00)
    (data4_val=0000008C9CB53C00)
    (data5_val=0000008C9CB53C00)
    (data8_val=0000008C9CB53C00)
    (data9_val=0000008C9CB53C00)
    (data10_val=0000008C9CB53C00)
    (data11_val=0000008C9CB53C00)
target=30, binarySearch=[30, 915]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=0000008C9CB55A00)
    (data1_def=0000008C9CB55A00)
    (data2_def=0000008C9CB55A00)
    (data3_def=0000008C9CB55A00)
    (data4_def=0000008C9CB55A00)
    (data5_def=0000008C9CB55A00)
    (data8_def=0000008C9CB55A00)
    (data9_def=0000008C9CB55A00)
   (data10_def=0000008C9CB55A00)
    (data11_def=0000008C9CB55A00)
  binarySearch(*array_shuffle1, search_comparison);
    (data=0000008C9CB55A00)
    (data1=0000008C9CB55A00)
    (data2=0000008C9CB55A00)
    (data3=0000008C9CB55A00)
    (data4=0000008C9CB55A00)
    (data5=0000008C9CB55A00)
    (data8=0000008C9CB55A00)
    (data9=0000008C9CB55A00)
    (data10=0000008C9CB55A00)
    (data11=0000008C9CB55A00)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0000008C9CB55A00)
    (data1_val=0000008C9CB55A00)
    (data2_val=0000008C9CB55A00)
    (data3_val=0000008C9CB55A00)
    (data4_val=0000008C9CB55A00)
    (data5_val=0000008C9CB55A00)
    (data8_val=0000008C9CB55A00)
    (data9_val=0000008C9CB55A00)
    (data10_val=0000008C9CB55A00)
    (data11_val=0000008C9CB55A00)
target=62, binarySearch=[62, 627]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=0000008C9CB59600)
    (data1_def=0000008C9CB59600)
    (data2_def=0000008C9CB59600)
    (data3_def=0000008C9CB59600)
    (data4_def=0000008C9CB59600)
    (data5_def=0000008C9CB59600)
    (data8_def=0000008C9CB59600)
    (data9_def=0000008C9CB59600)
   (data10_def=0000008C9CB59600)
    (data11_def=0000008C9CB59600)
  binarySearch(*array_shuffle1, search_comparison);
    (data=0000008C9CB59600)
    (data1=0000008C9CB59600)
    (data2=0000008C9CB59600)
    (data3=0000008C9CB59600)
    (data4=0000008C9CB59600)
    (data5=0000008C9CB59600)
    (data8=0000008C9CB59600)
    (data9=0000008C9CB59600)
    (data10=0000008C9CB59600)
    (data11=0000008C9CB59600)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0000008C9CB59600)
    (data1_val=0000008C9CB59600)
    (data2_val=0000008C9CB59600)
    (data3_val=0000008C9CB59600)
    (data4_val=0000008C9CB59600)
    (data5_val=0000008C9CB59600)
    (data8_val=0000008C9CB59600)
    (data9_val=0000008C9CB59600)
    (data10_val=0000008C9CB59600)
    (data11_val=0000008C9CB59600)
target=126, binarySearch=[126, 728]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=0000008C9CB60E00)
    (data1_def=0000008C9CB60E00)
    (data2_def=0000008C9CB60E00)
    (data3_def=0000008C9CB60E00)
    (data4_def=0000008C9CB60E00)
    (data5_def=0000008C9CB60E00)
    (data8_def=0000008C9CB60E00)
    (data9_def=0000008C9CB60E00)
   (data10_def=0000008C9CB60E00)
    (data11_def=0000008C9CB60E00)
  binarySearch(*array_shuffle1, search_comparison);
    (data=0000008C9CB60E00)
    (data1=0000008C9CB60E00)
    (data2=0000008C9CB60E00)
    (data3=0000008C9CB60E00)
    (data4=0000008C9CB60E00)
    (data5=0000008C9CB60E00)
    (data8=0000008C9CB60E00)
    (data9=0000008C9CB60E00)
    (data10=0000008C9CB60E00)
    (data11=0000008C9CB60E00)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0000008C9CB60E00)
    (data1_val=0000008C9CB60E00)
    (data2_val=0000008C9CB60E00)
    (data3_val=0000008C9CB60E00)
    (data4_val=0000008C9CB60E00)
    (data5_val=0000008C9CB60E00)
    (data8_val=0000008C9CB60E00)
    (data9_val=0000008C9CB60E00)
    (data10_val=0000008C9CB60E00)
    (data11_val=0000008C9CB60E00)
target=254, binarySearch=[254, 756]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=0.784746600 sec.
