============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=4951 / record(s)=10000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=5002 / record(s)=10000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=4984 / record(s)=10000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=10000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=3333 / record(s)=10000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=10000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=4976 / record(s)=10000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.003002700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003002600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.003002600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.003002600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.015013800 sec.
* Average time     = 0.002144829 sec.
* Min time         = 0.001000900 sec.
* Max time         = 0.003002700 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.005004400 sec.
* Average time     = 0.000714914 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002002100 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002002000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.011010600 sec.
* Average time     = 0.001572943 sec.
* Min time         = 0.001000900 sec.
* Max time         = 0.002002000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.005004700 sec.
* Average time     = 0.000714957 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.004003800 sec.
* Average time     = 0.000571971 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.012011900 sec.
* Average time     = 0.001715986 sec.
* Min time         = 0.001001200 sec.
* Max time         = 0.002002100 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.248236400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.224214900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.223212600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.365349100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.068064300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.243231700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 1.372309000 sec.
* Average time     = 0.196044143 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.365349100 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.184175300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.203193600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.196187300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.273260400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.232222300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 1.089038900 sec.
* Average time     = 0.155576986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.273260400 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.133125100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.128122200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.128122400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.192183200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.058055200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.162154800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.801762900 sec.
* Average time     = 0.114537557 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.192183200 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.006005900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1892312 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.005004700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1873730 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.005004700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1860168 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=485134 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.004003800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1465201 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=485527 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.005005000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1882044 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.027026200 sec.
* Average time     = 0.003860886 sec.
* Min time         = 0.001000900 sec.
* Max time         = 0.006005900 sec.
* Total Swapped    =   9944116 count(s)
* Average  Swapped =   1420588 count(s)
* Min Swapped      =    485134 count(s)
* Max Swapped      =   1892312 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57500 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57587 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57584 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=18345 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=7303 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=58823 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.008007600 sec.
* Average time     = 0.001143943 sec.
* Min time         = 0.001000800 sec.
* Max time         = 0.002002100 sec.
* Total Swapped    =    257142 count(s)
* Average  Swapped =     36734 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     58823 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.157150300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.123118600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.122115700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.286273100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.227217000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 0.915874700 sec.
* Average time     = 0.130839243 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.286273100 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33719 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33677 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33444 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=36402 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.005004700 sec.
* Average time     = 0.000714957 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =    152242 count(s)
* Average  Swapped =     21748 count(s)
* Min Swapped      =      3333 count(s)
* Max Swapped      =     36402 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.123116900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.124118900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9995 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.124118300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.123117500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.123116600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.121114900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.123118600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9989 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.861821700 sec.
* Average time     = 0.123117386 sec.
* Min time         = 0.121114900 sec.
* Max time         = 0.124118900 sec.
* Total Swapped    =     48300 count(s)
* Average  Swapped =      6900 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129635 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129583 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002002000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129778 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.002000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=218680 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001002000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=116627 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.002002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=213143 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002003500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=123006 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.013016000 sec.
* Average time     = 0.001859429 sec.
* Min time         = 0.001002000 sec.
* Max time         = 0.002003500 sec.
* Total Swapped    =   1060452 count(s)
* Average  Swapped =    151493 count(s)
* Min Swapped      =    116627 count(s)
* Max Swapped      =    218680 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.136128300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9985 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.114109000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9987 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.112107100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9983 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.248244600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000993300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.186178200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9994 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.797760500 sec.
* Average time     = 0.113965786 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.248244600 sec.
* Total Swapped    =     59947 count(s)
* Average  Swapped =      8563 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48473 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48925 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48799 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=37222 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=5156 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49469 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.004003600 sec.
* Average time     = 0.000571943 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001500 sec.
* Total Swapped    =    238044 count(s)
* Average  Swapped =     34006 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     49469 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.072068400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58291 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.072068700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58193 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.071067500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58188 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.156148300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=60442 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.125119500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58404 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.496472400 sec.
* Average time     = 0.070924629 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.156148300 sec.
* Total Swapped    =    303524 count(s)
* Average  Swapped =     43360 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     60442 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31152 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31250 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31256 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=6022 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1024 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33844 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.004003200 sec.
* Average time     = 0.000571886 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =    134548 count(s)
* Average  Swapped =     19221 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     33844 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9996 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9998 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.003002900 sec.
* Average time     = 0.000428986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =     49997 count(s)
* Average  Swapped =      7142 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     10000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 10000 Count(s)
Total Array size   = 800000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.015013800/  0.002144829/  0.001000900/  0.003002700
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.005004400/  0.000714914/  0.000000000/  0.002002100
- std::sort(inline-func):   0.011010600/  0.001572943/  0.001000900/  0.002002000
- std::sort(functor):       0.005004700/  0.000714957/  0.000000000/  0.001001200
- std::sort(lambda):        0.004003800/  0.000571971/  0.000000000/  0.001001200
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.012011900/  0.001715986/  0.001001200/  0.002002100
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           1.372309000/  0.196044143/  0.000000000/  0.365349100  162016591/   23145227/          0/   49985001
- Shaker sort<S>:           1.089038900/  0.155576986/  0.000000000/  0.273260400  162016591/   23145227/          0/   49985001
- Odd-Even sort<S>:         0.801762900/  0.114537557/  0.000000000/  0.192183200  162016591/   23145227/          0/   49985001
- Shear sort:               0.027026200/  0.003860886/  0.001000900/  0.006005900    9944116/    1420588/     485134/    1892312
- Comb sort:                0.008007600/  0.001143943/  0.001000800/  0.002002100     257142/      36734/          0/      58823
- Gnome sort<S>:            0.915874700/  0.130839243/  0.000000000/  0.286273100  162016591/   23145227/          0/   49985001
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.005004700/  0.000714957/  0.000000000/  0.001001200     152242/      21748/       3333/      36402
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.861821700/  0.123117386/  0.121114900/  0.124118900      48300/       6900/          0/       9995
- Heap sort:                0.013016000/  0.001859429/  0.001002000/  0.002003500    1060452/     151493/     116627/     218680
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.797760500/  0.113965786/  0.000000000/  0.248244600      59947/       8563/          0/       9999
- Shell sort:               0.004003600/  0.000571943/  0.000000000/  0.001001500     238044/      34006/          0/      49469
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.496472400/  0.070924629/  0.000000000/  0.156148300     303524/      43360/          0/      60442
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.004003200/  0.000571886/  0.000000000/  0.001001200     134548/      19221/          0/      33844
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.003002900/  0.000428986/  0.000000000/  0.001001200      49997/       7142/          0/      10000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=31152)
(result1=31152)
(result3=31152)
(result4=31152)
(result5=31152)
(result6=31152)
(result8=31152)
(result9=31152)
(result10=31152)
(result11=31095)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
    (data10_def=00000000)
    (data11_def=00000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=0110EC10)
    (data1_def=0110EC10)
    (data2_def=0110EC10)
    (data3_def=0110EC10)
    (data4_def=0110EC10)
    (data5_def=0110EC10)
    (data8_def=0110EC10)
    (data9_def=0110EC10)
    (data10_def=0110EC10)
    (data11_def=0110EC10)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0110EC10)
    (data1=0110EC10)
    (data2=0110EC10)
    (data3=0110EC10)
    (data4=0110EC10)
    (data5=0110EC10)
    (data8=0110EC10)
    (data9=0110EC10)
    (data10=0110EC10)
    (data11=0110EC10)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0110EC10)
    (data1_val=0110EC10)
    (data2_val=0110EC10)
    (data3_val=0110EC10)
    (data4_val=0110EC10)
    (data5_val=0110EC10)
    (data8_val=0110EC10)
    (data9_val=0110EC10)
    (data10_val=0110EC10)
    (data11_val=0110EC10)
target=0, linearSearch=[0, 2342]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=010EC3E0)
    (data1_def=010EC3E0)
    (data2_def=010EC3E0)
    (data3_def=010EC3E0)
    (data4_def=010EC3E0)
    (data5_def=010EC3E0)
    (data8_def=010EC3E0)
    (data9_def=010EC3E0)
    (data10_def=010EC3E0)
    (data11_def=010EC3E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=010EC3E0)
    (data1=010EC3E0)
    (data2=010EC3E0)
    (data3=010EC3E0)
    (data4=010EC3E0)
    (data5=010EC3E0)
    (data8=010EC3E0)
    (data9=010EC3E0)
    (data10=010EC3E0)
    (data11=010EC3E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=010EC3E0)
    (data1_val=010EC3E0)
    (data2_val=010EC3E0)
    (data3_val=010EC3E0)
    (data4_val=010EC3E0)
    (data5_val=010EC3E0)
    (data8_val=010EC3E0)
    (data9_val=010EC3E0)
    (data10_val=010EC3E0)
    (data11_val=010EC3E0)
target=2, linearSearch=[2, 575]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=010F4E50)
    (data1_def=010F4E50)
    (data2_def=010F4E50)
    (data3_def=010F4E50)
    (data4_def=010F4E50)
    (data5_def=010F4E50)
    (data8_def=010F4E50)
    (data9_def=010F4E50)
    (data10_def=010F4E50)
    (data11_def=010F4E50)
  linearSearch(*array_shuffle1, search_predicate);
    (data=010F4E50)
    (data1=010F4E50)
    (data2=010F4E50)
    (data3=010F4E50)
    (data4=010F4E50)
    (data5=010F4E50)
    (data8=010F4E50)
    (data9=010F4E50)
    (data10=010F4E50)
    (data11=010F4E50)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=010F4E50)
    (data1_val=010F4E50)
    (data2_val=010F4E50)
    (data3_val=010F4E50)
    (data4_val=010F4E50)
    (data5_val=010F4E50)
    (data8_val=010F4E50)
    (data9_val=010F4E50)
    (data10_val=010F4E50)
    (data11_val=010F4E50)
target=6, linearSearch=[6, 1018]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=0110C1E0)
    (data1_def=0110C1E0)
    (data2_def=0110C1E0)
    (data3_def=0110C1E0)
    (data4_def=0110C1E0)
    (data5_def=0110C1E0)
    (data8_def=0110C1E0)
    (data9_def=0110C1E0)
    (data10_def=0110C1E0)
    (data11_def=0110C1E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0110C1E0)
    (data1=0110C1E0)
    (data2=0110C1E0)
    (data3=0110C1E0)
    (data4=0110C1E0)
    (data5=0110C1E0)
    (data8=0110C1E0)
    (data9=0110C1E0)
    (data10=0110C1E0)
    (data11=0110C1E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0110C1E0)
    (data1_val=0110C1E0)
    (data2_val=0110C1E0)
    (data3_val=0110C1E0)
    (data4_val=0110C1E0)
    (data5_val=0110C1E0)
    (data8_val=0110C1E0)
    (data9_val=0110C1E0)
    (data10_val=0110C1E0)
    (data11_val=0110C1E0)
target=14, linearSearch=[14, 2207]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=010FF620)
    (data1_def=010FF620)
    (data2_def=010FF620)
    (data3_def=010FF620)
    (data4_def=010FF620)
    (data5_def=010FF620)
    (data8_def=010FF620)
    (data9_def=010FF620)
    (data10_def=010FF620)
    (data11_def=010FF620)
  linearSearch(*array_shuffle1, search_predicate);
    (data=010FF620)
    (data1=010FF620)
    (data2=010FF620)
    (data3=010FF620)
    (data4=010FF620)
    (data5=010FF620)
    (data8=010FF620)
    (data9=010FF620)
    (data10=010FF620)
    (data11=010FF620)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=010FF620)
    (data1_val=010FF620)
    (data2_val=010FF620)
    (data3_val=010FF620)
    (data4_val=010FF620)
    (data5_val=010FF620)
    (data8_val=010FF620)
    (data9_val=010FF620)
    (data10_val=010FF620)
    (data11_val=010FF620)
target=30, linearSearch=[30, 1555]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=010F42C0)
    (data1_def=010F42C0)
    (data2_def=010F42C0)
    (data3_def=010F42C0)
    (data4_def=010F42C0)
    (data5_def=010F42C0)
    (data8_def=010F42C0)
    (data9_def=010F42C0)
    (data10_def=010F42C0)
    (data11_def=010F42C0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=010F42C0)
    (data1=010F42C0)
    (data2=010F42C0)
    (data3=010F42C0)
    (data4=010F42C0)
    (data5=010F42C0)
    (data8=010F42C0)
    (data9=010F42C0)
    (data10=010F42C0)
    (data11=010F42C0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=010F42C0)
    (data1_val=010F42C0)
    (data2_val=010F42C0)
    (data3_val=010F42C0)
    (data4_val=010F42C0)
    (data5_val=010F42C0)
    (data8_val=010F42C0)
    (data9_val=010F42C0)
    (data10_val=010F42C0)
    (data11_val=010F42C0)
target=62, linearSearch=[62, 981]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=010FA300)
    (data1_def=010FA300)
    (data2_def=010FA300)
    (data3_def=010FA300)
    (data4_def=010FA300)
    (data5_def=010FA300)
    (data8_def=010FA300)
    (data9_def=010FA300)
    (data10_def=010FA300)
    (data11_def=010FA300)
  linearSearch(*array_shuffle1, search_predicate);
    (data=010FA300)
    (data1=010FA300)
    (data2=010FA300)
    (data3=010FA300)
    (data4=010FA300)
    (data5=010FA300)
    (data8=010FA300)
    (data9=010FA300)
    (data10=010FA300)
    (data11=010FA300)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=010FA300)
    (data1_val=010FA300)
    (data2_val=010FA300)
    (data3_val=010FA300)
    (data4_val=010FA300)
    (data5_val=010FA300)
    (data8_val=010FA300)
    (data9_val=010FA300)
    (data10_val=010FA300)
    (data11_val=010FA300)
target=126, linearSearch=[126, 1289]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=01180540)
    (data1_def=01180540)
    (data2_def=01180540)
    (data3_def=01180540)
    (data4_def=01180540)
    (data5_def=01180540)
    (data8_def=01180540)
    (data9_def=01180540)
    (data10_def=01180540)
    (data11_def=01180540)
  linearSearch(*array_shuffle1, search_predicate);
    (data=01180540)
    (data1=01180540)
    (data2=01180540)
    (data3=01180540)
    (data4=01180540)
    (data5=01180540)
    (data8=01180540)
    (data9=01180540)
    (data10=01180540)
    (data11=01180540)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=01180540)
    (data1_val=01180540)
    (data2_val=01180540)
    (data3_val=01180540)
    (data4_val=01180540)
    (data5_val=01180540)
    (data8_val=01180540)
    (data9_val=01180540)
    (data10_val=01180540)
    (data11_val=01180540)
target=254, linearSearch=[254, 8157]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
   (data10_def=00000000)
    (data11_def=00000000)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=010E1030)
    (data1_def=010E1030)
    (data2_def=010E1030)
    (data3_def=010E1030)
    (data4_def=010E1030)
    (data5_def=010E1030)
    (data8_def=010E1030)
    (data9_def=010E1030)
   (data10_def=010E1030)
    (data11_def=010E1030)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=010E1030)
    (data1=010E1030)
    (data2=010E1030)
    (data3=010E1030)
    (data4=010E1030)
    (data5=010E1030)
    (data8=010E1030)
    (data9=010E1030)
    (data10=010E1030)
    (data11=010E1030)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=010E1030)
    (data1_val=010E1030)
    (data2_val=010E1030)
    (data3_val=010E1030)
    (data4_val=010E1030)
    (data5_val=010E1030)
    (data8_val=010E1030)
    (data9_val=010E1030)
    (data10_val=010E1030)
    (data11_val=010E1030)
target=0, binarySearch=[0, 2342]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=010E1210)
    (data1_def=010E1210)
    (data2_def=010E1210)
    (data3_def=010E1210)
    (data4_def=010E1210)
    (data5_def=010E1210)
    (data8_def=010E1210)
    (data9_def=010E1210)
   (data10_def=010E1210)
    (data11_def=010E1210)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=010E1210)
    (data1=010E1210)
    (data2=010E1210)
    (data3=010E1210)
    (data4=010E1210)
    (data5=010E1210)
    (data8=010E1210)
    (data9=010E1210)
    (data10=010E1210)
    (data11=010E1210)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=010E1210)
    (data1_val=010E1210)
    (data2_val=010E1210)
    (data3_val=010E1210)
    (data4_val=010E1210)
    (data5_val=010E1210)
    (data8_val=010E1210)
    (data9_val=010E1210)
    (data10_val=010E1210)
    (data11_val=010E1210)
target=2, binarySearch=[2, 6831]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=010E15D0)
    (data1_def=010E15D0)
    (data2_def=010E15D0)
    (data3_def=010E15D0)
    (data4_def=010E15D0)
    (data5_def=010E15D0)
    (data8_def=010E15D0)
    (data9_def=010E15D0)
   (data10_def=010E15D0)
    (data11_def=010E15D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=010E15D0)
    (data1=010E15D0)
    (data2=010E15D0)
    (data3=010E15D0)
    (data4=010E15D0)
    (data5=010E15D0)
    (data8=010E15D0)
    (data9=010E15D0)
    (data10=010E15D0)
    (data11=010E15D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=010E15D0)
    (data1_val=010E15D0)
    (data2_val=010E15D0)
    (data3_val=010E15D0)
    (data4_val=010E15D0)
    (data5_val=010E15D0)
    (data8_val=010E15D0)
    (data9_val=010E15D0)
    (data10_val=010E15D0)
    (data11_val=010E15D0)
target=6, binarySearch=[6, 1018]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=010E1D50)
    (data1_def=010E1D50)
    (data2_def=010E1D50)
    (data3_def=010E1D50)
    (data4_def=010E1D50)
    (data5_def=010E1D50)
    (data8_def=010E1D50)
    (data9_def=010E1D50)
   (data10_def=010E1D50)
    (data11_def=010E1D50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=010E1D50)
    (data1=010E1D50)
    (data2=010E1D50)
    (data3=010E1D50)
    (data4=010E1D50)
    (data5=010E1D50)
    (data8=010E1D50)
    (data9=010E1D50)
    (data10=010E1D50)
    (data11=010E1D50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=010E1D50)
    (data1_val=010E1D50)
    (data2_val=010E1D50)
    (data3_val=010E1D50)
    (data4_val=010E1D50)
    (data5_val=010E1D50)
    (data8_val=010E1D50)
    (data9_val=010E1D50)
    (data10_val=010E1D50)
    (data11_val=010E1D50)
target=14, binarySearch=[14, 4706]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=010E2C50)
    (data1_def=010E2C50)
    (data2_def=010E2C50)
    (data3_def=010E2C50)
    (data4_def=010E2C50)
    (data5_def=010E2C50)
    (data8_def=010E2C50)
    (data9_def=010E2C50)
   (data10_def=010E2C50)
    (data11_def=010E2C50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=010E2C50)
    (data1=010E2C50)
    (data2=010E2C50)
    (data3=010E2C50)
    (data4=010E2C50)
    (data5=010E2C50)
    (data8=010E2C50)
    (data9=010E2C50)
    (data10=010E2C50)
    (data11=010E2C50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=010E2C50)
    (data1_val=010E2C50)
    (data2_val=010E2C50)
    (data3_val=010E2C50)
    (data4_val=010E2C50)
    (data5_val=010E2C50)
    (data8_val=010E2C50)
    (data9_val=010E2C50)
    (data10_val=010E2C50)
    (data11_val=010E2C50)
target=30, binarySearch=[30, 5065]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=010E4A50)
    (data1_def=010E4A50)
    (data2_def=010E4A50)
    (data3_def=010E4A50)
    (data4_def=010E4A50)
    (data5_def=010E4A50)
    (data8_def=010E4A50)
    (data9_def=010E4A50)
   (data10_def=010E4A50)
    (data11_def=010E4A50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=010E4A50)
    (data1=010E4A50)
    (data2=010E4A50)
    (data3=010E4A50)
    (data4=010E4A50)
    (data5=010E4A50)
    (data8=010E4A50)
    (data9=010E4A50)
    (data10=010E4A50)
    (data11=010E4A50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=010E4A50)
    (data1_val=010E4A50)
    (data2_val=010E4A50)
    (data3_val=010E4A50)
    (data4_val=010E4A50)
    (data5_val=010E4A50)
    (data8_val=010E4A50)
    (data9_val=010E4A50)
    (data10_val=010E4A50)
    (data11_val=010E4A50)
target=62, binarySearch=[62, 9221]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=010E8650)
    (data1_def=010E8650)
    (data2_def=010E8650)
    (data3_def=010E8650)
    (data4_def=010E8650)
    (data5_def=010E8650)
    (data8_def=010E8650)
    (data9_def=010E8650)
   (data10_def=010E8650)
    (data11_def=010E8650)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=010E8650)
    (data1=010E8650)
    (data2=010E8650)
    (data3=010E8650)
    (data4=010E8650)
    (data5=010E8650)
    (data8=010E8650)
    (data9=010E8650)
    (data10=010E8650)
    (data11=010E8650)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=010E8650)
    (data1_val=010E8650)
    (data2_val=010E8650)
    (data3_val=010E8650)
    (data4_val=010E8650)
    (data5_val=010E8650)
    (data8_val=010E8650)
    (data9_val=010E8650)
    (data10_val=010E8650)
    (data11_val=010E8650)
target=126, binarySearch=[126, 1289]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=010EFE50)
    (data1_def=010EFE50)
    (data2_def=010EFE50)
    (data3_def=010EFE50)
    (data4_def=010EFE50)
    (data5_def=010EFE50)
    (data8_def=010EFE50)
    (data9_def=010EFE50)
   (data10_def=010EFE50)
    (data11_def=010EFE50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=010EFE50)
    (data1=010EFE50)
    (data2=010EFE50)
    (data3=010EFE50)
    (data4=010EFE50)
    (data5=010EFE50)
    (data8=010EFE50)
    (data9=010EFE50)
    (data10=010EFE50)
    (data11=010EFE50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=010EFE50)
    (data1_val=010EFE50)
    (data2_val=010EFE50)
    (data3_val=010EFE50)
    (data4_val=010EFE50)
    (data5_val=010EFE50)
    (data8_val=010EFE50)
    (data9_val=010EFE50)
    (data10_val=010EFE50)
    (data11_val=010EFE50)
target=254, binarySearch=[254, 8763]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=6.507205400 sec.
