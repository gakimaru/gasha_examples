============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=4951 / record(s)=10000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=5002 / record(s)=10000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=4984 / record(s)=10000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=10000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=3333 / record(s)=10000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=10000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=4976 / record(s)=10000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.003002600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002001500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.003002600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.013011700 sec.
* Average time     = 0.001858814 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.003002900 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.007006700 sec.
* Average time     = 0.001000957 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002002100 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.006005500 sec.
* Average time     = 0.000857929 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001400 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.006005900 sec.
* Average time     = 0.000857986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001003800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000998000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.005004700 sec.
* Average time     = 0.000714957 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001003800 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000995100 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002002000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.011004400 sec.
* Average time     = 0.001572057 sec.
* Min time         = 0.000995100 sec.
* Max time         = 0.002002100 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.275263100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.235224100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.233222000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.303288600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.069064800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.279267800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 1.395330400 sec.
* Average time     = 0.199332914 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.303288600 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.204192700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.243231700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.199190000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.321306800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.239227300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 1.207148500 sec.
* Average time     = 0.172449786 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.321306800 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.161152500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.136129700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.132125800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.194185000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.059056300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.159151300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.841800600 sec.
* Average time     = 0.120257229 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.194185000 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.005005000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1922616 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.005004400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1902755 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.005004700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1895908 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=494802 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.003002700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1474414 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.002002000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=514605 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.005004700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1903279 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.026024300 sec.
* Average time     = 0.003717757 sec.
* Min time         = 0.001000800 sec.
* Max time         = 0.005005000 sec.
* Total Swapped    =  10108379 count(s)
* Average  Swapped =   1444054 count(s)
* Min Swapped      =    494802 count(s)
* Max Swapped      =   1922616 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57500 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002002000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57587 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57584 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=18345 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=7303 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=58823 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.005004400 sec.
* Average time     = 0.000714914 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002002000 sec.
* Total Swapped    =    257142 count(s)
* Average  Swapped =     36734 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     58823 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.156149800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.123117300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.156147600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.290276200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.193183900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 0.918874800 sec.
* Average time     = 0.131267829 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.290276200 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33719 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33677 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33444 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=36402 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.005004400 sec.
* Average time     = 0.000714914 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =    152242 count(s)
* Average  Swapped =     21748 count(s)
* Min Swapped      =      3333 count(s)
* Max Swapped      =     36402 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.123117400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.123117900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9995 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.124118500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.124117300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.126119700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.126119900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.123117300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9989 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.869828000 sec.
* Average time     = 0.124261143 sec.
* Min time         = 0.123117300 sec.
* Max time         = 0.126119900 sec.
* Total Swapped    =     48300 count(s)
* Average  Swapped =      6900 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129635 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129583 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129778 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=218680 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=116627 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=213143 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=123006 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.009009100 sec.
* Average time     = 0.001287014 sec.
* Min time         = 0.001000900 sec.
* Max time         = 0.002002100 sec.
* Total Swapped    =   1060452 count(s)
* Average  Swapped =    151493 count(s)
* Min Swapped      =    116627 count(s)
* Max Swapped      =    218680 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.117113200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9985 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.116110900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9987 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.114107900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9983 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.248235300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.189181000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9994 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.784748300 sec.
* Average time     = 0.112106900 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.248235300 sec.
* Total Swapped    =     59947 count(s)
* Average  Swapped =      8563 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48473 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002002000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48925 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48799 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=37222 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=5156 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49469 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.006005800 sec.
* Average time     = 0.000857971 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002002000 sec.
* Total Swapped    =    238044 count(s)
* Average  Swapped =     34006 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     49469 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.079075100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58291 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.091086500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58193 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.085079800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58188 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.177170700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=60442 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.134127300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58404 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.567540300 sec.
* Average time     = 0.081077186 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.177170700 sec.
* Total Swapped    =    303524 count(s)
* Average  Swapped =     43360 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     60442 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31152 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31250 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31256 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=6022 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1024 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33844 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.000000000 sec.
* Average time     = 0.000000000 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.000000000 sec.
* Total Swapped    =    134548 count(s)
* Average  Swapped =     19221 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     33844 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9996 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9998 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.002001400 sec.
* Average time     = 0.000285914 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000800 sec.
* Total Swapped    =     49997 count(s)
* Average  Swapped =      7142 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     10000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 10000 Count(s)
Total Array size   = 800000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.013011700/  0.001858814/  0.000000000/  0.003002900
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.007006700/  0.001000957/  0.000000000/  0.002002100
- std::sort(inline-func):   0.006005500/  0.000857929/  0.000000000/  0.001001400
- std::sort(functor):       0.006005900/  0.000857986/  0.000000000/  0.001001200
- std::sort(lambda):        0.005004700/  0.000714957/  0.000000000/  0.001003800
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.011004400/  0.001572057/  0.000995100/  0.002002100
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           1.395330400/  0.199332914/  0.000000000/  0.303288600  162016591/   23145227/          0/   49985001
- Shaker sort<S>:           1.207148500/  0.172449786/  0.000000000/  0.321306800  162016591/   23145227/          0/   49985001
- Odd-Even sort<S>:         0.841800600/  0.120257229/  0.000000000/  0.194185000  162016591/   23145227/          0/   49985001
- Shear sort:               0.026024300/  0.003717757/  0.001000800/  0.005005000   10108379/    1444054/     494802/    1922616
- Comb sort:                0.005004400/  0.000714914/  0.000000000/  0.002002000     257142/      36734/          0/      58823
- Gnome sort<S>:            0.918874800/  0.131267829/  0.000000000/  0.290276200  162016591/   23145227/          0/   49985001
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.005004400/  0.000714914/  0.000000000/  0.001001200     152242/      21748/       3333/      36402
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.869828000/  0.124261143/  0.123117300/  0.126119900      48300/       6900/          0/       9995
- Heap sort:                0.009009100/  0.001287014/  0.001000900/  0.002002100    1060452/     151493/     116627/     218680
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.784748300/  0.112106900/  0.000000000/  0.248235300      59947/       8563/          0/       9999
- Shell sort:               0.006005800/  0.000857971/  0.000000000/  0.002002000     238044/      34006/          0/      49469
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.567540300/  0.081077186/  0.000000000/  0.177170700     303524/      43360/          0/      60442
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.000000000/  0.000000000/  0.000000000/  0.000000000     134548/      19221/          0/      33844
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.002001400/  0.000285914/  0.000000000/  0.001000800      49997/       7142/          0/      10000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=31152)
(result1=31152)
(result3=31152)
(result4=31152)
(result5=31152)
(result6=31152)
(result8=31152)
(result9=31152)
(result10=31152)
(result11=31095)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
    (data10_def=00000000)
    (data11_def=00000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=007F9C10)
    (data1_def=007F9C10)
    (data2_def=007F9C10)
    (data3_def=007F9C10)
    (data4_def=007F9C10)
    (data5_def=007F9C10)
    (data8_def=007F9C10)
    (data9_def=007F9C10)
    (data10_def=007F9C10)
    (data11_def=007F9C10)
  linearSearch(*array_shuffle1, search_predicate);
    (data=007F9C10)
    (data1=007F9C10)
    (data2=007F9C10)
    (data3=007F9C10)
    (data4=007F9C10)
    (data5=007F9C10)
    (data8=007F9C10)
    (data9=007F9C10)
    (data10=007F9C10)
    (data11=007F9C10)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=007F9C10)
    (data1_val=007F9C10)
    (data2_val=007F9C10)
    (data3_val=007F9C10)
    (data4_val=007F9C10)
    (data5_val=007F9C10)
    (data8_val=007F9C10)
    (data9_val=007F9C10)
    (data10_val=007F9C10)
    (data11_val=007F9C10)
target=0, linearSearch=[0, 2342]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=007D73E0)
    (data1_def=007D73E0)
    (data2_def=007D73E0)
    (data3_def=007D73E0)
    (data4_def=007D73E0)
    (data5_def=007D73E0)
    (data8_def=007D73E0)
    (data9_def=007D73E0)
    (data10_def=007D73E0)
    (data11_def=007D73E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=007D73E0)
    (data1=007D73E0)
    (data2=007D73E0)
    (data3=007D73E0)
    (data4=007D73E0)
    (data5=007D73E0)
    (data8=007D73E0)
    (data9=007D73E0)
    (data10=007D73E0)
    (data11=007D73E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=007D73E0)
    (data1_val=007D73E0)
    (data2_val=007D73E0)
    (data3_val=007D73E0)
    (data4_val=007D73E0)
    (data5_val=007D73E0)
    (data8_val=007D73E0)
    (data9_val=007D73E0)
    (data10_val=007D73E0)
    (data11_val=007D73E0)
target=2, linearSearch=[2, 575]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=007DFE50)
    (data1_def=007DFE50)
    (data2_def=007DFE50)
    (data3_def=007DFE50)
    (data4_def=007DFE50)
    (data5_def=007DFE50)
    (data8_def=007DFE50)
    (data9_def=007DFE50)
    (data10_def=007DFE50)
    (data11_def=007DFE50)
  linearSearch(*array_shuffle1, search_predicate);
    (data=007DFE50)
    (data1=007DFE50)
    (data2=007DFE50)
    (data3=007DFE50)
    (data4=007DFE50)
    (data5=007DFE50)
    (data8=007DFE50)
    (data9=007DFE50)
    (data10=007DFE50)
    (data11=007DFE50)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=007DFE50)
    (data1_val=007DFE50)
    (data2_val=007DFE50)
    (data3_val=007DFE50)
    (data4_val=007DFE50)
    (data5_val=007DFE50)
    (data8_val=007DFE50)
    (data9_val=007DFE50)
    (data10_val=007DFE50)
    (data11_val=007DFE50)
target=6, linearSearch=[6, 1018]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=007F71E0)
    (data1_def=007F71E0)
    (data2_def=007F71E0)
    (data3_def=007F71E0)
    (data4_def=007F71E0)
    (data5_def=007F71E0)
    (data8_def=007F71E0)
    (data9_def=007F71E0)
    (data10_def=007F71E0)
    (data11_def=007F71E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=007F71E0)
    (data1=007F71E0)
    (data2=007F71E0)
    (data3=007F71E0)
    (data4=007F71E0)
    (data5=007F71E0)
    (data8=007F71E0)
    (data9=007F71E0)
    (data10=007F71E0)
    (data11=007F71E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=007F71E0)
    (data1_val=007F71E0)
    (data2_val=007F71E0)
    (data3_val=007F71E0)
    (data4_val=007F71E0)
    (data5_val=007F71E0)
    (data8_val=007F71E0)
    (data9_val=007F71E0)
    (data10_val=007F71E0)
    (data11_val=007F71E0)
target=14, linearSearch=[14, 2207]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=007EA620)
    (data1_def=007EA620)
    (data2_def=007EA620)
    (data3_def=007EA620)
    (data4_def=007EA620)
    (data5_def=007EA620)
    (data8_def=007EA620)
    (data9_def=007EA620)
    (data10_def=007EA620)
    (data11_def=007EA620)
  linearSearch(*array_shuffle1, search_predicate);
    (data=007EA620)
    (data1=007EA620)
    (data2=007EA620)
    (data3=007EA620)
    (data4=007EA620)
    (data5=007EA620)
    (data8=007EA620)
    (data9=007EA620)
    (data10=007EA620)
    (data11=007EA620)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=007EA620)
    (data1_val=007EA620)
    (data2_val=007EA620)
    (data3_val=007EA620)
    (data4_val=007EA620)
    (data5_val=007EA620)
    (data8_val=007EA620)
    (data9_val=007EA620)
    (data10_val=007EA620)
    (data11_val=007EA620)
target=30, linearSearch=[30, 1555]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=007DF2C0)
    (data1_def=007DF2C0)
    (data2_def=007DF2C0)
    (data3_def=007DF2C0)
    (data4_def=007DF2C0)
    (data5_def=007DF2C0)
    (data8_def=007DF2C0)
    (data9_def=007DF2C0)
    (data10_def=007DF2C0)
    (data11_def=007DF2C0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=007DF2C0)
    (data1=007DF2C0)
    (data2=007DF2C0)
    (data3=007DF2C0)
    (data4=007DF2C0)
    (data5=007DF2C0)
    (data8=007DF2C0)
    (data9=007DF2C0)
    (data10=007DF2C0)
    (data11=007DF2C0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=007DF2C0)
    (data1_val=007DF2C0)
    (data2_val=007DF2C0)
    (data3_val=007DF2C0)
    (data4_val=007DF2C0)
    (data5_val=007DF2C0)
    (data8_val=007DF2C0)
    (data9_val=007DF2C0)
    (data10_val=007DF2C0)
    (data11_val=007DF2C0)
target=62, linearSearch=[62, 981]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=007E5300)
    (data1_def=007E5300)
    (data2_def=007E5300)
    (data3_def=007E5300)
    (data4_def=007E5300)
    (data5_def=007E5300)
    (data8_def=007E5300)
    (data9_def=007E5300)
    (data10_def=007E5300)
    (data11_def=007E5300)
  linearSearch(*array_shuffle1, search_predicate);
    (data=007E5300)
    (data1=007E5300)
    (data2=007E5300)
    (data3=007E5300)
    (data4=007E5300)
    (data5=007E5300)
    (data8=007E5300)
    (data9=007E5300)
    (data10=007E5300)
    (data11=007E5300)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=007E5300)
    (data1_val=007E5300)
    (data2_val=007E5300)
    (data3_val=007E5300)
    (data4_val=007E5300)
    (data5_val=007E5300)
    (data8_val=007E5300)
    (data9_val=007E5300)
    (data10_val=007E5300)
    (data11_val=007E5300)
target=126, linearSearch=[126, 1289]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=0086B540)
    (data1_def=0086B540)
    (data2_def=0086B540)
    (data3_def=0086B540)
    (data4_def=0086B540)
    (data5_def=0086B540)
    (data8_def=0086B540)
    (data9_def=0086B540)
    (data10_def=0086B540)
    (data11_def=0086B540)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0086B540)
    (data1=0086B540)
    (data2=0086B540)
    (data3=0086B540)
    (data4=0086B540)
    (data5=0086B540)
    (data8=0086B540)
    (data9=0086B540)
    (data10=0086B540)
    (data11=0086B540)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0086B540)
    (data1_val=0086B540)
    (data2_val=0086B540)
    (data3_val=0086B540)
    (data4_val=0086B540)
    (data5_val=0086B540)
    (data8_val=0086B540)
    (data9_val=0086B540)
    (data10_val=0086B540)
    (data11_val=0086B540)
target=254, linearSearch=[254, 8157]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
   (data10_def=00000000)
    (data11_def=00000000)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=007CC030)
    (data1_def=007CC030)
    (data2_def=007CC030)
    (data3_def=007CC030)
    (data4_def=007CC030)
    (data5_def=007CC030)
    (data8_def=007CC030)
    (data9_def=007CC030)
   (data10_def=007CC030)
    (data11_def=007CC030)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=007CC030)
    (data1=007CC030)
    (data2=007CC030)
    (data3=007CC030)
    (data4=007CC030)
    (data5=007CC030)
    (data8=007CC030)
    (data9=007CC030)
    (data10=007CC030)
    (data11=007CC030)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=007CC030)
    (data1_val=007CC030)
    (data2_val=007CC030)
    (data3_val=007CC030)
    (data4_val=007CC030)
    (data5_val=007CC030)
    (data8_val=007CC030)
    (data9_val=007CC030)
    (data10_val=007CC030)
    (data11_val=007CC030)
target=0, binarySearch=[0, 2342]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=007CC210)
    (data1_def=007CC210)
    (data2_def=007CC210)
    (data3_def=007CC210)
    (data4_def=007CC210)
    (data5_def=007CC210)
    (data8_def=007CC210)
    (data9_def=007CC210)
   (data10_def=007CC210)
    (data11_def=007CC210)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=007CC210)
    (data1=007CC210)
    (data2=007CC210)
    (data3=007CC210)
    (data4=007CC210)
    (data5=007CC210)
    (data8=007CC210)
    (data9=007CC210)
    (data10=007CC210)
    (data11=007CC210)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=007CC210)
    (data1_val=007CC210)
    (data2_val=007CC210)
    (data3_val=007CC210)
    (data4_val=007CC210)
    (data5_val=007CC210)
    (data8_val=007CC210)
    (data9_val=007CC210)
    (data10_val=007CC210)
    (data11_val=007CC210)
target=2, binarySearch=[2, 6831]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=007CC5D0)
    (data1_def=007CC5D0)
    (data2_def=007CC5D0)
    (data3_def=007CC5D0)
    (data4_def=007CC5D0)
    (data5_def=007CC5D0)
    (data8_def=007CC5D0)
    (data9_def=007CC5D0)
   (data10_def=007CC5D0)
    (data11_def=007CC5D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=007CC5D0)
    (data1=007CC5D0)
    (data2=007CC5D0)
    (data3=007CC5D0)
    (data4=007CC5D0)
    (data5=007CC5D0)
    (data8=007CC5D0)
    (data9=007CC5D0)
    (data10=007CC5D0)
    (data11=007CC5D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=007CC5D0)
    (data1_val=007CC5D0)
    (data2_val=007CC5D0)
    (data3_val=007CC5D0)
    (data4_val=007CC5D0)
    (data5_val=007CC5D0)
    (data8_val=007CC5D0)
    (data9_val=007CC5D0)
    (data10_val=007CC5D0)
    (data11_val=007CC5D0)
target=6, binarySearch=[6, 1018]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=007CCD50)
    (data1_def=007CCD50)
    (data2_def=007CCD50)
    (data3_def=007CCD50)
    (data4_def=007CCD50)
    (data5_def=007CCD50)
    (data8_def=007CCD50)
    (data9_def=007CCD50)
   (data10_def=007CCD50)
    (data11_def=007CCD50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=007CCD50)
    (data1=007CCD50)
    (data2=007CCD50)
    (data3=007CCD50)
    (data4=007CCD50)
    (data5=007CCD50)
    (data8=007CCD50)
    (data9=007CCD50)
    (data10=007CCD50)
    (data11=007CCD50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=007CCD50)
    (data1_val=007CCD50)
    (data2_val=007CCD50)
    (data3_val=007CCD50)
    (data4_val=007CCD50)
    (data5_val=007CCD50)
    (data8_val=007CCD50)
    (data9_val=007CCD50)
    (data10_val=007CCD50)
    (data11_val=007CCD50)
target=14, binarySearch=[14, 4706]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=007CDC50)
    (data1_def=007CDC50)
    (data2_def=007CDC50)
    (data3_def=007CDC50)
    (data4_def=007CDC50)
    (data5_def=007CDC50)
    (data8_def=007CDC50)
    (data9_def=007CDC50)
   (data10_def=007CDC50)
    (data11_def=007CDC50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=007CDC50)
    (data1=007CDC50)
    (data2=007CDC50)
    (data3=007CDC50)
    (data4=007CDC50)
    (data5=007CDC50)
    (data8=007CDC50)
    (data9=007CDC50)
    (data10=007CDC50)
    (data11=007CDC50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=007CDC50)
    (data1_val=007CDC50)
    (data2_val=007CDC50)
    (data3_val=007CDC50)
    (data4_val=007CDC50)
    (data5_val=007CDC50)
    (data8_val=007CDC50)
    (data9_val=007CDC50)
    (data10_val=007CDC50)
    (data11_val=007CDC50)
target=30, binarySearch=[30, 5065]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=007CFA50)
    (data1_def=007CFA50)
    (data2_def=007CFA50)
    (data3_def=007CFA50)
    (data4_def=007CFA50)
    (data5_def=007CFA50)
    (data8_def=007CFA50)
    (data9_def=007CFA50)
   (data10_def=007CFA50)
    (data11_def=007CFA50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=007CFA50)
    (data1=007CFA50)
    (data2=007CFA50)
    (data3=007CFA50)
    (data4=007CFA50)
    (data5=007CFA50)
    (data8=007CFA50)
    (data9=007CFA50)
    (data10=007CFA50)
    (data11=007CFA50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=007CFA50)
    (data1_val=007CFA50)
    (data2_val=007CFA50)
    (data3_val=007CFA50)
    (data4_val=007CFA50)
    (data5_val=007CFA50)
    (data8_val=007CFA50)
    (data9_val=007CFA50)
    (data10_val=007CFA50)
    (data11_val=007CFA50)
target=62, binarySearch=[62, 9221]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=007D3650)
    (data1_def=007D3650)
    (data2_def=007D3650)
    (data3_def=007D3650)
    (data4_def=007D3650)
    (data5_def=007D3650)
    (data8_def=007D3650)
    (data9_def=007D3650)
   (data10_def=007D3650)
    (data11_def=007D3650)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=007D3650)
    (data1=007D3650)
    (data2=007D3650)
    (data3=007D3650)
    (data4=007D3650)
    (data5=007D3650)
    (data8=007D3650)
    (data9=007D3650)
    (data10=007D3650)
    (data11=007D3650)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=007D3650)
    (data1_val=007D3650)
    (data2_val=007D3650)
    (data3_val=007D3650)
    (data4_val=007D3650)
    (data5_val=007D3650)
    (data8_val=007D3650)
    (data9_val=007D3650)
    (data10_val=007D3650)
    (data11_val=007D3650)
target=126, binarySearch=[126, 1289]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=007DAE50)
    (data1_def=007DAE50)
    (data2_def=007DAE50)
    (data3_def=007DAE50)
    (data4_def=007DAE50)
    (data5_def=007DAE50)
    (data8_def=007DAE50)
    (data9_def=007DAE50)
   (data10_def=007DAE50)
    (data11_def=007DAE50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=007DAE50)
    (data1=007DAE50)
    (data2=007DAE50)
    (data3=007DAE50)
    (data4=007DAE50)
    (data5=007DAE50)
    (data8=007DAE50)
    (data9=007DAE50)
    (data10=007DAE50)
    (data11=007DAE50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=007DAE50)
    (data1_val=007DAE50)
    (data2_val=007DAE50)
    (data3_val=007DAE50)
    (data4_val=007DAE50)
    (data5_val=007DAE50)
    (data8_val=007DAE50)
    (data9_val=007DAE50)
    (data10_val=007DAE50)
    (data11_val=007DAE50)
target=254, binarySearch=[254, 8763]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=6.746424200 sec.
