============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=4951 / record(s)=10000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=5002 / record(s)=10000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=4984 / record(s)=10000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=10000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=3333 / record(s)=10000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=10000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=4976 / record(s)=10000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.003508500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003001400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.003002700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000500800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001002700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000500600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.003003800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.014520500 sec.
* Average time     = 0.002074357 sec.
* Min time         = 0.000500600 sec.
* Max time         = 0.003508500 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001501500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001002000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002002400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.005507400 sec.
* Average time     = 0.000786771 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002002400 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001501500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001501500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001002000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000501500 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000500900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000501200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001500600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.007009200 sec.
* Average time     = 0.001001314 sec.
* Min time         = 0.000500900 sec.
* Max time         = 0.001501500 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001002000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000998800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000500600 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000500600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000500600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.005504700 sec.
* Average time     = 0.000786386 sec.
* Min time         = 0.000500600 sec.
* Max time         = 0.001002000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001002000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001503500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.004507300 sec.
* Average time     = 0.000643900 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001503500 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001501500 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001502000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001501500 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001501200 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.009008600 sec.
* Average time     = 0.001286943 sec.
* Min time         = 0.001000300 sec.
* Max time         = 0.001502000 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.230502800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.258245800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.230219900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.284270200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.070068100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.260247000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 1.333553800 sec.
* Average time     = 0.190507686 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.284270200 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.200711700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.195908500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.187125300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.275487800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.265268000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 1.124501300 sec.
* Average time     = 0.160643043 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.275487800 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.135643800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.131143900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.130124200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.194184400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.060057300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.166158500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.818313600 sec.
* Average time     = 0.116901943 sec.
* Min time         = 0.001001500 sec.
* Max time         = 0.194184400 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.005005000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1892312 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.005004700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1873730 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.005004700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1860168 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=485134 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.003002600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1465201 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=485527 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.005004700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1882044 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.026025000 sec.
* Average time     = 0.003717857 sec.
* Min time         = 0.001001200 sec.
* Max time         = 0.005005000 sec.
* Total Swapped    =   9944116 count(s)
* Average  Swapped =   1420588 count(s)
* Min Swapped      =    485134 count(s)
* Max Swapped      =   1892312 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002002000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57500 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57587 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57584 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=18345 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=7303 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=58823 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.006006200 sec.
* Average time     = 0.000858029 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002002000 sec.
* Total Swapped    =    257142 count(s)
* Average  Swapped =     36734 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     58823 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.157670200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.124626000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.123118400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.276263400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.194445100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 0.876123100 sec.
* Average time     = 0.125160443 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.276263400 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000500600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33719 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000500900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33677 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000500600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33444 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000500900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000500300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000500300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=36402 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.004004500 sec.
* Average time     = 0.000572071 sec.
* Min time         = 0.000500300 sec.
* Max time         = 0.001000900 sec.
* Total Swapped    =    152242 count(s)
* Average  Swapped =     21748 count(s)
* Min Swapped      =      3333 count(s)
* Max Swapped      =     36402 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.124755800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.124118100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9995 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.127122100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.124117700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.124119300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.124116800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.125631800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9989 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.873981600 sec.
* Average time     = 0.124854514 sec.
* Min time         = 0.124116800 sec.
* Max time         = 0.127122100 sec.
* Total Swapped    =     48300 count(s)
* Average  Swapped =      6900 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129635 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129583 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000997700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129778 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.002005600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=218680 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=116627 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=213143 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=123006 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.008008600 sec.
* Average time     = 0.001144086 sec.
* Min time         = 0.000997700 sec.
* Max time         = 0.002005600 sec.
* Total Swapped    =   1060452 count(s)
* Average  Swapped =    151493 count(s)
* Min Swapped      =    116627 count(s)
* Max Swapped      =    218680 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.118152200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9985 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.121116900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9987 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.119125000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9983 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.249761500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.190213600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9994 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.798369200 sec.
* Average time     = 0.114052743 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.249761500 sec.
* Total Swapped    =     59947 count(s)
* Average  Swapped =      8563 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48473 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48925 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001002600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48799 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=37222 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=5156 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49469 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.005006200 sec.
* Average time     = 0.000715171 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001002600 sec.
* Total Swapped    =    238044 count(s)
* Average  Swapped =     34006 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     49469 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.074070800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58291 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.074071000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58193 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.073069000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58188 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.160845500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=60442 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.119628300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58404 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.501684600 sec.
* Average time     = 0.071669229 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.160845500 sec.
* Total Swapped    =    303524 count(s)
* Average  Swapped =     43360 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     60442 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31152 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000501800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31250 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001002000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31256 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=6022 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1024 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33844 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.002504600 sec.
* Average time     = 0.000357800 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001002000 sec.
* Total Swapped    =    134548 count(s)
* Average  Swapped =     19221 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     33844 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9996 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000500600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9998 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000500300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000500300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000500300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.003002700 sec.
* Average time     = 0.000428957 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =     49997 count(s)
* Average  Swapped =      7142 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     10000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 10000 Count(s)
Total Array size   = 800000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.014520500/  0.002074357/  0.000500600/  0.003508500
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.005507400/  0.000786771/  0.000000000/  0.002002400
- std::sort(inline-func):   0.007009200/  0.001001314/  0.000500900/  0.001501500
- std::sort(functor):       0.005504700/  0.000786386/  0.000500600/  0.001002000
- std::sort(lambda):        0.004507300/  0.000643900/  0.000000000/  0.001503500
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.009008600/  0.001286943/  0.001000300/  0.001502000
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           1.333553800/  0.190507686/  0.000000000/  0.284270200  162016591/   23145227/          0/   49985001
- Shaker sort<S>:           1.124501300/  0.160643043/  0.000000000/  0.275487800  162016591/   23145227/          0/   49985001
- Odd-Even sort<S>:         0.818313600/  0.116901943/  0.001001500/  0.194184400  162016591/   23145227/          0/   49985001
- Shear sort:               0.026025000/  0.003717857/  0.001001200/  0.005005000    9944116/    1420588/     485134/    1892312
- Comb sort:                0.006006200/  0.000858029/  0.000000000/  0.002002000     257142/      36734/          0/      58823
- Gnome sort<S>:            0.876123100/  0.125160443/  0.000000000/  0.276263400  162016591/   23145227/          0/   49985001
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.004004500/  0.000572071/  0.000500300/  0.001000900     152242/      21748/       3333/      36402
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.873981600/  0.124854514/  0.124116800/  0.127122100      48300/       6900/          0/       9995
- Heap sort:                0.008008600/  0.001144086/  0.000997700/  0.002005600    1060452/     151493/     116627/     218680
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.798369200/  0.114052743/  0.000000000/  0.249761500      59947/       8563/          0/       9999
- Shell sort:               0.005006200/  0.000715171/  0.000000000/  0.001002600     238044/      34006/          0/      49469
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.501684600/  0.071669229/  0.000000000/  0.160845500     303524/      43360/          0/      60442
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.002504600/  0.000357800/  0.000000000/  0.001002000     134548/      19221/          0/      33844
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.003002700/  0.000428957/  0.000000000/  0.001001200      49997/       7142/          0/      10000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=31152)
(result1=31152)
(result3=31152)
(result4=31152)
(result5=31152)
(result6=31152)
(result8=31152)
(result9=31152)
(result10=31152)
(result11=31095)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
    (data10_def=00000000)
    (data11_def=00000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=02559C10)
    (data1_def=02559C10)
    (data2_def=02559C10)
    (data3_def=02559C10)
    (data4_def=02559C10)
    (data5_def=02559C10)
    (data8_def=02559C10)
    (data9_def=02559C10)
    (data10_def=02559C10)
    (data11_def=02559C10)
  linearSearch(*array_shuffle1, search_predicate);
    (data=02559C10)
    (data1=02559C10)
    (data2=02559C10)
    (data3=02559C10)
    (data4=02559C10)
    (data5=02559C10)
    (data8=02559C10)
    (data9=02559C10)
    (data10=02559C10)
    (data11=02559C10)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=02559C10)
    (data1_val=02559C10)
    (data2_val=02559C10)
    (data3_val=02559C10)
    (data4_val=02559C10)
    (data5_val=02559C10)
    (data8_val=02559C10)
    (data9_val=02559C10)
    (data10_val=02559C10)
    (data11_val=02559C10)
target=0, linearSearch=[0, 2342]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=025373E0)
    (data1_def=025373E0)
    (data2_def=025373E0)
    (data3_def=025373E0)
    (data4_def=025373E0)
    (data5_def=025373E0)
    (data8_def=025373E0)
    (data9_def=025373E0)
    (data10_def=025373E0)
    (data11_def=025373E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=025373E0)
    (data1=025373E0)
    (data2=025373E0)
    (data3=025373E0)
    (data4=025373E0)
    (data5=025373E0)
    (data8=025373E0)
    (data9=025373E0)
    (data10=025373E0)
    (data11=025373E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=025373E0)
    (data1_val=025373E0)
    (data2_val=025373E0)
    (data3_val=025373E0)
    (data4_val=025373E0)
    (data5_val=025373E0)
    (data8_val=025373E0)
    (data9_val=025373E0)
    (data10_val=025373E0)
    (data11_val=025373E0)
target=2, linearSearch=[2, 575]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=0253FE50)
    (data1_def=0253FE50)
    (data2_def=0253FE50)
    (data3_def=0253FE50)
    (data4_def=0253FE50)
    (data5_def=0253FE50)
    (data8_def=0253FE50)
    (data9_def=0253FE50)
    (data10_def=0253FE50)
    (data11_def=0253FE50)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0253FE50)
    (data1=0253FE50)
    (data2=0253FE50)
    (data3=0253FE50)
    (data4=0253FE50)
    (data5=0253FE50)
    (data8=0253FE50)
    (data9=0253FE50)
    (data10=0253FE50)
    (data11=0253FE50)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0253FE50)
    (data1_val=0253FE50)
    (data2_val=0253FE50)
    (data3_val=0253FE50)
    (data4_val=0253FE50)
    (data5_val=0253FE50)
    (data8_val=0253FE50)
    (data9_val=0253FE50)
    (data10_val=0253FE50)
    (data11_val=0253FE50)
target=6, linearSearch=[6, 1018]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=025571E0)
    (data1_def=025571E0)
    (data2_def=025571E0)
    (data3_def=025571E0)
    (data4_def=025571E0)
    (data5_def=025571E0)
    (data8_def=025571E0)
    (data9_def=025571E0)
    (data10_def=025571E0)
    (data11_def=025571E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=025571E0)
    (data1=025571E0)
    (data2=025571E0)
    (data3=025571E0)
    (data4=025571E0)
    (data5=025571E0)
    (data8=025571E0)
    (data9=025571E0)
    (data10=025571E0)
    (data11=025571E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=025571E0)
    (data1_val=025571E0)
    (data2_val=025571E0)
    (data3_val=025571E0)
    (data4_val=025571E0)
    (data5_val=025571E0)
    (data8_val=025571E0)
    (data9_val=025571E0)
    (data10_val=025571E0)
    (data11_val=025571E0)
target=14, linearSearch=[14, 2207]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=0254A620)
    (data1_def=0254A620)
    (data2_def=0254A620)
    (data3_def=0254A620)
    (data4_def=0254A620)
    (data5_def=0254A620)
    (data8_def=0254A620)
    (data9_def=0254A620)
    (data10_def=0254A620)
    (data11_def=0254A620)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0254A620)
    (data1=0254A620)
    (data2=0254A620)
    (data3=0254A620)
    (data4=0254A620)
    (data5=0254A620)
    (data8=0254A620)
    (data9=0254A620)
    (data10=0254A620)
    (data11=0254A620)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0254A620)
    (data1_val=0254A620)
    (data2_val=0254A620)
    (data3_val=0254A620)
    (data4_val=0254A620)
    (data5_val=0254A620)
    (data8_val=0254A620)
    (data9_val=0254A620)
    (data10_val=0254A620)
    (data11_val=0254A620)
target=30, linearSearch=[30, 1555]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=0253F2C0)
    (data1_def=0253F2C0)
    (data2_def=0253F2C0)
    (data3_def=0253F2C0)
    (data4_def=0253F2C0)
    (data5_def=0253F2C0)
    (data8_def=0253F2C0)
    (data9_def=0253F2C0)
    (data10_def=0253F2C0)
    (data11_def=0253F2C0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0253F2C0)
    (data1=0253F2C0)
    (data2=0253F2C0)
    (data3=0253F2C0)
    (data4=0253F2C0)
    (data5=0253F2C0)
    (data8=0253F2C0)
    (data9=0253F2C0)
    (data10=0253F2C0)
    (data11=0253F2C0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0253F2C0)
    (data1_val=0253F2C0)
    (data2_val=0253F2C0)
    (data3_val=0253F2C0)
    (data4_val=0253F2C0)
    (data5_val=0253F2C0)
    (data8_val=0253F2C0)
    (data9_val=0253F2C0)
    (data10_val=0253F2C0)
    (data11_val=0253F2C0)
target=62, linearSearch=[62, 981]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=02545300)
    (data1_def=02545300)
    (data2_def=02545300)
    (data3_def=02545300)
    (data4_def=02545300)
    (data5_def=02545300)
    (data8_def=02545300)
    (data9_def=02545300)
    (data10_def=02545300)
    (data11_def=02545300)
  linearSearch(*array_shuffle1, search_predicate);
    (data=02545300)
    (data1=02545300)
    (data2=02545300)
    (data3=02545300)
    (data4=02545300)
    (data5=02545300)
    (data8=02545300)
    (data9=02545300)
    (data10=02545300)
    (data11=02545300)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=02545300)
    (data1_val=02545300)
    (data2_val=02545300)
    (data3_val=02545300)
    (data4_val=02545300)
    (data5_val=02545300)
    (data8_val=02545300)
    (data9_val=02545300)
    (data10_val=02545300)
    (data11_val=02545300)
target=126, linearSearch=[126, 1289]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=025CB540)
    (data1_def=025CB540)
    (data2_def=025CB540)
    (data3_def=025CB540)
    (data4_def=025CB540)
    (data5_def=025CB540)
    (data8_def=025CB540)
    (data9_def=025CB540)
    (data10_def=025CB540)
    (data11_def=025CB540)
  linearSearch(*array_shuffle1, search_predicate);
    (data=025CB540)
    (data1=025CB540)
    (data2=025CB540)
    (data3=025CB540)
    (data4=025CB540)
    (data5=025CB540)
    (data8=025CB540)
    (data9=025CB540)
    (data10=025CB540)
    (data11=025CB540)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=025CB540)
    (data1_val=025CB540)
    (data2_val=025CB540)
    (data3_val=025CB540)
    (data4_val=025CB540)
    (data5_val=025CB540)
    (data8_val=025CB540)
    (data9_val=025CB540)
    (data10_val=025CB540)
    (data11_val=025CB540)
target=254, linearSearch=[254, 8157]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
   (data10_def=00000000)
    (data11_def=00000000)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=0252C030)
    (data1_def=0252C030)
    (data2_def=0252C030)
    (data3_def=0252C030)
    (data4_def=0252C030)
    (data5_def=0252C030)
    (data8_def=0252C030)
    (data9_def=0252C030)
   (data10_def=0252C030)
    (data11_def=0252C030)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0252C030)
    (data1=0252C030)
    (data2=0252C030)
    (data3=0252C030)
    (data4=0252C030)
    (data5=0252C030)
    (data8=0252C030)
    (data9=0252C030)
    (data10=0252C030)
    (data11=0252C030)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0252C030)
    (data1_val=0252C030)
    (data2_val=0252C030)
    (data3_val=0252C030)
    (data4_val=0252C030)
    (data5_val=0252C030)
    (data8_val=0252C030)
    (data9_val=0252C030)
    (data10_val=0252C030)
    (data11_val=0252C030)
target=0, binarySearch=[0, 2342]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=0252C210)
    (data1_def=0252C210)
    (data2_def=0252C210)
    (data3_def=0252C210)
    (data4_def=0252C210)
    (data5_def=0252C210)
    (data8_def=0252C210)
    (data9_def=0252C210)
   (data10_def=0252C210)
    (data11_def=0252C210)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0252C210)
    (data1=0252C210)
    (data2=0252C210)
    (data3=0252C210)
    (data4=0252C210)
    (data5=0252C210)
    (data8=0252C210)
    (data9=0252C210)
    (data10=0252C210)
    (data11=0252C210)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0252C210)
    (data1_val=0252C210)
    (data2_val=0252C210)
    (data3_val=0252C210)
    (data4_val=0252C210)
    (data5_val=0252C210)
    (data8_val=0252C210)
    (data9_val=0252C210)
    (data10_val=0252C210)
    (data11_val=0252C210)
target=2, binarySearch=[2, 6831]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=0252C5D0)
    (data1_def=0252C5D0)
    (data2_def=0252C5D0)
    (data3_def=0252C5D0)
    (data4_def=0252C5D0)
    (data5_def=0252C5D0)
    (data8_def=0252C5D0)
    (data9_def=0252C5D0)
   (data10_def=0252C5D0)
    (data11_def=0252C5D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0252C5D0)
    (data1=0252C5D0)
    (data2=0252C5D0)
    (data3=0252C5D0)
    (data4=0252C5D0)
    (data5=0252C5D0)
    (data8=0252C5D0)
    (data9=0252C5D0)
    (data10=0252C5D0)
    (data11=0252C5D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0252C5D0)
    (data1_val=0252C5D0)
    (data2_val=0252C5D0)
    (data3_val=0252C5D0)
    (data4_val=0252C5D0)
    (data5_val=0252C5D0)
    (data8_val=0252C5D0)
    (data9_val=0252C5D0)
    (data10_val=0252C5D0)
    (data11_val=0252C5D0)
target=6, binarySearch=[6, 1018]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=0252CD50)
    (data1_def=0252CD50)
    (data2_def=0252CD50)
    (data3_def=0252CD50)
    (data4_def=0252CD50)
    (data5_def=0252CD50)
    (data8_def=0252CD50)
    (data9_def=0252CD50)
   (data10_def=0252CD50)
    (data11_def=0252CD50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0252CD50)
    (data1=0252CD50)
    (data2=0252CD50)
    (data3=0252CD50)
    (data4=0252CD50)
    (data5=0252CD50)
    (data8=0252CD50)
    (data9=0252CD50)
    (data10=0252CD50)
    (data11=0252CD50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0252CD50)
    (data1_val=0252CD50)
    (data2_val=0252CD50)
    (data3_val=0252CD50)
    (data4_val=0252CD50)
    (data5_val=0252CD50)
    (data8_val=0252CD50)
    (data9_val=0252CD50)
    (data10_val=0252CD50)
    (data11_val=0252CD50)
target=14, binarySearch=[14, 4706]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=0252DC50)
    (data1_def=0252DC50)
    (data2_def=0252DC50)
    (data3_def=0252DC50)
    (data4_def=0252DC50)
    (data5_def=0252DC50)
    (data8_def=0252DC50)
    (data9_def=0252DC50)
   (data10_def=0252DC50)
    (data11_def=0252DC50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0252DC50)
    (data1=0252DC50)
    (data2=0252DC50)
    (data3=0252DC50)
    (data4=0252DC50)
    (data5=0252DC50)
    (data8=0252DC50)
    (data9=0252DC50)
    (data10=0252DC50)
    (data11=0252DC50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0252DC50)
    (data1_val=0252DC50)
    (data2_val=0252DC50)
    (data3_val=0252DC50)
    (data4_val=0252DC50)
    (data5_val=0252DC50)
    (data8_val=0252DC50)
    (data9_val=0252DC50)
    (data10_val=0252DC50)
    (data11_val=0252DC50)
target=30, binarySearch=[30, 5065]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=0252FA50)
    (data1_def=0252FA50)
    (data2_def=0252FA50)
    (data3_def=0252FA50)
    (data4_def=0252FA50)
    (data5_def=0252FA50)
    (data8_def=0252FA50)
    (data9_def=0252FA50)
   (data10_def=0252FA50)
    (data11_def=0252FA50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0252FA50)
    (data1=0252FA50)
    (data2=0252FA50)
    (data3=0252FA50)
    (data4=0252FA50)
    (data5=0252FA50)
    (data8=0252FA50)
    (data9=0252FA50)
    (data10=0252FA50)
    (data11=0252FA50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0252FA50)
    (data1_val=0252FA50)
    (data2_val=0252FA50)
    (data3_val=0252FA50)
    (data4_val=0252FA50)
    (data5_val=0252FA50)
    (data8_val=0252FA50)
    (data9_val=0252FA50)
    (data10_val=0252FA50)
    (data11_val=0252FA50)
target=62, binarySearch=[62, 9221]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=02533650)
    (data1_def=02533650)
    (data2_def=02533650)
    (data3_def=02533650)
    (data4_def=02533650)
    (data5_def=02533650)
    (data8_def=02533650)
    (data9_def=02533650)
   (data10_def=02533650)
    (data11_def=02533650)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=02533650)
    (data1=02533650)
    (data2=02533650)
    (data3=02533650)
    (data4=02533650)
    (data5=02533650)
    (data8=02533650)
    (data9=02533650)
    (data10=02533650)
    (data11=02533650)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=02533650)
    (data1_val=02533650)
    (data2_val=02533650)
    (data3_val=02533650)
    (data4_val=02533650)
    (data5_val=02533650)
    (data8_val=02533650)
    (data9_val=02533650)
    (data10_val=02533650)
    (data11_val=02533650)
target=126, binarySearch=[126, 1289]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=0253AE50)
    (data1_def=0253AE50)
    (data2_def=0253AE50)
    (data3_def=0253AE50)
    (data4_def=0253AE50)
    (data5_def=0253AE50)
    (data8_def=0253AE50)
    (data9_def=0253AE50)
   (data10_def=0253AE50)
    (data11_def=0253AE50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0253AE50)
    (data1=0253AE50)
    (data2=0253AE50)
    (data3=0253AE50)
    (data4=0253AE50)
    (data5=0253AE50)
    (data8=0253AE50)
    (data9=0253AE50)
    (data10=0253AE50)
    (data11=0253AE50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0253AE50)
    (data1_val=0253AE50)
    (data2_val=0253AE50)
    (data3_val=0253AE50)
    (data4_val=0253AE50)
    (data5_val=0253AE50)
    (data8_val=0253AE50)
    (data9_val=0253AE50)
    (data10_val=0253AE50)
    (data11_val=0253AE50)
target=254, binarySearch=[254, 8763]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=6.484924800 sec.
