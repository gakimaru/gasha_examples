============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=4951 / record(s)=10000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=5002 / record(s)=10000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=4984 / record(s)=10000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=10000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=3333 / record(s)=10000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=10000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=4976 / record(s)=10000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.003000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.003000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002998900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.015001000 sec.
* Average time     = 0.002143000 sec.
* Min time         = 0.000999700 sec.
* Max time         = 0.003000300 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.007003200 sec.
* Average time     = 0.001000457 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002002900 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000998000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.005998000 sec.
* Average time     = 0.000856857 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002000000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.001000300 sec.
* Average time     = 0.000142900 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000300 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000999400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.006000000 sec.
* Average time     = 0.000857143 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000300 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000999800 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.002000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002017800 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.009017600 sec.
* Average time     = 0.001288229 sec.
* Min time         = 0.000999700 sec.
* Max time         = 0.002017800 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.239015100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.242016000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.236007800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.275035500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.068017500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.255990000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 1.316081900 sec.
* Average time     = 0.188011700 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.275035500 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.198026700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.182010700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.179990300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.258016300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.253034800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 1.071078800 sec.
* Average time     = 0.153011257 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.258016300 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.134986500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.134007900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.135008200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.214013300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.070004100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.177054600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.865074600 sec.
* Average time     = 0.123582086 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.214013300 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.005956700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1922616 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.005000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1902755 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.005000100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1895908 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=494802 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.003000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1474414 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=514605 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.006000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1903279 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.026957700 sec.
* Average time     = 0.003851100 sec.
* Min time         = 0.001000000 sec.
* Max time         = 0.006000300 sec.
* Total Swapped    =  10108379 count(s)
* Average  Swapped =   1444054 count(s)
* Min Swapped      =    494802 count(s)
* Max Swapped      =   1922616 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57500 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57587 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57584 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=18345 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=7303 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=58823 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.006002400 sec.
* Average time     = 0.000857486 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =    257142 count(s)
* Average  Swapped =     36734 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     58823 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.156029100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.123028300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.123007000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.259001400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.192032100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 0.853097900 sec.
* Average time     = 0.121871129 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.259001400 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000999400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33719 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000997400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33677 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33444 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=36402 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.002998000 sec.
* Average time     = 0.000428286 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =    152242 count(s)
* Average  Swapped =     21748 count(s)
* Min Swapped      =      3333 count(s)
* Max Swapped      =     36402 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.124022500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.125012200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9995 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.124000200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.124009100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.124002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.125014600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.124001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9989 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.870062600 sec.
* Average time     = 0.124294657 sec.
* Min time         = 0.124000200 sec.
* Max time         = 0.125014600 sec.
* Total Swapped    =     48300 count(s)
* Average  Swapped =      6900 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001005600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129635 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001019300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129583 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001981900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129778 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001017900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=218680 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000995300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=116627 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=213143 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=123006 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.009021700 sec.
* Average time     = 0.001288814 sec.
* Min time         = 0.000995300 sec.
* Max time         = 0.002000600 sec.
* Total Swapped    =   1060452 count(s)
* Average  Swapped =    151493 count(s)
* Min Swapped      =    116627 count(s)
* Max Swapped      =    218680 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.117987400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9985 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.118007200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9987 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.117007600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9983 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.249014500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.188012200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9994 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.790028900 sec.
* Average time     = 0.112861271 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.249014500 sec.
* Total Swapped    =     59947 count(s)
* Average  Swapped =      8563 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001002400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48473 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48925 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000998800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48799 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=37222 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=5156 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49469 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.005003900 sec.
* Average time     = 0.000714843 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001002400 sec.
* Total Swapped    =    238044 count(s)
* Average  Swapped =     34006 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     49469 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.074001800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58291 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.073005300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58193 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.073004200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58188 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.159009700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=60442 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.122008500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58404 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.501029500 sec.
* Average time     = 0.071575643 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.159009700 sec.
* Total Swapped    =    303524 count(s)
* Average  Swapped =     43360 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     60442 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31152 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31250 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31256 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=6022 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1024 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33844 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.000000000 sec.
* Average time     = 0.000000000 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.000000000 sec.
* Total Swapped    =    134548 count(s)
* Average  Swapped =     19221 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     33844 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9996 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9998 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000999100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.001999400 sec.
* Average time     = 0.000285629 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000300 sec.
* Total Swapped    =     49997 count(s)
* Average  Swapped =      7142 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     10000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 10000 Count(s)
Total Array size   = 800000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.015001000/  0.002143000/  0.000999700/  0.003000300
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.007003200/  0.001000457/  0.000000000/  0.002002900
- std::sort(inline-func):   0.005998000/  0.000856857/  0.000000000/  0.002000000
- std::sort(functor):       0.001000300/  0.000142900/  0.000000000/  0.001000300
- std::sort(lambda):        0.006000000/  0.000857143/  0.000000000/  0.001000300
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.009017600/  0.001288229/  0.000999700/  0.002017800
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           1.316081900/  0.188011700/  0.000000000/  0.275035500  162016591/   23145227/          0/   49985001
- Shaker sort<S>:           1.071078800/  0.153011257/  0.000000000/  0.258016300  162016591/   23145227/          0/   49985001
- Odd-Even sort<S>:         0.865074600/  0.123582086/  0.000000000/  0.214013300  162016591/   23145227/          0/   49985001
- Shear sort:               0.026957700/  0.003851100/  0.001000000/  0.006000300   10108379/    1444054/     494802/    1922616
- Comb sort:                0.006002400/  0.000857486/  0.000000000/  0.001001200     257142/      36734/          0/      58823
- Gnome sort<S>:            0.853097900/  0.121871129/  0.000000000/  0.259001400  162016591/   23145227/          0/   49985001
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.002998000/  0.000428286/  0.000000000/  0.001001200     152242/      21748/       3333/      36402
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.870062600/  0.124294657/  0.124000200/  0.125014600      48300/       6900/          0/       9995
- Heap sort:                0.009021700/  0.001288814/  0.000995300/  0.002000600    1060452/     151493/     116627/     218680
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.790028900/  0.112861271/  0.000000000/  0.249014500      59947/       8563/          0/       9999
- Shell sort:               0.005003900/  0.000714843/  0.000000000/  0.001002400     238044/      34006/          0/      49469
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.501029500/  0.071575643/  0.000000000/  0.159009700     303524/      43360/          0/      60442
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.000000000/  0.000000000/  0.000000000/  0.000000000     134548/      19221/          0/      33844
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.001999400/  0.000285629/  0.000000000/  0.001000300      49997/       7142/          0/      10000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=31152)
(result1=31152)
(result3=31152)
(result4=31152)
(result5=31152)
(result6=31152)
(result8=31152)
(result9=31152)
(result10=31152)
(result11=31095)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
    (data10_def=00000000)
    (data11_def=00000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=010F0C10)
    (data1_def=010F0C10)
    (data2_def=010F0C10)
    (data3_def=010F0C10)
    (data4_def=010F0C10)
    (data5_def=010F0C10)
    (data8_def=010F0C10)
    (data9_def=010F0C10)
    (data10_def=010F0C10)
    (data11_def=010F0C10)
  linearSearch(*array_shuffle1, search_predicate);
    (data=010F0C10)
    (data1=010F0C10)
    (data2=010F0C10)
    (data3=010F0C10)
    (data4=010F0C10)
    (data5=010F0C10)
    (data8=010F0C10)
    (data9=010F0C10)
    (data10=010F0C10)
    (data11=010F0C10)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=010F0C10)
    (data1_val=010F0C10)
    (data2_val=010F0C10)
    (data3_val=010F0C10)
    (data4_val=010F0C10)
    (data5_val=010F0C10)
    (data8_val=010F0C10)
    (data9_val=010F0C10)
    (data10_val=010F0C10)
    (data11_val=010F0C10)
target=0, linearSearch=[0, 2342]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=010CE3E0)
    (data1_def=010CE3E0)
    (data2_def=010CE3E0)
    (data3_def=010CE3E0)
    (data4_def=010CE3E0)
    (data5_def=010CE3E0)
    (data8_def=010CE3E0)
    (data9_def=010CE3E0)
    (data10_def=010CE3E0)
    (data11_def=010CE3E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=010CE3E0)
    (data1=010CE3E0)
    (data2=010CE3E0)
    (data3=010CE3E0)
    (data4=010CE3E0)
    (data5=010CE3E0)
    (data8=010CE3E0)
    (data9=010CE3E0)
    (data10=010CE3E0)
    (data11=010CE3E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=010CE3E0)
    (data1_val=010CE3E0)
    (data2_val=010CE3E0)
    (data3_val=010CE3E0)
    (data4_val=010CE3E0)
    (data5_val=010CE3E0)
    (data8_val=010CE3E0)
    (data9_val=010CE3E0)
    (data10_val=010CE3E0)
    (data11_val=010CE3E0)
target=2, linearSearch=[2, 575]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=010D6E50)
    (data1_def=010D6E50)
    (data2_def=010D6E50)
    (data3_def=010D6E50)
    (data4_def=010D6E50)
    (data5_def=010D6E50)
    (data8_def=010D6E50)
    (data9_def=010D6E50)
    (data10_def=010D6E50)
    (data11_def=010D6E50)
  linearSearch(*array_shuffle1, search_predicate);
    (data=010D6E50)
    (data1=010D6E50)
    (data2=010D6E50)
    (data3=010D6E50)
    (data4=010D6E50)
    (data5=010D6E50)
    (data8=010D6E50)
    (data9=010D6E50)
    (data10=010D6E50)
    (data11=010D6E50)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=010D6E50)
    (data1_val=010D6E50)
    (data2_val=010D6E50)
    (data3_val=010D6E50)
    (data4_val=010D6E50)
    (data5_val=010D6E50)
    (data8_val=010D6E50)
    (data9_val=010D6E50)
    (data10_val=010D6E50)
    (data11_val=010D6E50)
target=6, linearSearch=[6, 1018]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=010EE1E0)
    (data1_def=010EE1E0)
    (data2_def=010EE1E0)
    (data3_def=010EE1E0)
    (data4_def=010EE1E0)
    (data5_def=010EE1E0)
    (data8_def=010EE1E0)
    (data9_def=010EE1E0)
    (data10_def=010EE1E0)
    (data11_def=010EE1E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=010EE1E0)
    (data1=010EE1E0)
    (data2=010EE1E0)
    (data3=010EE1E0)
    (data4=010EE1E0)
    (data5=010EE1E0)
    (data8=010EE1E0)
    (data9=010EE1E0)
    (data10=010EE1E0)
    (data11=010EE1E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=010EE1E0)
    (data1_val=010EE1E0)
    (data2_val=010EE1E0)
    (data3_val=010EE1E0)
    (data4_val=010EE1E0)
    (data5_val=010EE1E0)
    (data8_val=010EE1E0)
    (data9_val=010EE1E0)
    (data10_val=010EE1E0)
    (data11_val=010EE1E0)
target=14, linearSearch=[14, 2207]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=010E1620)
    (data1_def=010E1620)
    (data2_def=010E1620)
    (data3_def=010E1620)
    (data4_def=010E1620)
    (data5_def=010E1620)
    (data8_def=010E1620)
    (data9_def=010E1620)
    (data10_def=010E1620)
    (data11_def=010E1620)
  linearSearch(*array_shuffle1, search_predicate);
    (data=010E1620)
    (data1=010E1620)
    (data2=010E1620)
    (data3=010E1620)
    (data4=010E1620)
    (data5=010E1620)
    (data8=010E1620)
    (data9=010E1620)
    (data10=010E1620)
    (data11=010E1620)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=010E1620)
    (data1_val=010E1620)
    (data2_val=010E1620)
    (data3_val=010E1620)
    (data4_val=010E1620)
    (data5_val=010E1620)
    (data8_val=010E1620)
    (data9_val=010E1620)
    (data10_val=010E1620)
    (data11_val=010E1620)
target=30, linearSearch=[30, 1555]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=010D62C0)
    (data1_def=010D62C0)
    (data2_def=010D62C0)
    (data3_def=010D62C0)
    (data4_def=010D62C0)
    (data5_def=010D62C0)
    (data8_def=010D62C0)
    (data9_def=010D62C0)
    (data10_def=010D62C0)
    (data11_def=010D62C0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=010D62C0)
    (data1=010D62C0)
    (data2=010D62C0)
    (data3=010D62C0)
    (data4=010D62C0)
    (data5=010D62C0)
    (data8=010D62C0)
    (data9=010D62C0)
    (data10=010D62C0)
    (data11=010D62C0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=010D62C0)
    (data1_val=010D62C0)
    (data2_val=010D62C0)
    (data3_val=010D62C0)
    (data4_val=010D62C0)
    (data5_val=010D62C0)
    (data8_val=010D62C0)
    (data9_val=010D62C0)
    (data10_val=010D62C0)
    (data11_val=010D62C0)
target=62, linearSearch=[62, 981]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=010DC300)
    (data1_def=010DC300)
    (data2_def=010DC300)
    (data3_def=010DC300)
    (data4_def=010DC300)
    (data5_def=010DC300)
    (data8_def=010DC300)
    (data9_def=010DC300)
    (data10_def=010DC300)
    (data11_def=010DC300)
  linearSearch(*array_shuffle1, search_predicate);
    (data=010DC300)
    (data1=010DC300)
    (data2=010DC300)
    (data3=010DC300)
    (data4=010DC300)
    (data5=010DC300)
    (data8=010DC300)
    (data9=010DC300)
    (data10=010DC300)
    (data11=010DC300)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=010DC300)
    (data1_val=010DC300)
    (data2_val=010DC300)
    (data3_val=010DC300)
    (data4_val=010DC300)
    (data5_val=010DC300)
    (data8_val=010DC300)
    (data9_val=010DC300)
    (data10_val=010DC300)
    (data11_val=010DC300)
target=126, linearSearch=[126, 1289]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=01162540)
    (data1_def=01162540)
    (data2_def=01162540)
    (data3_def=01162540)
    (data4_def=01162540)
    (data5_def=01162540)
    (data8_def=01162540)
    (data9_def=01162540)
    (data10_def=01162540)
    (data11_def=01162540)
  linearSearch(*array_shuffle1, search_predicate);
    (data=01162540)
    (data1=01162540)
    (data2=01162540)
    (data3=01162540)
    (data4=01162540)
    (data5=01162540)
    (data8=01162540)
    (data9=01162540)
    (data10=01162540)
    (data11=01162540)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=01162540)
    (data1_val=01162540)
    (data2_val=01162540)
    (data3_val=01162540)
    (data4_val=01162540)
    (data5_val=01162540)
    (data8_val=01162540)
    (data9_val=01162540)
    (data10_val=01162540)
    (data11_val=01162540)
target=254, linearSearch=[254, 8157]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
   (data10_def=00000000)
    (data11_def=00000000)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=010C3030)
    (data1_def=010C3030)
    (data2_def=010C3030)
    (data3_def=010C3030)
    (data4_def=010C3030)
    (data5_def=010C3030)
    (data8_def=010C3030)
    (data9_def=010C3030)
   (data10_def=010C3030)
    (data11_def=010C3030)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=010C3030)
    (data1=010C3030)
    (data2=010C3030)
    (data3=010C3030)
    (data4=010C3030)
    (data5=010C3030)
    (data8=010C3030)
    (data9=010C3030)
    (data10=010C3030)
    (data11=010C3030)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=010C3030)
    (data1_val=010C3030)
    (data2_val=010C3030)
    (data3_val=010C3030)
    (data4_val=010C3030)
    (data5_val=010C3030)
    (data8_val=010C3030)
    (data9_val=010C3030)
    (data10_val=010C3030)
    (data11_val=010C3030)
target=0, binarySearch=[0, 2342]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=010C3210)
    (data1_def=010C3210)
    (data2_def=010C3210)
    (data3_def=010C3210)
    (data4_def=010C3210)
    (data5_def=010C3210)
    (data8_def=010C3210)
    (data9_def=010C3210)
   (data10_def=010C3210)
    (data11_def=010C3210)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=010C3210)
    (data1=010C3210)
    (data2=010C3210)
    (data3=010C3210)
    (data4=010C3210)
    (data5=010C3210)
    (data8=010C3210)
    (data9=010C3210)
    (data10=010C3210)
    (data11=010C3210)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=010C3210)
    (data1_val=010C3210)
    (data2_val=010C3210)
    (data3_val=010C3210)
    (data4_val=010C3210)
    (data5_val=010C3210)
    (data8_val=010C3210)
    (data9_val=010C3210)
    (data10_val=010C3210)
    (data11_val=010C3210)
target=2, binarySearch=[2, 6831]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=010C35D0)
    (data1_def=010C35D0)
    (data2_def=010C35D0)
    (data3_def=010C35D0)
    (data4_def=010C35D0)
    (data5_def=010C35D0)
    (data8_def=010C35D0)
    (data9_def=010C35D0)
   (data10_def=010C35D0)
    (data11_def=010C35D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=010C35D0)
    (data1=010C35D0)
    (data2=010C35D0)
    (data3=010C35D0)
    (data4=010C35D0)
    (data5=010C35D0)
    (data8=010C35D0)
    (data9=010C35D0)
    (data10=010C35D0)
    (data11=010C35D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=010C35D0)
    (data1_val=010C35D0)
    (data2_val=010C35D0)
    (data3_val=010C35D0)
    (data4_val=010C35D0)
    (data5_val=010C35D0)
    (data8_val=010C35D0)
    (data9_val=010C35D0)
    (data10_val=010C35D0)
    (data11_val=010C35D0)
target=6, binarySearch=[6, 1018]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=010C3D50)
    (data1_def=010C3D50)
    (data2_def=010C3D50)
    (data3_def=010C3D50)
    (data4_def=010C3D50)
    (data5_def=010C3D50)
    (data8_def=010C3D50)
    (data9_def=010C3D50)
   (data10_def=010C3D50)
    (data11_def=010C3D50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=010C3D50)
    (data1=010C3D50)
    (data2=010C3D50)
    (data3=010C3D50)
    (data4=010C3D50)
    (data5=010C3D50)
    (data8=010C3D50)
    (data9=010C3D50)
    (data10=010C3D50)
    (data11=010C3D50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=010C3D50)
    (data1_val=010C3D50)
    (data2_val=010C3D50)
    (data3_val=010C3D50)
    (data4_val=010C3D50)
    (data5_val=010C3D50)
    (data8_val=010C3D50)
    (data9_val=010C3D50)
    (data10_val=010C3D50)
    (data11_val=010C3D50)
target=14, binarySearch=[14, 4706]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=010C4C50)
    (data1_def=010C4C50)
    (data2_def=010C4C50)
    (data3_def=010C4C50)
    (data4_def=010C4C50)
    (data5_def=010C4C50)
    (data8_def=010C4C50)
    (data9_def=010C4C50)
   (data10_def=010C4C50)
    (data11_def=010C4C50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=010C4C50)
    (data1=010C4C50)
    (data2=010C4C50)
    (data3=010C4C50)
    (data4=010C4C50)
    (data5=010C4C50)
    (data8=010C4C50)
    (data9=010C4C50)
    (data10=010C4C50)
    (data11=010C4C50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=010C4C50)
    (data1_val=010C4C50)
    (data2_val=010C4C50)
    (data3_val=010C4C50)
    (data4_val=010C4C50)
    (data5_val=010C4C50)
    (data8_val=010C4C50)
    (data9_val=010C4C50)
    (data10_val=010C4C50)
    (data11_val=010C4C50)
target=30, binarySearch=[30, 5065]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=010C6A50)
    (data1_def=010C6A50)
    (data2_def=010C6A50)
    (data3_def=010C6A50)
    (data4_def=010C6A50)
    (data5_def=010C6A50)
    (data8_def=010C6A50)
    (data9_def=010C6A50)
   (data10_def=010C6A50)
    (data11_def=010C6A50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=010C6A50)
    (data1=010C6A50)
    (data2=010C6A50)
    (data3=010C6A50)
    (data4=010C6A50)
    (data5=010C6A50)
    (data8=010C6A50)
    (data9=010C6A50)
    (data10=010C6A50)
    (data11=010C6A50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=010C6A50)
    (data1_val=010C6A50)
    (data2_val=010C6A50)
    (data3_val=010C6A50)
    (data4_val=010C6A50)
    (data5_val=010C6A50)
    (data8_val=010C6A50)
    (data9_val=010C6A50)
    (data10_val=010C6A50)
    (data11_val=010C6A50)
target=62, binarySearch=[62, 9221]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=010CA650)
    (data1_def=010CA650)
    (data2_def=010CA650)
    (data3_def=010CA650)
    (data4_def=010CA650)
    (data5_def=010CA650)
    (data8_def=010CA650)
    (data9_def=010CA650)
   (data10_def=010CA650)
    (data11_def=010CA650)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=010CA650)
    (data1=010CA650)
    (data2=010CA650)
    (data3=010CA650)
    (data4=010CA650)
    (data5=010CA650)
    (data8=010CA650)
    (data9=010CA650)
    (data10=010CA650)
    (data11=010CA650)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=010CA650)
    (data1_val=010CA650)
    (data2_val=010CA650)
    (data3_val=010CA650)
    (data4_val=010CA650)
    (data5_val=010CA650)
    (data8_val=010CA650)
    (data9_val=010CA650)
    (data10_val=010CA650)
    (data11_val=010CA650)
target=126, binarySearch=[126, 1289]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=010D1E50)
    (data1_def=010D1E50)
    (data2_def=010D1E50)
    (data3_def=010D1E50)
    (data4_def=010D1E50)
    (data5_def=010D1E50)
    (data8_def=010D1E50)
    (data9_def=010D1E50)
   (data10_def=010D1E50)
    (data11_def=010D1E50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=010D1E50)
    (data1=010D1E50)
    (data2=010D1E50)
    (data3=010D1E50)
    (data4=010D1E50)
    (data5=010D1E50)
    (data8=010D1E50)
    (data9=010D1E50)
    (data10=010D1E50)
    (data11=010D1E50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=010D1E50)
    (data1_val=010D1E50)
    (data2_val=010D1E50)
    (data3_val=010D1E50)
    (data4_val=010D1E50)
    (data5_val=010D1E50)
    (data8_val=010D1E50)
    (data9_val=010D1E50)
    (data10_val=010D1E50)
    (data11_val=010D1E50)
target=254, binarySearch=[254, 8763]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=6.430385700 sec.
