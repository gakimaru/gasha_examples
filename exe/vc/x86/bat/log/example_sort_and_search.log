============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=4951 / record(s)=10000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=5002 / record(s)=10000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=4984 / record(s)=10000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=10000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=3333 / record(s)=10000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=10000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=4976 / record(s)=10000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.003002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003003000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.003002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.003002400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.015014400 sec.
* Average time     = 0.002144914 sec.
* Min time         = 0.001000900 sec.
* Max time         = 0.003003000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001002100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002002000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.006006400 sec.
* Average time     = 0.000858057 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002002000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.008007700 sec.
* Average time     = 0.001143957 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002001800 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.003002900 sec.
* Average time     = 0.000428986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.003002900 sec.
* Average time     = 0.000428986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001100 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.007006400 sec.
* Average time     = 0.001000914 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002001800 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.240228500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.240228000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.237226200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.285269600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.065061800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.252240000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 1.320254100 sec.
* Average time     = 0.188607729 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.285269600 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.190181000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.194184300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.198189900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.268255200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.257244400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 1.108054800 sec.
* Average time     = 0.158293543 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.268255200 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.144136200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.143136300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.140133300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.193183700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.063060100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.162154400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.845804000 sec.
* Average time     = 0.120829143 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.193183700 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.005004700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1892312 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.005004700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1873730 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.005005000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1860168 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=485134 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.003002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1465201 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=485527 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.004003800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1882044 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.024022600 sec.
* Average time     = 0.003431800 sec.
* Min time         = 0.001000600 sec.
* Max time         = 0.005005000 sec.
* Total Swapped    =   9944116 count(s)
* Average  Swapped =   1420588 count(s)
* Min Swapped      =    485134 count(s)
* Max Swapped      =   1892312 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57500 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57587 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57584 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=18345 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=7303 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=58823 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.007007300 sec.
* Average time     = 0.001001043 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002001800 sec.
* Total Swapped    =    257142 count(s)
* Average  Swapped =     36734 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     58823 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.155148600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.123117800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.123117200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.260246700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.191182300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 0.852812600 sec.
* Average time     = 0.121830371 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.260246700 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33719 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33677 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33444 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=36402 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.003002900 sec.
* Average time     = 0.000428986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =    152242 count(s)
* Average  Swapped =     21748 count(s)
* Min Swapped      =      3333 count(s)
* Max Swapped      =     36402 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.122116400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.122116100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9995 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.123117200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.124118100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.123116000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.123118600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.123117200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9989 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.860819600 sec.
* Average time     = 0.122974229 sec.
* Min time         = 0.122116100 sec.
* Max time         = 0.124118100 sec.
* Total Swapped    =     48300 count(s)
* Average  Swapped =      6900 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129635 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129583 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129778 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=218680 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=116627 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=213143 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=123006 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.010009100 sec.
* Average time     = 0.001429871 sec.
* Min time         = 0.001000300 sec.
* Max time         = 0.002002100 sec.
* Total Swapped    =   1060452 count(s)
* Average  Swapped =    151493 count(s)
* Min Swapped      =    116627 count(s)
* Max Swapped      =    218680 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.117112200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9985 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.122116300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9987 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.114108500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9983 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.254240600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.211201900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9994 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.818779500 sec.
* Average time     = 0.116968500 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.254240600 sec.
* Total Swapped    =     59947 count(s)
* Average  Swapped =      8563 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48473 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48925 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48799 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=37222 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=5156 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49469 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.006005900 sec.
* Average time     = 0.000857986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002001800 sec.
* Total Swapped    =    238044 count(s)
* Average  Swapped =     34006 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     49469 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.074070600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58291 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.073070300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58193 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.072067100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58188 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001002100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.158150600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=60442 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.117110100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58404 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.496472000 sec.
* Average time     = 0.070924571 sec.
* Min time         = 0.001001200 sec.
* Max time         = 0.158150600 sec.
* Total Swapped    =    303524 count(s)
* Average  Swapped =     43360 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     60442 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31152 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31250 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31256 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=6022 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1024 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33844 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.001001800 sec.
* Average time     = 0.000143114 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001800 sec.
* Total Swapped    =    134548 count(s)
* Average  Swapped =     19221 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     33844 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9996 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9998 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.001001800 sec.
* Average time     = 0.000143114 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001800 sec.
* Total Swapped    =     49997 count(s)
* Average  Swapped =      7142 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     10000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 10000 Count(s)
Total Array size   = 800000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.015014400/  0.002144914/  0.001000900/  0.003003000
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.006006400/  0.000858057/  0.000000000/  0.002002000
- std::sort(inline-func):   0.008007700/  0.001143957/  0.000000000/  0.002001800
- std::sort(functor):       0.003002900/  0.000428986/  0.000000000/  0.001001200
- std::sort(lambda):        0.003002900/  0.000428986/  0.000000000/  0.001001100
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.007006400/  0.001000914/  0.000000000/  0.002001800
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           1.320254100/  0.188607729/  0.000000000/  0.285269600  162016591/   23145227/          0/   49985001
- Shaker sort<S>:           1.108054800/  0.158293543/  0.000000000/  0.268255200  162016591/   23145227/          0/   49985001
- Odd-Even sort<S>:         0.845804000/  0.120829143/  0.000000000/  0.193183700  162016591/   23145227/          0/   49985001
- Shear sort:               0.024022600/  0.003431800/  0.001000600/  0.005005000    9944116/    1420588/     485134/    1892312
- Comb sort:                0.007007300/  0.001001043/  0.000000000/  0.002001800     257142/      36734/          0/      58823
- Gnome sort<S>:            0.852812600/  0.121830371/  0.000000000/  0.260246700  162016591/   23145227/          0/   49985001
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.003002900/  0.000428986/  0.000000000/  0.001001200     152242/      21748/       3333/      36402
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.860819600/  0.122974229/  0.122116100/  0.124118100      48300/       6900/          0/       9995
- Heap sort:                0.010009100/  0.001429871/  0.001000300/  0.002002100    1060452/     151493/     116627/     218680
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.818779500/  0.116968500/  0.000000000/  0.254240600      59947/       8563/          0/       9999
- Shell sort:               0.006005900/  0.000857986/  0.000000000/  0.002001800     238044/      34006/          0/      49469
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.496472000/  0.070924571/  0.001001200/  0.158150600     303524/      43360/          0/      60442
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.001001800/  0.000143114/  0.000000000/  0.001001800     134548/      19221/          0/      33844
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.001001800/  0.000143114/  0.000000000/  0.001001800      49997/       7142/          0/      10000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=31152)
(result1=31152)
(result3=31152)
(result4=31152)
(result5=31152)
(result6=31152)
(result8=31152)
(result9=31152)
(result10=31152)
(result11=31095)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
    (data10_def=00000000)
    (data11_def=00000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=01275C10)
    (data1_def=01275C10)
    (data2_def=01275C10)
    (data3_def=01275C10)
    (data4_def=01275C10)
    (data5_def=01275C10)
    (data8_def=01275C10)
    (data9_def=01275C10)
    (data10_def=01275C10)
    (data11_def=01275C10)
  linearSearch(*array_shuffle1, search_predicate);
    (data=01275C10)
    (data1=01275C10)
    (data2=01275C10)
    (data3=01275C10)
    (data4=01275C10)
    (data5=01275C10)
    (data8=01275C10)
    (data9=01275C10)
    (data10=01275C10)
    (data11=01275C10)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=01275C10)
    (data1_val=01275C10)
    (data2_val=01275C10)
    (data3_val=01275C10)
    (data4_val=01275C10)
    (data5_val=01275C10)
    (data8_val=01275C10)
    (data9_val=01275C10)
    (data10_val=01275C10)
    (data11_val=01275C10)
target=0, linearSearch=[0, 2342]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=012533E0)
    (data1_def=012533E0)
    (data2_def=012533E0)
    (data3_def=012533E0)
    (data4_def=012533E0)
    (data5_def=012533E0)
    (data8_def=012533E0)
    (data9_def=012533E0)
    (data10_def=012533E0)
    (data11_def=012533E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=012533E0)
    (data1=012533E0)
    (data2=012533E0)
    (data3=012533E0)
    (data4=012533E0)
    (data5=012533E0)
    (data8=012533E0)
    (data9=012533E0)
    (data10=012533E0)
    (data11=012533E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=012533E0)
    (data1_val=012533E0)
    (data2_val=012533E0)
    (data3_val=012533E0)
    (data4_val=012533E0)
    (data5_val=012533E0)
    (data8_val=012533E0)
    (data9_val=012533E0)
    (data10_val=012533E0)
    (data11_val=012533E0)
target=2, linearSearch=[2, 575]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=0125BE50)
    (data1_def=0125BE50)
    (data2_def=0125BE50)
    (data3_def=0125BE50)
    (data4_def=0125BE50)
    (data5_def=0125BE50)
    (data8_def=0125BE50)
    (data9_def=0125BE50)
    (data10_def=0125BE50)
    (data11_def=0125BE50)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0125BE50)
    (data1=0125BE50)
    (data2=0125BE50)
    (data3=0125BE50)
    (data4=0125BE50)
    (data5=0125BE50)
    (data8=0125BE50)
    (data9=0125BE50)
    (data10=0125BE50)
    (data11=0125BE50)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0125BE50)
    (data1_val=0125BE50)
    (data2_val=0125BE50)
    (data3_val=0125BE50)
    (data4_val=0125BE50)
    (data5_val=0125BE50)
    (data8_val=0125BE50)
    (data9_val=0125BE50)
    (data10_val=0125BE50)
    (data11_val=0125BE50)
target=6, linearSearch=[6, 1018]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=012731E0)
    (data1_def=012731E0)
    (data2_def=012731E0)
    (data3_def=012731E0)
    (data4_def=012731E0)
    (data5_def=012731E0)
    (data8_def=012731E0)
    (data9_def=012731E0)
    (data10_def=012731E0)
    (data11_def=012731E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=012731E0)
    (data1=012731E0)
    (data2=012731E0)
    (data3=012731E0)
    (data4=012731E0)
    (data5=012731E0)
    (data8=012731E0)
    (data9=012731E0)
    (data10=012731E0)
    (data11=012731E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=012731E0)
    (data1_val=012731E0)
    (data2_val=012731E0)
    (data3_val=012731E0)
    (data4_val=012731E0)
    (data5_val=012731E0)
    (data8_val=012731E0)
    (data9_val=012731E0)
    (data10_val=012731E0)
    (data11_val=012731E0)
target=14, linearSearch=[14, 2207]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=01266620)
    (data1_def=01266620)
    (data2_def=01266620)
    (data3_def=01266620)
    (data4_def=01266620)
    (data5_def=01266620)
    (data8_def=01266620)
    (data9_def=01266620)
    (data10_def=01266620)
    (data11_def=01266620)
  linearSearch(*array_shuffle1, search_predicate);
    (data=01266620)
    (data1=01266620)
    (data2=01266620)
    (data3=01266620)
    (data4=01266620)
    (data5=01266620)
    (data8=01266620)
    (data9=01266620)
    (data10=01266620)
    (data11=01266620)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=01266620)
    (data1_val=01266620)
    (data2_val=01266620)
    (data3_val=01266620)
    (data4_val=01266620)
    (data5_val=01266620)
    (data8_val=01266620)
    (data9_val=01266620)
    (data10_val=01266620)
    (data11_val=01266620)
target=30, linearSearch=[30, 1555]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=0125B2C0)
    (data1_def=0125B2C0)
    (data2_def=0125B2C0)
    (data3_def=0125B2C0)
    (data4_def=0125B2C0)
    (data5_def=0125B2C0)
    (data8_def=0125B2C0)
    (data9_def=0125B2C0)
    (data10_def=0125B2C0)
    (data11_def=0125B2C0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0125B2C0)
    (data1=0125B2C0)
    (data2=0125B2C0)
    (data3=0125B2C0)
    (data4=0125B2C0)
    (data5=0125B2C0)
    (data8=0125B2C0)
    (data9=0125B2C0)
    (data10=0125B2C0)
    (data11=0125B2C0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0125B2C0)
    (data1_val=0125B2C0)
    (data2_val=0125B2C0)
    (data3_val=0125B2C0)
    (data4_val=0125B2C0)
    (data5_val=0125B2C0)
    (data8_val=0125B2C0)
    (data9_val=0125B2C0)
    (data10_val=0125B2C0)
    (data11_val=0125B2C0)
target=62, linearSearch=[62, 981]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=01261300)
    (data1_def=01261300)
    (data2_def=01261300)
    (data3_def=01261300)
    (data4_def=01261300)
    (data5_def=01261300)
    (data8_def=01261300)
    (data9_def=01261300)
    (data10_def=01261300)
    (data11_def=01261300)
  linearSearch(*array_shuffle1, search_predicate);
    (data=01261300)
    (data1=01261300)
    (data2=01261300)
    (data3=01261300)
    (data4=01261300)
    (data5=01261300)
    (data8=01261300)
    (data9=01261300)
    (data10=01261300)
    (data11=01261300)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=01261300)
    (data1_val=01261300)
    (data2_val=01261300)
    (data3_val=01261300)
    (data4_val=01261300)
    (data5_val=01261300)
    (data8_val=01261300)
    (data9_val=01261300)
    (data10_val=01261300)
    (data11_val=01261300)
target=126, linearSearch=[126, 1289]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=012E7540)
    (data1_def=012E7540)
    (data2_def=012E7540)
    (data3_def=012E7540)
    (data4_def=012E7540)
    (data5_def=012E7540)
    (data8_def=012E7540)
    (data9_def=012E7540)
    (data10_def=012E7540)
    (data11_def=012E7540)
  linearSearch(*array_shuffle1, search_predicate);
    (data=012E7540)
    (data1=012E7540)
    (data2=012E7540)
    (data3=012E7540)
    (data4=012E7540)
    (data5=012E7540)
    (data8=012E7540)
    (data9=012E7540)
    (data10=012E7540)
    (data11=012E7540)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=012E7540)
    (data1_val=012E7540)
    (data2_val=012E7540)
    (data3_val=012E7540)
    (data4_val=012E7540)
    (data5_val=012E7540)
    (data8_val=012E7540)
    (data9_val=012E7540)
    (data10_val=012E7540)
    (data11_val=012E7540)
target=254, linearSearch=[254, 8157]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
   (data10_def=00000000)
    (data11_def=00000000)
  binarySearch(*array_shuffle1, search_comparison);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=01248030)
    (data1_def=01248030)
    (data2_def=01248030)
    (data3_def=01248030)
    (data4_def=01248030)
    (data5_def=01248030)
    (data8_def=01248030)
    (data9_def=01248030)
   (data10_def=01248030)
    (data11_def=01248030)
  binarySearch(*array_shuffle1, search_comparison);
    (data=01248030)
    (data1=01248030)
    (data2=01248030)
    (data3=01248030)
    (data4=01248030)
    (data5=01248030)
    (data8=01248030)
    (data9=01248030)
    (data10=01248030)
    (data11=01248030)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=01248030)
    (data1_val=01248030)
    (data2_val=01248030)
    (data3_val=01248030)
    (data4_val=01248030)
    (data5_val=01248030)
    (data8_val=01248030)
    (data9_val=01248030)
    (data10_val=01248030)
    (data11_val=01248030)
target=0, binarySearch=[0, 2342]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=01248210)
    (data1_def=01248210)
    (data2_def=01248210)
    (data3_def=01248210)
    (data4_def=01248210)
    (data5_def=01248210)
    (data8_def=01248210)
    (data9_def=01248210)
   (data10_def=01248210)
    (data11_def=01248210)
  binarySearch(*array_shuffle1, search_comparison);
    (data=01248210)
    (data1=01248210)
    (data2=01248210)
    (data3=01248210)
    (data4=01248210)
    (data5=01248210)
    (data8=01248210)
    (data9=01248210)
    (data10=01248210)
    (data11=01248210)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=01248210)
    (data1_val=01248210)
    (data2_val=01248210)
    (data3_val=01248210)
    (data4_val=01248210)
    (data5_val=01248210)
    (data8_val=01248210)
    (data9_val=01248210)
    (data10_val=01248210)
    (data11_val=01248210)
target=2, binarySearch=[2, 6831]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=012485D0)
    (data1_def=012485D0)
    (data2_def=012485D0)
    (data3_def=012485D0)
    (data4_def=012485D0)
    (data5_def=012485D0)
    (data8_def=012485D0)
    (data9_def=012485D0)
   (data10_def=012485D0)
    (data11_def=012485D0)
  binarySearch(*array_shuffle1, search_comparison);
    (data=012485D0)
    (data1=012485D0)
    (data2=012485D0)
    (data3=012485D0)
    (data4=012485D0)
    (data5=012485D0)
    (data8=012485D0)
    (data9=012485D0)
    (data10=012485D0)
    (data11=012485D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=012485D0)
    (data1_val=012485D0)
    (data2_val=012485D0)
    (data3_val=012485D0)
    (data4_val=012485D0)
    (data5_val=012485D0)
    (data8_val=012485D0)
    (data9_val=012485D0)
    (data10_val=012485D0)
    (data11_val=012485D0)
target=6, binarySearch=[6, 1018]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=01248D50)
    (data1_def=01248D50)
    (data2_def=01248D50)
    (data3_def=01248D50)
    (data4_def=01248D50)
    (data5_def=01248D50)
    (data8_def=01248D50)
    (data9_def=01248D50)
   (data10_def=01248D50)
    (data11_def=01248D50)
  binarySearch(*array_shuffle1, search_comparison);
    (data=01248D50)
    (data1=01248D50)
    (data2=01248D50)
    (data3=01248D50)
    (data4=01248D50)
    (data5=01248D50)
    (data8=01248D50)
    (data9=01248D50)
    (data10=01248D50)
    (data11=01248D50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=01248D50)
    (data1_val=01248D50)
    (data2_val=01248D50)
    (data3_val=01248D50)
    (data4_val=01248D50)
    (data5_val=01248D50)
    (data8_val=01248D50)
    (data9_val=01248D50)
    (data10_val=01248D50)
    (data11_val=01248D50)
target=14, binarySearch=[14, 4706]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=01249C50)
    (data1_def=01249C50)
    (data2_def=01249C50)
    (data3_def=01249C50)
    (data4_def=01249C50)
    (data5_def=01249C50)
    (data8_def=01249C50)
    (data9_def=01249C50)
   (data10_def=01249C50)
    (data11_def=01249C50)
  binarySearch(*array_shuffle1, search_comparison);
    (data=01249C50)
    (data1=01249C50)
    (data2=01249C50)
    (data3=01249C50)
    (data4=01249C50)
    (data5=01249C50)
    (data8=01249C50)
    (data9=01249C50)
    (data10=01249C50)
    (data11=01249C50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=01249C50)
    (data1_val=01249C50)
    (data2_val=01249C50)
    (data3_val=01249C50)
    (data4_val=01249C50)
    (data5_val=01249C50)
    (data8_val=01249C50)
    (data9_val=01249C50)
    (data10_val=01249C50)
    (data11_val=01249C50)
target=30, binarySearch=[30, 5065]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=0124BA50)
    (data1_def=0124BA50)
    (data2_def=0124BA50)
    (data3_def=0124BA50)
    (data4_def=0124BA50)
    (data5_def=0124BA50)
    (data8_def=0124BA50)
    (data9_def=0124BA50)
   (data10_def=0124BA50)
    (data11_def=0124BA50)
  binarySearch(*array_shuffle1, search_comparison);
    (data=0124BA50)
    (data1=0124BA50)
    (data2=0124BA50)
    (data3=0124BA50)
    (data4=0124BA50)
    (data5=0124BA50)
    (data8=0124BA50)
    (data9=0124BA50)
    (data10=0124BA50)
    (data11=0124BA50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0124BA50)
    (data1_val=0124BA50)
    (data2_val=0124BA50)
    (data3_val=0124BA50)
    (data4_val=0124BA50)
    (data5_val=0124BA50)
    (data8_val=0124BA50)
    (data9_val=0124BA50)
    (data10_val=0124BA50)
    (data11_val=0124BA50)
target=62, binarySearch=[62, 9221]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=0124F650)
    (data1_def=0124F650)
    (data2_def=0124F650)
    (data3_def=0124F650)
    (data4_def=0124F650)
    (data5_def=0124F650)
    (data8_def=0124F650)
    (data9_def=0124F650)
   (data10_def=0124F650)
    (data11_def=0124F650)
  binarySearch(*array_shuffle1, search_comparison);
    (data=0124F650)
    (data1=0124F650)
    (data2=0124F650)
    (data3=0124F650)
    (data4=0124F650)
    (data5=0124F650)
    (data8=0124F650)
    (data9=0124F650)
    (data10=0124F650)
    (data11=0124F650)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0124F650)
    (data1_val=0124F650)
    (data2_val=0124F650)
    (data3_val=0124F650)
    (data4_val=0124F650)
    (data5_val=0124F650)
    (data8_val=0124F650)
    (data9_val=0124F650)
    (data10_val=0124F650)
    (data11_val=0124F650)
target=126, binarySearch=[126, 1289]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=01256E50)
    (data1_def=01256E50)
    (data2_def=01256E50)
    (data3_def=01256E50)
    (data4_def=01256E50)
    (data5_def=01256E50)
    (data8_def=01256E50)
    (data9_def=01256E50)
   (data10_def=01256E50)
    (data11_def=01256E50)
  binarySearch(*array_shuffle1, search_comparison);
    (data=01256E50)
    (data1=01256E50)
    (data2=01256E50)
    (data3=01256E50)
    (data4=01256E50)
    (data5=01256E50)
    (data8=01256E50)
    (data9=01256E50)
    (data10=01256E50)
    (data11=01256E50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=01256E50)
    (data1_val=01256E50)
    (data2_val=01256E50)
    (data3_val=01256E50)
    (data4_val=01256E50)
    (data5_val=01256E50)
    (data8_val=01256E50)
    (data9_val=01256E50)
    (data10_val=01256E50)
    (data11_val=01256E50)
target=254, binarySearch=[254, 8763]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=6.454140500 sec.
