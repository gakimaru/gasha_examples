============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=4951 / record(s)=10000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=5002 / record(s)=10000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=4984 / record(s)=10000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=10000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=3333 / record(s)=10000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=10000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=4976 / record(s)=10000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.003506500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.003002400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000501100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000998800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000500900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.003002600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.014515200 sec.
* Average time     = 0.002073600 sec.
* Min time         = 0.000500900 sec.
* Max time         = 0.003506500 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000492700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002001500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000503200 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000500300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000500500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.005998800 sec.
* Average time     = 0.000856971 sec.
* Min time         = 0.000492700 sec.
* Max time         = 0.002001500 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000992700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000993300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001501500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000500900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000500900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001501100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.005990400 sec.
* Average time     = 0.000855771 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001501500 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000500300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000500600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000500300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000500500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001005000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.003006700 sec.
* Average time     = 0.000429529 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001005000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000997600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000500600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000500600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.005001100 sec.
* Average time     = 0.000714443 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001501500 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001501100 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000993300 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000500600 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001500900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.007999500 sec.
* Average time     = 0.001142786 sec.
* Min time         = 0.000500600 sec.
* Max time         = 0.001501500 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.224255100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.222546000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.220589900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.274271100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.067126300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.242599600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 1.251388000 sec.
* Average time     = 0.178769714 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.274271100 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.183080600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.182205000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.186769600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.260775700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.236259000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 1.049089900 sec.
* Average time     = 0.149869986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.260775700 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.133140800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.134145500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.132140700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.190699200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.060563900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.162173600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.812863700 sec.
* Average time     = 0.116123386 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.190699200 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.005006200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1892312 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.005506700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1873730 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.005005000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1860168 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=485134 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.003002700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1465201 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=485527 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.005005600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1882044 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.025528000 sec.
* Average time     = 0.003646857 sec.
* Min time         = 0.001000900 sec.
* Max time         = 0.005506700 sec.
* Total Swapped    =   9944116 count(s)
* Average  Swapped =   1420588 count(s)
* Min Swapped      =    485134 count(s)
* Max Swapped      =   1892312 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57500 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57587 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57584 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=18345 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=7303 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=58823 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.009008800 sec.
* Average time     = 0.001286971 sec.
* Min time         = 0.001000800 sec.
* Max time         = 0.002002100 sec.
* Total Swapped    =    257142 count(s)
* Average  Swapped =     36734 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     58823 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.158165100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.122644600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.140649600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.270785100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.253269500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 0.945513900 sec.
* Average time     = 0.135073414 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.270785100 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33719 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33677 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33444 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=36402 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.005004700 sec.
* Average time     = 0.000714957 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =    152242 count(s)
* Average  Swapped =     21748 count(s)
* Min Swapped      =      3333 count(s)
* Max Swapped      =     36402 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.124133400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.123125200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9995 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.123628500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.124942100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.124640500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.123765600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.124148400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9989 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.868383700 sec.
* Average time     = 0.124054814 sec.
* Min time         = 0.123125200 sec.
* Max time         = 0.124942100 sec.
* Total Swapped    =     48300 count(s)
* Average  Swapped =      6900 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001501200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129635 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001501400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129583 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001501500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129778 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001502600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=218680 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=116627 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.002473100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=213143 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=123006 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.009480700 sec.
* Average time     = 0.001354386 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002473100 sec.
* Total Swapped    =   1060452 count(s)
* Average  Swapped =    151493 count(s)
* Min Swapped      =    116627 count(s)
* Max Swapped      =    218680 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.129750500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9985 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.119167900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9987 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.116131400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9983 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.250778800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.195730200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9994 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.811558800 sec.
* Average time     = 0.115936971 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.250778800 sec.
* Total Swapped    =     59947 count(s)
* Average  Swapped =      8563 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48473 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48925 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48799 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000500600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000500300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=37222 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=5156 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49469 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.005004600 sec.
* Average time     = 0.000714943 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =    238044 count(s)
* Average  Swapped =     34006 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     49469 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.077164900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58291 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.074079200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58193 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.072077700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58188 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.184454000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=60442 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.119148100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58404 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.526923900 sec.
* Average time     = 0.075274843 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.184454000 sec.
* Total Swapped    =    303524 count(s)
* Average  Swapped =     43360 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     60442 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31152 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31250 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001004100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31256 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=6022 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1024 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33844 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.004006700 sec.
* Average time     = 0.000572386 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001004100 sec.
* Total Swapped    =    134548 count(s)
* Average  Swapped =     19221 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     33844 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000500600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9996 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000500600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9998 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000500600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.001501800 sec.
* Average time     = 0.000214543 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.000500600 sec.
* Total Swapped    =     49997 count(s)
* Average  Swapped =      7142 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     10000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 10000 Count(s)
Total Array size   = 800000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.014515200/  0.002073600/  0.000500900/  0.003506500
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.005998800/  0.000856971/  0.000492700/  0.002001500
- std::sort(inline-func):   0.005990400/  0.000855771/  0.000000000/  0.001501500
- std::sort(functor):       0.003006700/  0.000429529/  0.000000000/  0.001005000
- std::sort(lambda):        0.005001100/  0.000714443/  0.000000000/  0.001001200
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.007999500/  0.001142786/  0.000500600/  0.001501500
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           1.251388000/  0.178769714/  0.000000000/  0.274271100  162016591/   23145227/          0/   49985001
- Shaker sort<S>:           1.049089900/  0.149869986/  0.000000000/  0.260775700  162016591/   23145227/          0/   49985001
- Odd-Even sort<S>:         0.812863700/  0.116123386/  0.000000000/  0.190699200  162016591/   23145227/          0/   49985001
- Shear sort:               0.025528000/  0.003646857/  0.001000900/  0.005506700    9944116/    1420588/     485134/    1892312
- Comb sort:                0.009008800/  0.001286971/  0.001000800/  0.002002100     257142/      36734/          0/      58823
- Gnome sort<S>:            0.945513900/  0.135073414/  0.000000000/  0.270785100  162016591/   23145227/          0/   49985001
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.005004700/  0.000714957/  0.000000000/  0.001001200     152242/      21748/       3333/      36402
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.868383700/  0.124054814/  0.123125200/  0.124942100      48300/       6900/          0/       9995
- Heap sort:                0.009480700/  0.001354386/  0.000000000/  0.002473100    1060452/     151493/     116627/     218680
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.811558800/  0.115936971/  0.000000000/  0.250778800      59947/       8563/          0/       9999
- Shell sort:               0.005004600/  0.000714943/  0.000000000/  0.001001200     238044/      34006/          0/      49469
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.526923900/  0.075274843/  0.000000000/  0.184454000     303524/      43360/          0/      60442
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.004006700/  0.000572386/  0.000000000/  0.001004100     134548/      19221/          0/      33844
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.001501800/  0.000214543/  0.000000000/  0.000500600      49997/       7142/          0/      10000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=31152)
(result1=31152)
(result3=31152)
(result4=31152)
(result5=31152)
(result6=31152)
(result8=31152)
(result9=31152)
(result10=31152)
(result11=31095)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
    (data10_def=00000000)
    (data11_def=00000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=00B29C10)
    (data1_def=00B29C10)
    (data2_def=00B29C10)
    (data3_def=00B29C10)
    (data4_def=00B29C10)
    (data5_def=00B29C10)
    (data8_def=00B29C10)
    (data9_def=00B29C10)
    (data10_def=00B29C10)
    (data11_def=00B29C10)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00B29C10)
    (data1=00B29C10)
    (data2=00B29C10)
    (data3=00B29C10)
    (data4=00B29C10)
    (data5=00B29C10)
    (data8=00B29C10)
    (data9=00B29C10)
    (data10=00B29C10)
    (data11=00B29C10)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00B29C10)
    (data1_val=00B29C10)
    (data2_val=00B29C10)
    (data3_val=00B29C10)
    (data4_val=00B29C10)
    (data5_val=00B29C10)
    (data8_val=00B29C10)
    (data9_val=00B29C10)
    (data10_val=00B29C10)
    (data11_val=00B29C10)
target=0, linearSearch=[0, 2342]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=00B073E0)
    (data1_def=00B073E0)
    (data2_def=00B073E0)
    (data3_def=00B073E0)
    (data4_def=00B073E0)
    (data5_def=00B073E0)
    (data8_def=00B073E0)
    (data9_def=00B073E0)
    (data10_def=00B073E0)
    (data11_def=00B073E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00B073E0)
    (data1=00B073E0)
    (data2=00B073E0)
    (data3=00B073E0)
    (data4=00B073E0)
    (data5=00B073E0)
    (data8=00B073E0)
    (data9=00B073E0)
    (data10=00B073E0)
    (data11=00B073E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00B073E0)
    (data1_val=00B073E0)
    (data2_val=00B073E0)
    (data3_val=00B073E0)
    (data4_val=00B073E0)
    (data5_val=00B073E0)
    (data8_val=00B073E0)
    (data9_val=00B073E0)
    (data10_val=00B073E0)
    (data11_val=00B073E0)
target=2, linearSearch=[2, 575]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=00B0FE50)
    (data1_def=00B0FE50)
    (data2_def=00B0FE50)
    (data3_def=00B0FE50)
    (data4_def=00B0FE50)
    (data5_def=00B0FE50)
    (data8_def=00B0FE50)
    (data9_def=00B0FE50)
    (data10_def=00B0FE50)
    (data11_def=00B0FE50)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00B0FE50)
    (data1=00B0FE50)
    (data2=00B0FE50)
    (data3=00B0FE50)
    (data4=00B0FE50)
    (data5=00B0FE50)
    (data8=00B0FE50)
    (data9=00B0FE50)
    (data10=00B0FE50)
    (data11=00B0FE50)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00B0FE50)
    (data1_val=00B0FE50)
    (data2_val=00B0FE50)
    (data3_val=00B0FE50)
    (data4_val=00B0FE50)
    (data5_val=00B0FE50)
    (data8_val=00B0FE50)
    (data9_val=00B0FE50)
    (data10_val=00B0FE50)
    (data11_val=00B0FE50)
target=6, linearSearch=[6, 1018]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=00B271E0)
    (data1_def=00B271E0)
    (data2_def=00B271E0)
    (data3_def=00B271E0)
    (data4_def=00B271E0)
    (data5_def=00B271E0)
    (data8_def=00B271E0)
    (data9_def=00B271E0)
    (data10_def=00B271E0)
    (data11_def=00B271E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00B271E0)
    (data1=00B271E0)
    (data2=00B271E0)
    (data3=00B271E0)
    (data4=00B271E0)
    (data5=00B271E0)
    (data8=00B271E0)
    (data9=00B271E0)
    (data10=00B271E0)
    (data11=00B271E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00B271E0)
    (data1_val=00B271E0)
    (data2_val=00B271E0)
    (data3_val=00B271E0)
    (data4_val=00B271E0)
    (data5_val=00B271E0)
    (data8_val=00B271E0)
    (data9_val=00B271E0)
    (data10_val=00B271E0)
    (data11_val=00B271E0)
target=14, linearSearch=[14, 2207]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=00B1A620)
    (data1_def=00B1A620)
    (data2_def=00B1A620)
    (data3_def=00B1A620)
    (data4_def=00B1A620)
    (data5_def=00B1A620)
    (data8_def=00B1A620)
    (data9_def=00B1A620)
    (data10_def=00B1A620)
    (data11_def=00B1A620)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00B1A620)
    (data1=00B1A620)
    (data2=00B1A620)
    (data3=00B1A620)
    (data4=00B1A620)
    (data5=00B1A620)
    (data8=00B1A620)
    (data9=00B1A620)
    (data10=00B1A620)
    (data11=00B1A620)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00B1A620)
    (data1_val=00B1A620)
    (data2_val=00B1A620)
    (data3_val=00B1A620)
    (data4_val=00B1A620)
    (data5_val=00B1A620)
    (data8_val=00B1A620)
    (data9_val=00B1A620)
    (data10_val=00B1A620)
    (data11_val=00B1A620)
target=30, linearSearch=[30, 1555]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=00B0F2C0)
    (data1_def=00B0F2C0)
    (data2_def=00B0F2C0)
    (data3_def=00B0F2C0)
    (data4_def=00B0F2C0)
    (data5_def=00B0F2C0)
    (data8_def=00B0F2C0)
    (data9_def=00B0F2C0)
    (data10_def=00B0F2C0)
    (data11_def=00B0F2C0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00B0F2C0)
    (data1=00B0F2C0)
    (data2=00B0F2C0)
    (data3=00B0F2C0)
    (data4=00B0F2C0)
    (data5=00B0F2C0)
    (data8=00B0F2C0)
    (data9=00B0F2C0)
    (data10=00B0F2C0)
    (data11=00B0F2C0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00B0F2C0)
    (data1_val=00B0F2C0)
    (data2_val=00B0F2C0)
    (data3_val=00B0F2C0)
    (data4_val=00B0F2C0)
    (data5_val=00B0F2C0)
    (data8_val=00B0F2C0)
    (data9_val=00B0F2C0)
    (data10_val=00B0F2C0)
    (data11_val=00B0F2C0)
target=62, linearSearch=[62, 981]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=00B15300)
    (data1_def=00B15300)
    (data2_def=00B15300)
    (data3_def=00B15300)
    (data4_def=00B15300)
    (data5_def=00B15300)
    (data8_def=00B15300)
    (data9_def=00B15300)
    (data10_def=00B15300)
    (data11_def=00B15300)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00B15300)
    (data1=00B15300)
    (data2=00B15300)
    (data3=00B15300)
    (data4=00B15300)
    (data5=00B15300)
    (data8=00B15300)
    (data9=00B15300)
    (data10=00B15300)
    (data11=00B15300)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00B15300)
    (data1_val=00B15300)
    (data2_val=00B15300)
    (data3_val=00B15300)
    (data4_val=00B15300)
    (data5_val=00B15300)
    (data8_val=00B15300)
    (data9_val=00B15300)
    (data10_val=00B15300)
    (data11_val=00B15300)
target=126, linearSearch=[126, 1289]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=00B9B540)
    (data1_def=00B9B540)
    (data2_def=00B9B540)
    (data3_def=00B9B540)
    (data4_def=00B9B540)
    (data5_def=00B9B540)
    (data8_def=00B9B540)
    (data9_def=00B9B540)
    (data10_def=00B9B540)
    (data11_def=00B9B540)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00B9B540)
    (data1=00B9B540)
    (data2=00B9B540)
    (data3=00B9B540)
    (data4=00B9B540)
    (data5=00B9B540)
    (data8=00B9B540)
    (data9=00B9B540)
    (data10=00B9B540)
    (data11=00B9B540)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00B9B540)
    (data1_val=00B9B540)
    (data2_val=00B9B540)
    (data3_val=00B9B540)
    (data4_val=00B9B540)
    (data5_val=00B9B540)
    (data8_val=00B9B540)
    (data9_val=00B9B540)
    (data10_val=00B9B540)
    (data11_val=00B9B540)
target=254, linearSearch=[254, 8157]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
   (data10_def=00000000)
    (data11_def=00000000)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=00AFC030)
    (data1_def=00AFC030)
    (data2_def=00AFC030)
    (data3_def=00AFC030)
    (data4_def=00AFC030)
    (data5_def=00AFC030)
    (data8_def=00AFC030)
    (data9_def=00AFC030)
   (data10_def=00AFC030)
    (data11_def=00AFC030)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00AFC030)
    (data1=00AFC030)
    (data2=00AFC030)
    (data3=00AFC030)
    (data4=00AFC030)
    (data5=00AFC030)
    (data8=00AFC030)
    (data9=00AFC030)
    (data10=00AFC030)
    (data11=00AFC030)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00AFC030)
    (data1_val=00AFC030)
    (data2_val=00AFC030)
    (data3_val=00AFC030)
    (data4_val=00AFC030)
    (data5_val=00AFC030)
    (data8_val=00AFC030)
    (data9_val=00AFC030)
    (data10_val=00AFC030)
    (data11_val=00AFC030)
target=0, binarySearch=[0, 2342]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=00AFC210)
    (data1_def=00AFC210)
    (data2_def=00AFC210)
    (data3_def=00AFC210)
    (data4_def=00AFC210)
    (data5_def=00AFC210)
    (data8_def=00AFC210)
    (data9_def=00AFC210)
   (data10_def=00AFC210)
    (data11_def=00AFC210)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00AFC210)
    (data1=00AFC210)
    (data2=00AFC210)
    (data3=00AFC210)
    (data4=00AFC210)
    (data5=00AFC210)
    (data8=00AFC210)
    (data9=00AFC210)
    (data10=00AFC210)
    (data11=00AFC210)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00AFC210)
    (data1_val=00AFC210)
    (data2_val=00AFC210)
    (data3_val=00AFC210)
    (data4_val=00AFC210)
    (data5_val=00AFC210)
    (data8_val=00AFC210)
    (data9_val=00AFC210)
    (data10_val=00AFC210)
    (data11_val=00AFC210)
target=2, binarySearch=[2, 6831]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=00AFC5D0)
    (data1_def=00AFC5D0)
    (data2_def=00AFC5D0)
    (data3_def=00AFC5D0)
    (data4_def=00AFC5D0)
    (data5_def=00AFC5D0)
    (data8_def=00AFC5D0)
    (data9_def=00AFC5D0)
   (data10_def=00AFC5D0)
    (data11_def=00AFC5D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00AFC5D0)
    (data1=00AFC5D0)
    (data2=00AFC5D0)
    (data3=00AFC5D0)
    (data4=00AFC5D0)
    (data5=00AFC5D0)
    (data8=00AFC5D0)
    (data9=00AFC5D0)
    (data10=00AFC5D0)
    (data11=00AFC5D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00AFC5D0)
    (data1_val=00AFC5D0)
    (data2_val=00AFC5D0)
    (data3_val=00AFC5D0)
    (data4_val=00AFC5D0)
    (data5_val=00AFC5D0)
    (data8_val=00AFC5D0)
    (data9_val=00AFC5D0)
    (data10_val=00AFC5D0)
    (data11_val=00AFC5D0)
target=6, binarySearch=[6, 1018]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=00AFCD50)
    (data1_def=00AFCD50)
    (data2_def=00AFCD50)
    (data3_def=00AFCD50)
    (data4_def=00AFCD50)
    (data5_def=00AFCD50)
    (data8_def=00AFCD50)
    (data9_def=00AFCD50)
   (data10_def=00AFCD50)
    (data11_def=00AFCD50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00AFCD50)
    (data1=00AFCD50)
    (data2=00AFCD50)
    (data3=00AFCD50)
    (data4=00AFCD50)
    (data5=00AFCD50)
    (data8=00AFCD50)
    (data9=00AFCD50)
    (data10=00AFCD50)
    (data11=00AFCD50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00AFCD50)
    (data1_val=00AFCD50)
    (data2_val=00AFCD50)
    (data3_val=00AFCD50)
    (data4_val=00AFCD50)
    (data5_val=00AFCD50)
    (data8_val=00AFCD50)
    (data9_val=00AFCD50)
    (data10_val=00AFCD50)
    (data11_val=00AFCD50)
target=14, binarySearch=[14, 4706]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=00AFDC50)
    (data1_def=00AFDC50)
    (data2_def=00AFDC50)
    (data3_def=00AFDC50)
    (data4_def=00AFDC50)
    (data5_def=00AFDC50)
    (data8_def=00AFDC50)
    (data9_def=00AFDC50)
   (data10_def=00AFDC50)
    (data11_def=00AFDC50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00AFDC50)
    (data1=00AFDC50)
    (data2=00AFDC50)
    (data3=00AFDC50)
    (data4=00AFDC50)
    (data5=00AFDC50)
    (data8=00AFDC50)
    (data9=00AFDC50)
    (data10=00AFDC50)
    (data11=00AFDC50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00AFDC50)
    (data1_val=00AFDC50)
    (data2_val=00AFDC50)
    (data3_val=00AFDC50)
    (data4_val=00AFDC50)
    (data5_val=00AFDC50)
    (data8_val=00AFDC50)
    (data9_val=00AFDC50)
    (data10_val=00AFDC50)
    (data11_val=00AFDC50)
target=30, binarySearch=[30, 5065]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=00AFFA50)
    (data1_def=00AFFA50)
    (data2_def=00AFFA50)
    (data3_def=00AFFA50)
    (data4_def=00AFFA50)
    (data5_def=00AFFA50)
    (data8_def=00AFFA50)
    (data9_def=00AFFA50)
   (data10_def=00AFFA50)
    (data11_def=00AFFA50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00AFFA50)
    (data1=00AFFA50)
    (data2=00AFFA50)
    (data3=00AFFA50)
    (data4=00AFFA50)
    (data5=00AFFA50)
    (data8=00AFFA50)
    (data9=00AFFA50)
    (data10=00AFFA50)
    (data11=00AFFA50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00AFFA50)
    (data1_val=00AFFA50)
    (data2_val=00AFFA50)
    (data3_val=00AFFA50)
    (data4_val=00AFFA50)
    (data5_val=00AFFA50)
    (data8_val=00AFFA50)
    (data9_val=00AFFA50)
    (data10_val=00AFFA50)
    (data11_val=00AFFA50)
target=62, binarySearch=[62, 9221]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=00B03650)
    (data1_def=00B03650)
    (data2_def=00B03650)
    (data3_def=00B03650)
    (data4_def=00B03650)
    (data5_def=00B03650)
    (data8_def=00B03650)
    (data9_def=00B03650)
   (data10_def=00B03650)
    (data11_def=00B03650)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00B03650)
    (data1=00B03650)
    (data2=00B03650)
    (data3=00B03650)
    (data4=00B03650)
    (data5=00B03650)
    (data8=00B03650)
    (data9=00B03650)
    (data10=00B03650)
    (data11=00B03650)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00B03650)
    (data1_val=00B03650)
    (data2_val=00B03650)
    (data3_val=00B03650)
    (data4_val=00B03650)
    (data5_val=00B03650)
    (data8_val=00B03650)
    (data9_val=00B03650)
    (data10_val=00B03650)
    (data11_val=00B03650)
target=126, binarySearch=[126, 1289]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=00B0AE50)
    (data1_def=00B0AE50)
    (data2_def=00B0AE50)
    (data3_def=00B0AE50)
    (data4_def=00B0AE50)
    (data5_def=00B0AE50)
    (data8_def=00B0AE50)
    (data9_def=00B0AE50)
   (data10_def=00B0AE50)
    (data11_def=00B0AE50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00B0AE50)
    (data1=00B0AE50)
    (data2=00B0AE50)
    (data3=00B0AE50)
    (data4=00B0AE50)
    (data5=00B0AE50)
    (data8=00B0AE50)
    (data9=00B0AE50)
    (data10=00B0AE50)
    (data11=00B0AE50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00B0AE50)
    (data1_val=00B0AE50)
    (data2_val=00B0AE50)
    (data3_val=00B0AE50)
    (data4_val=00B0AE50)
    (data5_val=00B0AE50)
    (data8_val=00B0AE50)
    (data9_val=00B0AE50)
    (data10_val=00B0AE50)
    (data11_val=00B0AE50)
target=254, binarySearch=[254, 8763]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=6.422875600 sec.
