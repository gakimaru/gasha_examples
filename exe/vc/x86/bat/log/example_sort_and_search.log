============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=4951 / record(s)=10000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=5002 / record(s)=10000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=4984 / record(s)=10000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=10000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=3333 / record(s)=10000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=10000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=4976 / record(s)=10000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.003002300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003004400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.003003800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.003002600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.015015700 sec.
* Average time     = 0.002145100 sec.
* Min time         = 0.001000600 sec.
* Max time         = 0.003004400 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002003300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.007008800 sec.
* Average time     = 0.001001257 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002003300 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.006006700 sec.
* Average time     = 0.000858100 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002001700 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.004003900 sec.
* Average time     = 0.000571986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.003002600 sec.
* Average time     = 0.000428943 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000900 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001400 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001700 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001700 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.007008700 sec.
* Average time     = 0.001001243 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002001800 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.241229800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.235223800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.232220700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.270255800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.065061800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.263250500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 1.307242400 sec.
* Average time     = 0.186748914 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.270255800 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.183174000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.180171800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.179170200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.254241700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.233223300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 1.030982500 sec.
* Average time     = 0.147283214 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.254241700 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.127119500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.127120800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.129122700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.183174700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.055052100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.154146500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.775736300 sec.
* Average time     = 0.110819471 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.183174700 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.005005000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1892312 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.006005900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1873730 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.005004400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1860168 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=485134 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.003002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1465201 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=485527 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.005004400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1882044 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.026025200 sec.
* Average time     = 0.003717886 sec.
* Min time         = 0.001001200 sec.
* Max time         = 0.006005900 sec.
* Total Swapped    =   9944116 count(s)
* Average  Swapped =   1420588 count(s)
* Min Swapped      =    485134 count(s)
* Max Swapped      =   1892312 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002002300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57500 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57587 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57584 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=18345 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=7303 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=58823 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.009009100 sec.
* Average time     = 0.001287014 sec.
* Min time         = 0.001000800 sec.
* Max time         = 0.002002300 sec.
* Total Swapped    =    257142 count(s)
* Average  Swapped =     36734 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     58823 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.156149100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.122118100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.122116000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.256242100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.190182300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 0.846807600 sec.
* Average time     = 0.120972514 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.256242100 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33719 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33677 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33444 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=36402 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.003001700 sec.
* Average time     = 0.000428814 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001100 sec.
* Total Swapped    =    152242 count(s)
* Average  Swapped =     21748 count(s)
* Min Swapped      =      3333 count(s)
* Max Swapped      =     36402 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.122117800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.122114500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9995 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.122118100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.121114900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.121115100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.121115500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.120113200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9989 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.849809100 sec.
* Average time     = 0.121401300 sec.
* Min time         = 0.120113200 sec.
* Max time         = 0.122118100 sec.
* Total Swapped    =     48300 count(s)
* Average  Swapped =      6900 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129635 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129583 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129778 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=218680 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=116627 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=213143 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002002700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=123006 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.010011200 sec.
* Average time     = 0.001430171 sec.
* Min time         = 0.001000600 sec.
* Max time         = 0.002002900 sec.
* Total Swapped    =   1060452 count(s)
* Average  Swapped =    151493 count(s)
* Min Swapped      =    116627 count(s)
* Max Swapped      =    218680 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.114107200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9985 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.115108700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9987 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.113107800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9983 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.292279800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.188179100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9994 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.822782600 sec.
* Average time     = 0.117540371 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.292279800 sec.
* Total Swapped    =     59947 count(s)
* Average  Swapped =      8563 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48473 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48925 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001002700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48799 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=37222 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=5156 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001002600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49469 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.005008200 sec.
* Average time     = 0.000715457 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001002700 sec.
* Total Swapped    =    238044 count(s)
* Average  Swapped =     34006 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     49469 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.073069400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58291 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.072068300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58193 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.072070300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58188 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.156146800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=60442 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.117111300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58404 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.490466100 sec.
* Average time     = 0.070066586 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.156146800 sec.
* Total Swapped    =    303524 count(s)
* Average  Swapped =     43360 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     60442 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31152 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31250 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31256 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=6022 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1024 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33844 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.001001100 sec.
* Average time     = 0.000143014 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001100 sec.
* Total Swapped    =    134548 count(s)
* Average  Swapped =     19221 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     33844 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9996 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9998 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.001000900 sec.
* Average time     = 0.000142986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000900 sec.
* Total Swapped    =     49997 count(s)
* Average  Swapped =      7142 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     10000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 10000 Count(s)
Total Array size   = 800000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.015015700/  0.002145100/  0.001000600/  0.003004400
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.007008800/  0.001001257/  0.000000000/  0.002003300
- std::sort(inline-func):   0.006006700/  0.000858100/  0.000000000/  0.002001700
- std::sort(functor):       0.004003900/  0.000571986/  0.000000000/  0.001001200
- std::sort(lambda):        0.003002600/  0.000428943/  0.000000000/  0.001000900
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.007008700/  0.001001243/  0.000000000/  0.002001800
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           1.307242400/  0.186748914/  0.000000000/  0.270255800  162016591/   23145227/          0/   49985001
- Shaker sort<S>:           1.030982500/  0.147283214/  0.000000000/  0.254241700  162016591/   23145227/          0/   49985001
- Odd-Even sort<S>:         0.775736300/  0.110819471/  0.000000000/  0.183174700  162016591/   23145227/          0/   49985001
- Shear sort:               0.026025200/  0.003717886/  0.001001200/  0.006005900    9944116/    1420588/     485134/    1892312
- Comb sort:                0.009009100/  0.001287014/  0.001000800/  0.002002300     257142/      36734/          0/      58823
- Gnome sort<S>:            0.846807600/  0.120972514/  0.000000000/  0.256242100  162016591/   23145227/          0/   49985001
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.003001700/  0.000428814/  0.000000000/  0.001001100     152242/      21748/       3333/      36402
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.849809100/  0.121401300/  0.120113200/  0.122118100      48300/       6900/          0/       9995
- Heap sort:                0.010011200/  0.001430171/  0.001000600/  0.002002900    1060452/     151493/     116627/     218680
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.822782600/  0.117540371/  0.000000000/  0.292279800      59947/       8563/          0/       9999
- Shell sort:               0.005008200/  0.000715457/  0.000000000/  0.001002700     238044/      34006/          0/      49469
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.490466100/  0.070066586/  0.000000000/  0.156146800     303524/      43360/          0/      60442
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.001001100/  0.000143014/  0.000000000/  0.001001100     134548/      19221/          0/      33844
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.001000900/  0.000142986/  0.000000000/  0.001000900      49997/       7142/          0/      10000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=31152)
(result1=31152)
(result3=31152)
(result4=31152)
(result5=31152)
(result6=31152)
(result8=31152)
(result9=31152)
(result10=31152)
(result11=31095)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
    (data10_def=00000000)
    (data11_def=00000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=00AA7C10)
    (data1_def=00AA7C10)
    (data2_def=00AA7C10)
    (data3_def=00AA7C10)
    (data4_def=00AA7C10)
    (data5_def=00AA7C10)
    (data8_def=00AA7C10)
    (data9_def=00AA7C10)
    (data10_def=00AA7C10)
    (data11_def=00AA7C10)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00AA7C10)
    (data1=00AA7C10)
    (data2=00AA7C10)
    (data3=00AA7C10)
    (data4=00AA7C10)
    (data5=00AA7C10)
    (data8=00AA7C10)
    (data9=00AA7C10)
    (data10=00AA7C10)
    (data11=00AA7C10)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00AA7C10)
    (data1_val=00AA7C10)
    (data2_val=00AA7C10)
    (data3_val=00AA7C10)
    (data4_val=00AA7C10)
    (data5_val=00AA7C10)
    (data8_val=00AA7C10)
    (data9_val=00AA7C10)
    (data10_val=00AA7C10)
    (data11_val=00AA7C10)
target=0, linearSearch=[0, 2342]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=00A853E0)
    (data1_def=00A853E0)
    (data2_def=00A853E0)
    (data3_def=00A853E0)
    (data4_def=00A853E0)
    (data5_def=00A853E0)
    (data8_def=00A853E0)
    (data9_def=00A853E0)
    (data10_def=00A853E0)
    (data11_def=00A853E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00A853E0)
    (data1=00A853E0)
    (data2=00A853E0)
    (data3=00A853E0)
    (data4=00A853E0)
    (data5=00A853E0)
    (data8=00A853E0)
    (data9=00A853E0)
    (data10=00A853E0)
    (data11=00A853E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00A853E0)
    (data1_val=00A853E0)
    (data2_val=00A853E0)
    (data3_val=00A853E0)
    (data4_val=00A853E0)
    (data5_val=00A853E0)
    (data8_val=00A853E0)
    (data9_val=00A853E0)
    (data10_val=00A853E0)
    (data11_val=00A853E0)
target=2, linearSearch=[2, 575]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=00A8DE50)
    (data1_def=00A8DE50)
    (data2_def=00A8DE50)
    (data3_def=00A8DE50)
    (data4_def=00A8DE50)
    (data5_def=00A8DE50)
    (data8_def=00A8DE50)
    (data9_def=00A8DE50)
    (data10_def=00A8DE50)
    (data11_def=00A8DE50)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00A8DE50)
    (data1=00A8DE50)
    (data2=00A8DE50)
    (data3=00A8DE50)
    (data4=00A8DE50)
    (data5=00A8DE50)
    (data8=00A8DE50)
    (data9=00A8DE50)
    (data10=00A8DE50)
    (data11=00A8DE50)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00A8DE50)
    (data1_val=00A8DE50)
    (data2_val=00A8DE50)
    (data3_val=00A8DE50)
    (data4_val=00A8DE50)
    (data5_val=00A8DE50)
    (data8_val=00A8DE50)
    (data9_val=00A8DE50)
    (data10_val=00A8DE50)
    (data11_val=00A8DE50)
target=6, linearSearch=[6, 1018]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=00AA51E0)
    (data1_def=00AA51E0)
    (data2_def=00AA51E0)
    (data3_def=00AA51E0)
    (data4_def=00AA51E0)
    (data5_def=00AA51E0)
    (data8_def=00AA51E0)
    (data9_def=00AA51E0)
    (data10_def=00AA51E0)
    (data11_def=00AA51E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00AA51E0)
    (data1=00AA51E0)
    (data2=00AA51E0)
    (data3=00AA51E0)
    (data4=00AA51E0)
    (data5=00AA51E0)
    (data8=00AA51E0)
    (data9=00AA51E0)
    (data10=00AA51E0)
    (data11=00AA51E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00AA51E0)
    (data1_val=00AA51E0)
    (data2_val=00AA51E0)
    (data3_val=00AA51E0)
    (data4_val=00AA51E0)
    (data5_val=00AA51E0)
    (data8_val=00AA51E0)
    (data9_val=00AA51E0)
    (data10_val=00AA51E0)
    (data11_val=00AA51E0)
target=14, linearSearch=[14, 2207]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=00A98620)
    (data1_def=00A98620)
    (data2_def=00A98620)
    (data3_def=00A98620)
    (data4_def=00A98620)
    (data5_def=00A98620)
    (data8_def=00A98620)
    (data9_def=00A98620)
    (data10_def=00A98620)
    (data11_def=00A98620)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00A98620)
    (data1=00A98620)
    (data2=00A98620)
    (data3=00A98620)
    (data4=00A98620)
    (data5=00A98620)
    (data8=00A98620)
    (data9=00A98620)
    (data10=00A98620)
    (data11=00A98620)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00A98620)
    (data1_val=00A98620)
    (data2_val=00A98620)
    (data3_val=00A98620)
    (data4_val=00A98620)
    (data5_val=00A98620)
    (data8_val=00A98620)
    (data9_val=00A98620)
    (data10_val=00A98620)
    (data11_val=00A98620)
target=30, linearSearch=[30, 1555]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=00A8D2C0)
    (data1_def=00A8D2C0)
    (data2_def=00A8D2C0)
    (data3_def=00A8D2C0)
    (data4_def=00A8D2C0)
    (data5_def=00A8D2C0)
    (data8_def=00A8D2C0)
    (data9_def=00A8D2C0)
    (data10_def=00A8D2C0)
    (data11_def=00A8D2C0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00A8D2C0)
    (data1=00A8D2C0)
    (data2=00A8D2C0)
    (data3=00A8D2C0)
    (data4=00A8D2C0)
    (data5=00A8D2C0)
    (data8=00A8D2C0)
    (data9=00A8D2C0)
    (data10=00A8D2C0)
    (data11=00A8D2C0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00A8D2C0)
    (data1_val=00A8D2C0)
    (data2_val=00A8D2C0)
    (data3_val=00A8D2C0)
    (data4_val=00A8D2C0)
    (data5_val=00A8D2C0)
    (data8_val=00A8D2C0)
    (data9_val=00A8D2C0)
    (data10_val=00A8D2C0)
    (data11_val=00A8D2C0)
target=62, linearSearch=[62, 981]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=00A93300)
    (data1_def=00A93300)
    (data2_def=00A93300)
    (data3_def=00A93300)
    (data4_def=00A93300)
    (data5_def=00A93300)
    (data8_def=00A93300)
    (data9_def=00A93300)
    (data10_def=00A93300)
    (data11_def=00A93300)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00A93300)
    (data1=00A93300)
    (data2=00A93300)
    (data3=00A93300)
    (data4=00A93300)
    (data5=00A93300)
    (data8=00A93300)
    (data9=00A93300)
    (data10=00A93300)
    (data11=00A93300)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00A93300)
    (data1_val=00A93300)
    (data2_val=00A93300)
    (data3_val=00A93300)
    (data4_val=00A93300)
    (data5_val=00A93300)
    (data8_val=00A93300)
    (data9_val=00A93300)
    (data10_val=00A93300)
    (data11_val=00A93300)
target=126, linearSearch=[126, 1289]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=00B19540)
    (data1_def=00B19540)
    (data2_def=00B19540)
    (data3_def=00B19540)
    (data4_def=00B19540)
    (data5_def=00B19540)
    (data8_def=00B19540)
    (data9_def=00B19540)
    (data10_def=00B19540)
    (data11_def=00B19540)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00B19540)
    (data1=00B19540)
    (data2=00B19540)
    (data3=00B19540)
    (data4=00B19540)
    (data5=00B19540)
    (data8=00B19540)
    (data9=00B19540)
    (data10=00B19540)
    (data11=00B19540)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00B19540)
    (data1_val=00B19540)
    (data2_val=00B19540)
    (data3_val=00B19540)
    (data4_val=00B19540)
    (data5_val=00B19540)
    (data8_val=00B19540)
    (data9_val=00B19540)
    (data10_val=00B19540)
    (data11_val=00B19540)
target=254, linearSearch=[254, 8157]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
   (data10_def=00000000)
    (data11_def=00000000)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=00A7A030)
    (data1_def=00A7A030)
    (data2_def=00A7A030)
    (data3_def=00A7A030)
    (data4_def=00A7A030)
    (data5_def=00A7A030)
    (data8_def=00A7A030)
    (data9_def=00A7A030)
   (data10_def=00A7A030)
    (data11_def=00A7A030)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00A7A030)
    (data1=00A7A030)
    (data2=00A7A030)
    (data3=00A7A030)
    (data4=00A7A030)
    (data5=00A7A030)
    (data8=00A7A030)
    (data9=00A7A030)
    (data10=00A7A030)
    (data11=00A7A030)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00A7A030)
    (data1_val=00A7A030)
    (data2_val=00A7A030)
    (data3_val=00A7A030)
    (data4_val=00A7A030)
    (data5_val=00A7A030)
    (data8_val=00A7A030)
    (data9_val=00A7A030)
    (data10_val=00A7A030)
    (data11_val=00A7A030)
target=0, binarySearch=[0, 2342]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=00A7A210)
    (data1_def=00A7A210)
    (data2_def=00A7A210)
    (data3_def=00A7A210)
    (data4_def=00A7A210)
    (data5_def=00A7A210)
    (data8_def=00A7A210)
    (data9_def=00A7A210)
   (data10_def=00A7A210)
    (data11_def=00A7A210)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00A7A210)
    (data1=00A7A210)
    (data2=00A7A210)
    (data3=00A7A210)
    (data4=00A7A210)
    (data5=00A7A210)
    (data8=00A7A210)
    (data9=00A7A210)
    (data10=00A7A210)
    (data11=00A7A210)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00A7A210)
    (data1_val=00A7A210)
    (data2_val=00A7A210)
    (data3_val=00A7A210)
    (data4_val=00A7A210)
    (data5_val=00A7A210)
    (data8_val=00A7A210)
    (data9_val=00A7A210)
    (data10_val=00A7A210)
    (data11_val=00A7A210)
target=2, binarySearch=[2, 6831]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=00A7A5D0)
    (data1_def=00A7A5D0)
    (data2_def=00A7A5D0)
    (data3_def=00A7A5D0)
    (data4_def=00A7A5D0)
    (data5_def=00A7A5D0)
    (data8_def=00A7A5D0)
    (data9_def=00A7A5D0)
   (data10_def=00A7A5D0)
    (data11_def=00A7A5D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00A7A5D0)
    (data1=00A7A5D0)
    (data2=00A7A5D0)
    (data3=00A7A5D0)
    (data4=00A7A5D0)
    (data5=00A7A5D0)
    (data8=00A7A5D0)
    (data9=00A7A5D0)
    (data10=00A7A5D0)
    (data11=00A7A5D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00A7A5D0)
    (data1_val=00A7A5D0)
    (data2_val=00A7A5D0)
    (data3_val=00A7A5D0)
    (data4_val=00A7A5D0)
    (data5_val=00A7A5D0)
    (data8_val=00A7A5D0)
    (data9_val=00A7A5D0)
    (data10_val=00A7A5D0)
    (data11_val=00A7A5D0)
target=6, binarySearch=[6, 1018]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=00A7AD50)
    (data1_def=00A7AD50)
    (data2_def=00A7AD50)
    (data3_def=00A7AD50)
    (data4_def=00A7AD50)
    (data5_def=00A7AD50)
    (data8_def=00A7AD50)
    (data9_def=00A7AD50)
   (data10_def=00A7AD50)
    (data11_def=00A7AD50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00A7AD50)
    (data1=00A7AD50)
    (data2=00A7AD50)
    (data3=00A7AD50)
    (data4=00A7AD50)
    (data5=00A7AD50)
    (data8=00A7AD50)
    (data9=00A7AD50)
    (data10=00A7AD50)
    (data11=00A7AD50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00A7AD50)
    (data1_val=00A7AD50)
    (data2_val=00A7AD50)
    (data3_val=00A7AD50)
    (data4_val=00A7AD50)
    (data5_val=00A7AD50)
    (data8_val=00A7AD50)
    (data9_val=00A7AD50)
    (data10_val=00A7AD50)
    (data11_val=00A7AD50)
target=14, binarySearch=[14, 4706]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=00A7BC50)
    (data1_def=00A7BC50)
    (data2_def=00A7BC50)
    (data3_def=00A7BC50)
    (data4_def=00A7BC50)
    (data5_def=00A7BC50)
    (data8_def=00A7BC50)
    (data9_def=00A7BC50)
   (data10_def=00A7BC50)
    (data11_def=00A7BC50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00A7BC50)
    (data1=00A7BC50)
    (data2=00A7BC50)
    (data3=00A7BC50)
    (data4=00A7BC50)
    (data5=00A7BC50)
    (data8=00A7BC50)
    (data9=00A7BC50)
    (data10=00A7BC50)
    (data11=00A7BC50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00A7BC50)
    (data1_val=00A7BC50)
    (data2_val=00A7BC50)
    (data3_val=00A7BC50)
    (data4_val=00A7BC50)
    (data5_val=00A7BC50)
    (data8_val=00A7BC50)
    (data9_val=00A7BC50)
    (data10_val=00A7BC50)
    (data11_val=00A7BC50)
target=30, binarySearch=[30, 5065]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=00A7DA50)
    (data1_def=00A7DA50)
    (data2_def=00A7DA50)
    (data3_def=00A7DA50)
    (data4_def=00A7DA50)
    (data5_def=00A7DA50)
    (data8_def=00A7DA50)
    (data9_def=00A7DA50)
   (data10_def=00A7DA50)
    (data11_def=00A7DA50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00A7DA50)
    (data1=00A7DA50)
    (data2=00A7DA50)
    (data3=00A7DA50)
    (data4=00A7DA50)
    (data5=00A7DA50)
    (data8=00A7DA50)
    (data9=00A7DA50)
    (data10=00A7DA50)
    (data11=00A7DA50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00A7DA50)
    (data1_val=00A7DA50)
    (data2_val=00A7DA50)
    (data3_val=00A7DA50)
    (data4_val=00A7DA50)
    (data5_val=00A7DA50)
    (data8_val=00A7DA50)
    (data9_val=00A7DA50)
    (data10_val=00A7DA50)
    (data11_val=00A7DA50)
target=62, binarySearch=[62, 9221]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=00A81650)
    (data1_def=00A81650)
    (data2_def=00A81650)
    (data3_def=00A81650)
    (data4_def=00A81650)
    (data5_def=00A81650)
    (data8_def=00A81650)
    (data9_def=00A81650)
   (data10_def=00A81650)
    (data11_def=00A81650)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00A81650)
    (data1=00A81650)
    (data2=00A81650)
    (data3=00A81650)
    (data4=00A81650)
    (data5=00A81650)
    (data8=00A81650)
    (data9=00A81650)
    (data10=00A81650)
    (data11=00A81650)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00A81650)
    (data1_val=00A81650)
    (data2_val=00A81650)
    (data3_val=00A81650)
    (data4_val=00A81650)
    (data5_val=00A81650)
    (data8_val=00A81650)
    (data9_val=00A81650)
    (data10_val=00A81650)
    (data11_val=00A81650)
target=126, binarySearch=[126, 1289]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=00A88E50)
    (data1_def=00A88E50)
    (data2_def=00A88E50)
    (data3_def=00A88E50)
    (data4_def=00A88E50)
    (data5_def=00A88E50)
    (data8_def=00A88E50)
    (data9_def=00A88E50)
   (data10_def=00A88E50)
    (data11_def=00A88E50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00A88E50)
    (data1=00A88E50)
    (data2=00A88E50)
    (data3=00A88E50)
    (data4=00A88E50)
    (data5=00A88E50)
    (data8=00A88E50)
    (data9=00A88E50)
    (data10=00A88E50)
    (data11=00A88E50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00A88E50)
    (data1_val=00A88E50)
    (data2_val=00A88E50)
    (data3_val=00A88E50)
    (data4_val=00A88E50)
    (data5_val=00A88E50)
    (data8_val=00A88E50)
    (data9_val=00A88E50)
    (data10_val=00A88E50)
    (data11_val=00A88E50)
target=254, binarySearch=[254, 8763]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=6.276971100 sec.
