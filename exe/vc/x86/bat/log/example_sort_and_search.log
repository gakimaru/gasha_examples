============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=4951 / record(s)=10000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=5002 / record(s)=10000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=4984 / record(s)=10000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=10000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=3333 / record(s)=10000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=10000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=4976 / record(s)=10000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.005004400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.005005000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.005004700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.005004100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.023020800 sec.
* Average time     = 0.003288686 sec.
* Min time         = 0.001000800 sec.
* Max time         = 0.005005000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002002700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001988600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002002000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.008996000 sec.
* Average time     = 0.001285143 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002002700 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.008006700 sec.
* Average time     = 0.001143814 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002001800 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001002300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.003003200 sec.
* Average time     = 0.000429029 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001002300 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.005004700 sec.
* Average time     = 0.000714957 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000997400 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.002001500 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.009004700 sec.
* Average time     = 0.001286386 sec.
* Min time         = 0.000997400 sec.
* Max time         = 0.002001700 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.221211800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.223212900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.240228500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.326311600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.067063400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.243231900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 1.321260100 sec.
* Average time     = 0.188751443 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.326311600 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.183173000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.179172600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.177168600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.301286600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.237225600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 1.078026400 sec.
* Average time     = 0.154003771 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.301286600 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.134126800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.128122500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.130123600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.188179400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.060056900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.163155400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.803764600 sec.
* Average time     = 0.114823514 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.188179400 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.004004100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1892312 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.005004900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1873730 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.005004500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1860168 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=485134 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.003002700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1465201 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=485527 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.005005000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1882044 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.024023000 sec.
* Average time     = 0.003431857 sec.
* Min time         = 0.001000900 sec.
* Max time         = 0.005005000 sec.
* Total Swapped    =   9944116 count(s)
* Average  Swapped =   1420588 count(s)
* Min Swapped      =    485134 count(s)
* Max Swapped      =   1892312 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002001500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57500 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002002000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57587 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57584 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=18345 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=7303 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=58823 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.007006800 sec.
* Average time     = 0.001000971 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002002000 sec.
* Total Swapped    =    257142 count(s)
* Average  Swapped =     36734 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     58823 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.156148900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.124119200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.122117500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.255242900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.189180300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 0.846808800 sec.
* Average time     = 0.120972686 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.255242900 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33719 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33677 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33444 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=36402 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.003003200 sec.
* Average time     = 0.000429029 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001500 sec.
* Total Swapped    =    152242 count(s)
* Average  Swapped =     21748 count(s)
* Min Swapped      =      3333 count(s)
* Max Swapped      =     36402 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.122116000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.123118000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9995 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.122115700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.124118000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.124118300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.124118400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.123118300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9989 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.862822700 sec.
* Average time     = 0.123260386 sec.
* Min time         = 0.122115700 sec.
* Max time         = 0.124118400 sec.
* Total Swapped    =     48300 count(s)
* Average  Swapped =      6900 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129635 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000990700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129583 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129778 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=218680 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=116627 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=213143 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=123006 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.007997700 sec.
* Average time     = 0.001142529 sec.
* Min time         = 0.000990700 sec.
* Max time         = 0.002001700 sec.
* Total Swapped    =   1060452 count(s)
* Average  Swapped =    151493 count(s)
* Min Swapped      =    116627 count(s)
* Max Swapped      =    218680 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.116105400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9985 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.116110400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9987 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.120113900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9983 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.247236100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.190181500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9994 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.789747300 sec.
* Average time     = 0.112821043 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.247236100 sec.
* Total Swapped    =     59947 count(s)
* Average  Swapped =      8563 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48473 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48925 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48799 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=37222 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=5156 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49469 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.004003900 sec.
* Average time     = 0.000571986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =    238044 count(s)
* Average  Swapped =     34006 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     49469 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.074069000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58291 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.074070500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58193 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.073069600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58188 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.158150600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=60442 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.116111900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58404 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.495471600 sec.
* Average time     = 0.070781657 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.158150600 sec.
* Total Swapped    =    303524 count(s)
* Average  Swapped =     43360 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     60442 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31152 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31250 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31256 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=6022 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1024 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33844 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.003002700 sec.
* Average time     = 0.000428957 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000900 sec.
* Total Swapped    =    134548 count(s)
* Average  Swapped =     19221 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     33844 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001002900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9996 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9998 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.001002900 sec.
* Average time     = 0.000143271 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001002900 sec.
* Total Swapped    =     49997 count(s)
* Average  Swapped =      7142 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     10000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 10000 Count(s)
Total Array size   = 800000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.023020800/  0.003288686/  0.001000800/  0.005005000
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.008996000/  0.001285143/  0.000000000/  0.002002700
- std::sort(inline-func):   0.008006700/  0.001143814/  0.000000000/  0.002001800
- std::sort(functor):       0.003003200/  0.000429029/  0.000000000/  0.001002300
- std::sort(lambda):        0.005004700/  0.000714957/  0.000000000/  0.001001200
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.009004700/  0.001286386/  0.000997400/  0.002001700
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           1.321260100/  0.188751443/  0.000000000/  0.326311600  162016591/   23145227/          0/   49985001
- Shaker sort<S>:           1.078026400/  0.154003771/  0.000000000/  0.301286600  162016591/   23145227/          0/   49985001
- Odd-Even sort<S>:         0.803764600/  0.114823514/  0.000000000/  0.188179400  162016591/   23145227/          0/   49985001
- Shear sort:               0.024023000/  0.003431857/  0.001000900/  0.005005000    9944116/    1420588/     485134/    1892312
- Comb sort:                0.007006800/  0.001000971/  0.000000000/  0.002002000     257142/      36734/          0/      58823
- Gnome sort<S>:            0.846808800/  0.120972686/  0.000000000/  0.255242900  162016591/   23145227/          0/   49985001
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.003003200/  0.000429029/  0.000000000/  0.001001500     152242/      21748/       3333/      36402
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.862822700/  0.123260386/  0.122115700/  0.124118400      48300/       6900/          0/       9995
- Heap sort:                0.007997700/  0.001142529/  0.000990700/  0.002001700    1060452/     151493/     116627/     218680
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.789747300/  0.112821043/  0.000000000/  0.247236100      59947/       8563/          0/       9999
- Shell sort:               0.004003900/  0.000571986/  0.000000000/  0.001001200     238044/      34006/          0/      49469
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.495471600/  0.070781657/  0.000000000/  0.158150600     303524/      43360/          0/      60442
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.003002700/  0.000428957/  0.000000000/  0.001000900     134548/      19221/          0/      33844
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.001002900/  0.000143271/  0.000000000/  0.001002900      49997/       7142/          0/      10000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=31152)
(result1=31152)
(result3=31152)
(result4=31152)
(result5=31152)
(result6=31152)
(result8=31152)
(result9=31152)
(result10=31152)
(result11=31095)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
    (data10_def=00000000)
    (data11_def=00000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=0107AC10)
    (data1_def=0107AC10)
    (data2_def=0107AC10)
    (data3_def=0107AC10)
    (data4_def=0107AC10)
    (data5_def=0107AC10)
    (data8_def=0107AC10)
    (data9_def=0107AC10)
    (data10_def=0107AC10)
    (data11_def=0107AC10)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0107AC10)
    (data1=0107AC10)
    (data2=0107AC10)
    (data3=0107AC10)
    (data4=0107AC10)
    (data5=0107AC10)
    (data8=0107AC10)
    (data9=0107AC10)
    (data10=0107AC10)
    (data11=0107AC10)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0107AC10)
    (data1_val=0107AC10)
    (data2_val=0107AC10)
    (data3_val=0107AC10)
    (data4_val=0107AC10)
    (data5_val=0107AC10)
    (data8_val=0107AC10)
    (data9_val=0107AC10)
    (data10_val=0107AC10)
    (data11_val=0107AC10)
target=0, linearSearch=[0, 2342]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=010583E0)
    (data1_def=010583E0)
    (data2_def=010583E0)
    (data3_def=010583E0)
    (data4_def=010583E0)
    (data5_def=010583E0)
    (data8_def=010583E0)
    (data9_def=010583E0)
    (data10_def=010583E0)
    (data11_def=010583E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=010583E0)
    (data1=010583E0)
    (data2=010583E0)
    (data3=010583E0)
    (data4=010583E0)
    (data5=010583E0)
    (data8=010583E0)
    (data9=010583E0)
    (data10=010583E0)
    (data11=010583E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=010583E0)
    (data1_val=010583E0)
    (data2_val=010583E0)
    (data3_val=010583E0)
    (data4_val=010583E0)
    (data5_val=010583E0)
    (data8_val=010583E0)
    (data9_val=010583E0)
    (data10_val=010583E0)
    (data11_val=010583E0)
target=2, linearSearch=[2, 575]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=01060E50)
    (data1_def=01060E50)
    (data2_def=01060E50)
    (data3_def=01060E50)
    (data4_def=01060E50)
    (data5_def=01060E50)
    (data8_def=01060E50)
    (data9_def=01060E50)
    (data10_def=01060E50)
    (data11_def=01060E50)
  linearSearch(*array_shuffle1, search_predicate);
    (data=01060E50)
    (data1=01060E50)
    (data2=01060E50)
    (data3=01060E50)
    (data4=01060E50)
    (data5=01060E50)
    (data8=01060E50)
    (data9=01060E50)
    (data10=01060E50)
    (data11=01060E50)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=01060E50)
    (data1_val=01060E50)
    (data2_val=01060E50)
    (data3_val=01060E50)
    (data4_val=01060E50)
    (data5_val=01060E50)
    (data8_val=01060E50)
    (data9_val=01060E50)
    (data10_val=01060E50)
    (data11_val=01060E50)
target=6, linearSearch=[6, 1018]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=010781E0)
    (data1_def=010781E0)
    (data2_def=010781E0)
    (data3_def=010781E0)
    (data4_def=010781E0)
    (data5_def=010781E0)
    (data8_def=010781E0)
    (data9_def=010781E0)
    (data10_def=010781E0)
    (data11_def=010781E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=010781E0)
    (data1=010781E0)
    (data2=010781E0)
    (data3=010781E0)
    (data4=010781E0)
    (data5=010781E0)
    (data8=010781E0)
    (data9=010781E0)
    (data10=010781E0)
    (data11=010781E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=010781E0)
    (data1_val=010781E0)
    (data2_val=010781E0)
    (data3_val=010781E0)
    (data4_val=010781E0)
    (data5_val=010781E0)
    (data8_val=010781E0)
    (data9_val=010781E0)
    (data10_val=010781E0)
    (data11_val=010781E0)
target=14, linearSearch=[14, 2207]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=0106B620)
    (data1_def=0106B620)
    (data2_def=0106B620)
    (data3_def=0106B620)
    (data4_def=0106B620)
    (data5_def=0106B620)
    (data8_def=0106B620)
    (data9_def=0106B620)
    (data10_def=0106B620)
    (data11_def=0106B620)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0106B620)
    (data1=0106B620)
    (data2=0106B620)
    (data3=0106B620)
    (data4=0106B620)
    (data5=0106B620)
    (data8=0106B620)
    (data9=0106B620)
    (data10=0106B620)
    (data11=0106B620)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0106B620)
    (data1_val=0106B620)
    (data2_val=0106B620)
    (data3_val=0106B620)
    (data4_val=0106B620)
    (data5_val=0106B620)
    (data8_val=0106B620)
    (data9_val=0106B620)
    (data10_val=0106B620)
    (data11_val=0106B620)
target=30, linearSearch=[30, 1555]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=010602C0)
    (data1_def=010602C0)
    (data2_def=010602C0)
    (data3_def=010602C0)
    (data4_def=010602C0)
    (data5_def=010602C0)
    (data8_def=010602C0)
    (data9_def=010602C0)
    (data10_def=010602C0)
    (data11_def=010602C0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=010602C0)
    (data1=010602C0)
    (data2=010602C0)
    (data3=010602C0)
    (data4=010602C0)
    (data5=010602C0)
    (data8=010602C0)
    (data9=010602C0)
    (data10=010602C0)
    (data11=010602C0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=010602C0)
    (data1_val=010602C0)
    (data2_val=010602C0)
    (data3_val=010602C0)
    (data4_val=010602C0)
    (data5_val=010602C0)
    (data8_val=010602C0)
    (data9_val=010602C0)
    (data10_val=010602C0)
    (data11_val=010602C0)
target=62, linearSearch=[62, 981]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=01066300)
    (data1_def=01066300)
    (data2_def=01066300)
    (data3_def=01066300)
    (data4_def=01066300)
    (data5_def=01066300)
    (data8_def=01066300)
    (data9_def=01066300)
    (data10_def=01066300)
    (data11_def=01066300)
  linearSearch(*array_shuffle1, search_predicate);
    (data=01066300)
    (data1=01066300)
    (data2=01066300)
    (data3=01066300)
    (data4=01066300)
    (data5=01066300)
    (data8=01066300)
    (data9=01066300)
    (data10=01066300)
    (data11=01066300)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=01066300)
    (data1_val=01066300)
    (data2_val=01066300)
    (data3_val=01066300)
    (data4_val=01066300)
    (data5_val=01066300)
    (data8_val=01066300)
    (data9_val=01066300)
    (data10_val=01066300)
    (data11_val=01066300)
target=126, linearSearch=[126, 1289]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=010EC540)
    (data1_def=010EC540)
    (data2_def=010EC540)
    (data3_def=010EC540)
    (data4_def=010EC540)
    (data5_def=010EC540)
    (data8_def=010EC540)
    (data9_def=010EC540)
    (data10_def=010EC540)
    (data11_def=010EC540)
  linearSearch(*array_shuffle1, search_predicate);
    (data=010EC540)
    (data1=010EC540)
    (data2=010EC540)
    (data3=010EC540)
    (data4=010EC540)
    (data5=010EC540)
    (data8=010EC540)
    (data9=010EC540)
    (data10=010EC540)
    (data11=010EC540)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=010EC540)
    (data1_val=010EC540)
    (data2_val=010EC540)
    (data3_val=010EC540)
    (data4_val=010EC540)
    (data5_val=010EC540)
    (data8_val=010EC540)
    (data9_val=010EC540)
    (data10_val=010EC540)
    (data11_val=010EC540)
target=254, linearSearch=[254, 8157]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
   (data10_def=00000000)
    (data11_def=00000000)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=0104D030)
    (data1_def=0104D030)
    (data2_def=0104D030)
    (data3_def=0104D030)
    (data4_def=0104D030)
    (data5_def=0104D030)
    (data8_def=0104D030)
    (data9_def=0104D030)
   (data10_def=0104D030)
    (data11_def=0104D030)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0104D030)
    (data1=0104D030)
    (data2=0104D030)
    (data3=0104D030)
    (data4=0104D030)
    (data5=0104D030)
    (data8=0104D030)
    (data9=0104D030)
    (data10=0104D030)
    (data11=0104D030)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0104D030)
    (data1_val=0104D030)
    (data2_val=0104D030)
    (data3_val=0104D030)
    (data4_val=0104D030)
    (data5_val=0104D030)
    (data8_val=0104D030)
    (data9_val=0104D030)
    (data10_val=0104D030)
    (data11_val=0104D030)
target=0, binarySearch=[0, 2342]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=0104D210)
    (data1_def=0104D210)
    (data2_def=0104D210)
    (data3_def=0104D210)
    (data4_def=0104D210)
    (data5_def=0104D210)
    (data8_def=0104D210)
    (data9_def=0104D210)
   (data10_def=0104D210)
    (data11_def=0104D210)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0104D210)
    (data1=0104D210)
    (data2=0104D210)
    (data3=0104D210)
    (data4=0104D210)
    (data5=0104D210)
    (data8=0104D210)
    (data9=0104D210)
    (data10=0104D210)
    (data11=0104D210)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0104D210)
    (data1_val=0104D210)
    (data2_val=0104D210)
    (data3_val=0104D210)
    (data4_val=0104D210)
    (data5_val=0104D210)
    (data8_val=0104D210)
    (data9_val=0104D210)
    (data10_val=0104D210)
    (data11_val=0104D210)
target=2, binarySearch=[2, 6831]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=0104D5D0)
    (data1_def=0104D5D0)
    (data2_def=0104D5D0)
    (data3_def=0104D5D0)
    (data4_def=0104D5D0)
    (data5_def=0104D5D0)
    (data8_def=0104D5D0)
    (data9_def=0104D5D0)
   (data10_def=0104D5D0)
    (data11_def=0104D5D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0104D5D0)
    (data1=0104D5D0)
    (data2=0104D5D0)
    (data3=0104D5D0)
    (data4=0104D5D0)
    (data5=0104D5D0)
    (data8=0104D5D0)
    (data9=0104D5D0)
    (data10=0104D5D0)
    (data11=0104D5D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0104D5D0)
    (data1_val=0104D5D0)
    (data2_val=0104D5D0)
    (data3_val=0104D5D0)
    (data4_val=0104D5D0)
    (data5_val=0104D5D0)
    (data8_val=0104D5D0)
    (data9_val=0104D5D0)
    (data10_val=0104D5D0)
    (data11_val=0104D5D0)
target=6, binarySearch=[6, 1018]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=0104DD50)
    (data1_def=0104DD50)
    (data2_def=0104DD50)
    (data3_def=0104DD50)
    (data4_def=0104DD50)
    (data5_def=0104DD50)
    (data8_def=0104DD50)
    (data9_def=0104DD50)
   (data10_def=0104DD50)
    (data11_def=0104DD50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0104DD50)
    (data1=0104DD50)
    (data2=0104DD50)
    (data3=0104DD50)
    (data4=0104DD50)
    (data5=0104DD50)
    (data8=0104DD50)
    (data9=0104DD50)
    (data10=0104DD50)
    (data11=0104DD50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0104DD50)
    (data1_val=0104DD50)
    (data2_val=0104DD50)
    (data3_val=0104DD50)
    (data4_val=0104DD50)
    (data5_val=0104DD50)
    (data8_val=0104DD50)
    (data9_val=0104DD50)
    (data10_val=0104DD50)
    (data11_val=0104DD50)
target=14, binarySearch=[14, 4706]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=0104EC50)
    (data1_def=0104EC50)
    (data2_def=0104EC50)
    (data3_def=0104EC50)
    (data4_def=0104EC50)
    (data5_def=0104EC50)
    (data8_def=0104EC50)
    (data9_def=0104EC50)
   (data10_def=0104EC50)
    (data11_def=0104EC50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0104EC50)
    (data1=0104EC50)
    (data2=0104EC50)
    (data3=0104EC50)
    (data4=0104EC50)
    (data5=0104EC50)
    (data8=0104EC50)
    (data9=0104EC50)
    (data10=0104EC50)
    (data11=0104EC50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0104EC50)
    (data1_val=0104EC50)
    (data2_val=0104EC50)
    (data3_val=0104EC50)
    (data4_val=0104EC50)
    (data5_val=0104EC50)
    (data8_val=0104EC50)
    (data9_val=0104EC50)
    (data10_val=0104EC50)
    (data11_val=0104EC50)
target=30, binarySearch=[30, 5065]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=01050A50)
    (data1_def=01050A50)
    (data2_def=01050A50)
    (data3_def=01050A50)
    (data4_def=01050A50)
    (data5_def=01050A50)
    (data8_def=01050A50)
    (data9_def=01050A50)
   (data10_def=01050A50)
    (data11_def=01050A50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=01050A50)
    (data1=01050A50)
    (data2=01050A50)
    (data3=01050A50)
    (data4=01050A50)
    (data5=01050A50)
    (data8=01050A50)
    (data9=01050A50)
    (data10=01050A50)
    (data11=01050A50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=01050A50)
    (data1_val=01050A50)
    (data2_val=01050A50)
    (data3_val=01050A50)
    (data4_val=01050A50)
    (data5_val=01050A50)
    (data8_val=01050A50)
    (data9_val=01050A50)
    (data10_val=01050A50)
    (data11_val=01050A50)
target=62, binarySearch=[62, 9221]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=01054650)
    (data1_def=01054650)
    (data2_def=01054650)
    (data3_def=01054650)
    (data4_def=01054650)
    (data5_def=01054650)
    (data8_def=01054650)
    (data9_def=01054650)
   (data10_def=01054650)
    (data11_def=01054650)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=01054650)
    (data1=01054650)
    (data2=01054650)
    (data3=01054650)
    (data4=01054650)
    (data5=01054650)
    (data8=01054650)
    (data9=01054650)
    (data10=01054650)
    (data11=01054650)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=01054650)
    (data1_val=01054650)
    (data2_val=01054650)
    (data3_val=01054650)
    (data4_val=01054650)
    (data5_val=01054650)
    (data8_val=01054650)
    (data9_val=01054650)
    (data10_val=01054650)
    (data11_val=01054650)
target=126, binarySearch=[126, 1289]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=0105BE50)
    (data1_def=0105BE50)
    (data2_def=0105BE50)
    (data3_def=0105BE50)
    (data4_def=0105BE50)
    (data5_def=0105BE50)
    (data8_def=0105BE50)
    (data9_def=0105BE50)
   (data10_def=0105BE50)
    (data11_def=0105BE50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0105BE50)
    (data1=0105BE50)
    (data2=0105BE50)
    (data3=0105BE50)
    (data4=0105BE50)
    (data5=0105BE50)
    (data8=0105BE50)
    (data9=0105BE50)
    (data10=0105BE50)
    (data11=0105BE50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0105BE50)
    (data1_val=0105BE50)
    (data2_val=0105BE50)
    (data3_val=0105BE50)
    (data4_val=0105BE50)
    (data5_val=0105BE50)
    (data8_val=0105BE50)
    (data9_val=0105BE50)
    (data10_val=0105BE50)
    (data11_val=0105BE50)
target=254, binarySearch=[254, 8763]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=6.371074500 sec.
