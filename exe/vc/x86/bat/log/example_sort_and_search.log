============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=4951 / record(s)=10000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=5002 / record(s)=10000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=4984 / record(s)=10000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=10000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=3333 / record(s)=10000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=10000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=4976 / record(s)=10000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003002100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.003000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.003000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.015002400 sec.
* Average time     = 0.002143200 sec.
* Min time         = 0.000999700 sec.
* Max time         = 0.003002100 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001998800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.006998800 sec.
* Average time     = 0.000999829 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001998800 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000999100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.005999400 sec.
* Average time     = 0.000857057 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002000000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.002000300 sec.
* Average time     = 0.000285757 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000600 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.003000600 sec.
* Average time     = 0.000428657 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000300 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002000300 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000999400 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.009000300 sec.
* Average time     = 0.001285757 sec.
* Min time         = 0.000999400 sec.
* Max time         = 0.002000300 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.245015200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.297017700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.286017000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.351022300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.085006300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.309015700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 1.573094200 sec.
* Average time     = 0.224727743 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.351022300 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.219013500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.219012400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.231014500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.330019300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.310017800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 1.309077500 sec.
* Average time     = 0.187011071 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.330019300 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.164010400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.166010300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.166009800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.214012600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.085005100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.200011700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.995059900 sec.
* Average time     = 0.142151414 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.214012600 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.004999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1922616 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.005998800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1902755 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.008000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1895908 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.002000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=494802 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.006000700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1474414 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.002000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=514605 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.007000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1903279 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.036000400 sec.
* Average time     = 0.005142914 sec.
* Min time         = 0.002000000 sec.
* Max time         = 0.008000900 sec.
* Total Swapped    =  10108379 count(s)
* Average  Swapped =   1444054 count(s)
* Min Swapped      =    494802 count(s)
* Max Swapped      =   1922616 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57500 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57587 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57584 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=18345 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=7303 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=58823 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.008000000 sec.
* Average time     = 0.001142857 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002000300 sec.
* Total Swapped    =    257142 count(s)
* Average  Swapped =     36734 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     58823 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.166012500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.157007100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.144008200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.349034000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.257019000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 1.073080800 sec.
* Average time     = 0.153297257 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.349034000 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000998900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33719 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33677 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000996800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33444 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=36402 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.003996900 sec.
* Average time     = 0.000570986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000600 sec.
* Total Swapped    =    152242 count(s)
* Average  Swapped =     21748 count(s)
* Min Swapped      =      3333 count(s)
* Max Swapped      =     36402 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.128990000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.128005500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9995 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.130008200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.128007300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.129007900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.129007900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.128007000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9989 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.901033800 sec.
* Average time     = 0.128719114 sec.
* Min time         = 0.128005500 sec.
* Max time         = 0.130008200 sec.
* Total Swapped    =     48300 count(s)
* Average  Swapped =      6900 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129635 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129583 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129778 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=218680 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=116627 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=213143 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=123006 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.009001200 sec.
* Average time     = 0.001285886 sec.
* Min time         = 0.001000000 sec.
* Max time         = 0.002000300 sec.
* Total Swapped    =   1060452 count(s)
* Average  Swapped =    151493 count(s)
* Min Swapped      =    116627 count(s)
* Max Swapped      =    218680 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.132008800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9985 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.154010000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9987 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.139006500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9983 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.267017500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.226013600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9994 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.918056400 sec.
* Average time     = 0.131150914 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.267017500 sec.
* Total Swapped    =     59947 count(s)
* Average  Swapped =      8563 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000998200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48473 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48925 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48799 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000999500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=37222 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=5156 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000999500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49469 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.004997700 sec.
* Average time     = 0.000713957 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000500 sec.
* Total Swapped    =    238044 count(s)
* Average  Swapped =     34006 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     49469 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.077005000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58291 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.077006200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58193 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.073004100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58188 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.200009600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=60442 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.176010400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58404 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.604036200 sec.
* Average time     = 0.086290886 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.200009600 sec.
* Total Swapped    =    303524 count(s)
* Average  Swapped =     43360 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     60442 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31152 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31250 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31256 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=6022 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1024 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33844 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.003999700 sec.
* Average time     = 0.000571386 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000300 sec.
* Total Swapped    =    134548 count(s)
* Average  Swapped =     19221 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     33844 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9996 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9998 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.001001200 sec.
* Average time     = 0.000143029 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =     49997 count(s)
* Average  Swapped =      7142 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     10000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 10000 Count(s)
Total Array size   = 800000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.015002400/  0.002143200/  0.000999700/  0.003002100
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.006998800/  0.000999829/  0.000000000/  0.001998800
- std::sort(inline-func):   0.005999400/  0.000857057/  0.000000000/  0.002000000
- std::sort(functor):       0.002000300/  0.000285757/  0.000000000/  0.001000600
- std::sort(lambda):        0.003000600/  0.000428657/  0.000000000/  0.001000300
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.009000300/  0.001285757/  0.000999400/  0.002000300
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           1.573094200/  0.224727743/  0.000000000/  0.351022300  162016591/   23145227/          0/   49985001
- Shaker sort<S>:           1.309077500/  0.187011071/  0.000000000/  0.330019300  162016591/   23145227/          0/   49985001
- Odd-Even sort<S>:         0.995059900/  0.142151414/  0.000000000/  0.214012600  162016591/   23145227/          0/   49985001
- Shear sort:               0.036000400/  0.005142914/  0.002000000/  0.008000900   10108379/    1444054/     494802/    1922616
- Comb sort:                0.008000000/  0.001142857/  0.000000000/  0.002000300     257142/      36734/          0/      58823
- Gnome sort<S>:            1.073080800/  0.153297257/  0.000000000/  0.349034000  162016591/   23145227/          0/   49985001
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.003996900/  0.000570986/  0.000000000/  0.001000600     152242/      21748/       3333/      36402
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.901033800/  0.128719114/  0.128005500/  0.130008200      48300/       6900/          0/       9995
- Heap sort:                0.009001200/  0.001285886/  0.001000000/  0.002000300    1060452/     151493/     116627/     218680
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.918056400/  0.131150914/  0.000000000/  0.267017500      59947/       8563/          0/       9999
- Shell sort:               0.004997700/  0.000713957/  0.000000000/  0.001000500     238044/      34006/          0/      49469
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.604036200/  0.086290886/  0.000000000/  0.200009600     303524/      43360/          0/      60442
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.003999700/  0.000571386/  0.000000000/  0.001000300     134548/      19221/          0/      33844
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.001001200/  0.000143029/  0.000000000/  0.001001200      49997/       7142/          0/      10000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=31152)
(result1=31152)
(result3=31152)
(result4=31152)
(result5=31152)
(result6=31152)
(result8=31152)
(result9=31152)
(result10=31152)
(result11=31095)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
    (data10_def=00000000)
    (data11_def=00000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=027B4C10)
    (data1_def=027B4C10)
    (data2_def=027B4C10)
    (data3_def=027B4C10)
    (data4_def=027B4C10)
    (data5_def=027B4C10)
    (data8_def=027B4C10)
    (data9_def=027B4C10)
    (data10_def=027B4C10)
    (data11_def=027B4C10)
  linearSearch(*array_shuffle1, search_predicate);
    (data=027B4C10)
    (data1=027B4C10)
    (data2=027B4C10)
    (data3=027B4C10)
    (data4=027B4C10)
    (data5=027B4C10)
    (data8=027B4C10)
    (data9=027B4C10)
    (data10=027B4C10)
    (data11=027B4C10)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=027B4C10)
    (data1_val=027B4C10)
    (data2_val=027B4C10)
    (data3_val=027B4C10)
    (data4_val=027B4C10)
    (data5_val=027B4C10)
    (data8_val=027B4C10)
    (data9_val=027B4C10)
    (data10_val=027B4C10)
    (data11_val=027B4C10)
target=0, linearSearch=[0, 2342]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=027923E0)
    (data1_def=027923E0)
    (data2_def=027923E0)
    (data3_def=027923E0)
    (data4_def=027923E0)
    (data5_def=027923E0)
    (data8_def=027923E0)
    (data9_def=027923E0)
    (data10_def=027923E0)
    (data11_def=027923E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=027923E0)
    (data1=027923E0)
    (data2=027923E0)
    (data3=027923E0)
    (data4=027923E0)
    (data5=027923E0)
    (data8=027923E0)
    (data9=027923E0)
    (data10=027923E0)
    (data11=027923E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=027923E0)
    (data1_val=027923E0)
    (data2_val=027923E0)
    (data3_val=027923E0)
    (data4_val=027923E0)
    (data5_val=027923E0)
    (data8_val=027923E0)
    (data9_val=027923E0)
    (data10_val=027923E0)
    (data11_val=027923E0)
target=2, linearSearch=[2, 575]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=0279AE50)
    (data1_def=0279AE50)
    (data2_def=0279AE50)
    (data3_def=0279AE50)
    (data4_def=0279AE50)
    (data5_def=0279AE50)
    (data8_def=0279AE50)
    (data9_def=0279AE50)
    (data10_def=0279AE50)
    (data11_def=0279AE50)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0279AE50)
    (data1=0279AE50)
    (data2=0279AE50)
    (data3=0279AE50)
    (data4=0279AE50)
    (data5=0279AE50)
    (data8=0279AE50)
    (data9=0279AE50)
    (data10=0279AE50)
    (data11=0279AE50)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0279AE50)
    (data1_val=0279AE50)
    (data2_val=0279AE50)
    (data3_val=0279AE50)
    (data4_val=0279AE50)
    (data5_val=0279AE50)
    (data8_val=0279AE50)
    (data9_val=0279AE50)
    (data10_val=0279AE50)
    (data11_val=0279AE50)
target=6, linearSearch=[6, 1018]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=027B21E0)
    (data1_def=027B21E0)
    (data2_def=027B21E0)
    (data3_def=027B21E0)
    (data4_def=027B21E0)
    (data5_def=027B21E0)
    (data8_def=027B21E0)
    (data9_def=027B21E0)
    (data10_def=027B21E0)
    (data11_def=027B21E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=027B21E0)
    (data1=027B21E0)
    (data2=027B21E0)
    (data3=027B21E0)
    (data4=027B21E0)
    (data5=027B21E0)
    (data8=027B21E0)
    (data9=027B21E0)
    (data10=027B21E0)
    (data11=027B21E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=027B21E0)
    (data1_val=027B21E0)
    (data2_val=027B21E0)
    (data3_val=027B21E0)
    (data4_val=027B21E0)
    (data5_val=027B21E0)
    (data8_val=027B21E0)
    (data9_val=027B21E0)
    (data10_val=027B21E0)
    (data11_val=027B21E0)
target=14, linearSearch=[14, 2207]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=027A5620)
    (data1_def=027A5620)
    (data2_def=027A5620)
    (data3_def=027A5620)
    (data4_def=027A5620)
    (data5_def=027A5620)
    (data8_def=027A5620)
    (data9_def=027A5620)
    (data10_def=027A5620)
    (data11_def=027A5620)
  linearSearch(*array_shuffle1, search_predicate);
    (data=027A5620)
    (data1=027A5620)
    (data2=027A5620)
    (data3=027A5620)
    (data4=027A5620)
    (data5=027A5620)
    (data8=027A5620)
    (data9=027A5620)
    (data10=027A5620)
    (data11=027A5620)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=027A5620)
    (data1_val=027A5620)
    (data2_val=027A5620)
    (data3_val=027A5620)
    (data4_val=027A5620)
    (data5_val=027A5620)
    (data8_val=027A5620)
    (data9_val=027A5620)
    (data10_val=027A5620)
    (data11_val=027A5620)
target=30, linearSearch=[30, 1555]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=0279A2C0)
    (data1_def=0279A2C0)
    (data2_def=0279A2C0)
    (data3_def=0279A2C0)
    (data4_def=0279A2C0)
    (data5_def=0279A2C0)
    (data8_def=0279A2C0)
    (data9_def=0279A2C0)
    (data10_def=0279A2C0)
    (data11_def=0279A2C0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0279A2C0)
    (data1=0279A2C0)
    (data2=0279A2C0)
    (data3=0279A2C0)
    (data4=0279A2C0)
    (data5=0279A2C0)
    (data8=0279A2C0)
    (data9=0279A2C0)
    (data10=0279A2C0)
    (data11=0279A2C0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0279A2C0)
    (data1_val=0279A2C0)
    (data2_val=0279A2C0)
    (data3_val=0279A2C0)
    (data4_val=0279A2C0)
    (data5_val=0279A2C0)
    (data8_val=0279A2C0)
    (data9_val=0279A2C0)
    (data10_val=0279A2C0)
    (data11_val=0279A2C0)
target=62, linearSearch=[62, 981]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=027A0300)
    (data1_def=027A0300)
    (data2_def=027A0300)
    (data3_def=027A0300)
    (data4_def=027A0300)
    (data5_def=027A0300)
    (data8_def=027A0300)
    (data9_def=027A0300)
    (data10_def=027A0300)
    (data11_def=027A0300)
  linearSearch(*array_shuffle1, search_predicate);
    (data=027A0300)
    (data1=027A0300)
    (data2=027A0300)
    (data3=027A0300)
    (data4=027A0300)
    (data5=027A0300)
    (data8=027A0300)
    (data9=027A0300)
    (data10=027A0300)
    (data11=027A0300)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=027A0300)
    (data1_val=027A0300)
    (data2_val=027A0300)
    (data3_val=027A0300)
    (data4_val=027A0300)
    (data5_val=027A0300)
    (data8_val=027A0300)
    (data9_val=027A0300)
    (data10_val=027A0300)
    (data11_val=027A0300)
target=126, linearSearch=[126, 1289]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=02826540)
    (data1_def=02826540)
    (data2_def=02826540)
    (data3_def=02826540)
    (data4_def=02826540)
    (data5_def=02826540)
    (data8_def=02826540)
    (data9_def=02826540)
    (data10_def=02826540)
    (data11_def=02826540)
  linearSearch(*array_shuffle1, search_predicate);
    (data=02826540)
    (data1=02826540)
    (data2=02826540)
    (data3=02826540)
    (data4=02826540)
    (data5=02826540)
    (data8=02826540)
    (data9=02826540)
    (data10=02826540)
    (data11=02826540)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=02826540)
    (data1_val=02826540)
    (data2_val=02826540)
    (data3_val=02826540)
    (data4_val=02826540)
    (data5_val=02826540)
    (data8_val=02826540)
    (data9_val=02826540)
    (data10_val=02826540)
    (data11_val=02826540)
target=254, linearSearch=[254, 8157]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
   (data10_def=00000000)
    (data11_def=00000000)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=02787030)
    (data1_def=02787030)
    (data2_def=02787030)
    (data3_def=02787030)
    (data4_def=02787030)
    (data5_def=02787030)
    (data8_def=02787030)
    (data9_def=02787030)
   (data10_def=02787030)
    (data11_def=02787030)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=02787030)
    (data1=02787030)
    (data2=02787030)
    (data3=02787030)
    (data4=02787030)
    (data5=02787030)
    (data8=02787030)
    (data9=02787030)
    (data10=02787030)
    (data11=02787030)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=02787030)
    (data1_val=02787030)
    (data2_val=02787030)
    (data3_val=02787030)
    (data4_val=02787030)
    (data5_val=02787030)
    (data8_val=02787030)
    (data9_val=02787030)
    (data10_val=02787030)
    (data11_val=02787030)
target=0, binarySearch=[0, 2342]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=02787210)
    (data1_def=02787210)
    (data2_def=02787210)
    (data3_def=02787210)
    (data4_def=02787210)
    (data5_def=02787210)
    (data8_def=02787210)
    (data9_def=02787210)
   (data10_def=02787210)
    (data11_def=02787210)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=02787210)
    (data1=02787210)
    (data2=02787210)
    (data3=02787210)
    (data4=02787210)
    (data5=02787210)
    (data8=02787210)
    (data9=02787210)
    (data10=02787210)
    (data11=02787210)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=02787210)
    (data1_val=02787210)
    (data2_val=02787210)
    (data3_val=02787210)
    (data4_val=02787210)
    (data5_val=02787210)
    (data8_val=02787210)
    (data9_val=02787210)
    (data10_val=02787210)
    (data11_val=02787210)
target=2, binarySearch=[2, 6831]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=027875D0)
    (data1_def=027875D0)
    (data2_def=027875D0)
    (data3_def=027875D0)
    (data4_def=027875D0)
    (data5_def=027875D0)
    (data8_def=027875D0)
    (data9_def=027875D0)
   (data10_def=027875D0)
    (data11_def=027875D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=027875D0)
    (data1=027875D0)
    (data2=027875D0)
    (data3=027875D0)
    (data4=027875D0)
    (data5=027875D0)
    (data8=027875D0)
    (data9=027875D0)
    (data10=027875D0)
    (data11=027875D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=027875D0)
    (data1_val=027875D0)
    (data2_val=027875D0)
    (data3_val=027875D0)
    (data4_val=027875D0)
    (data5_val=027875D0)
    (data8_val=027875D0)
    (data9_val=027875D0)
    (data10_val=027875D0)
    (data11_val=027875D0)
target=6, binarySearch=[6, 1018]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=02787D50)
    (data1_def=02787D50)
    (data2_def=02787D50)
    (data3_def=02787D50)
    (data4_def=02787D50)
    (data5_def=02787D50)
    (data8_def=02787D50)
    (data9_def=02787D50)
   (data10_def=02787D50)
    (data11_def=02787D50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=02787D50)
    (data1=02787D50)
    (data2=02787D50)
    (data3=02787D50)
    (data4=02787D50)
    (data5=02787D50)
    (data8=02787D50)
    (data9=02787D50)
    (data10=02787D50)
    (data11=02787D50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=02787D50)
    (data1_val=02787D50)
    (data2_val=02787D50)
    (data3_val=02787D50)
    (data4_val=02787D50)
    (data5_val=02787D50)
    (data8_val=02787D50)
    (data9_val=02787D50)
    (data10_val=02787D50)
    (data11_val=02787D50)
target=14, binarySearch=[14, 4706]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=02788C50)
    (data1_def=02788C50)
    (data2_def=02788C50)
    (data3_def=02788C50)
    (data4_def=02788C50)
    (data5_def=02788C50)
    (data8_def=02788C50)
    (data9_def=02788C50)
   (data10_def=02788C50)
    (data11_def=02788C50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=02788C50)
    (data1=02788C50)
    (data2=02788C50)
    (data3=02788C50)
    (data4=02788C50)
    (data5=02788C50)
    (data8=02788C50)
    (data9=02788C50)
    (data10=02788C50)
    (data11=02788C50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=02788C50)
    (data1_val=02788C50)
    (data2_val=02788C50)
    (data3_val=02788C50)
    (data4_val=02788C50)
    (data5_val=02788C50)
    (data8_val=02788C50)
    (data9_val=02788C50)
    (data10_val=02788C50)
    (data11_val=02788C50)
target=30, binarySearch=[30, 5065]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=0278AA50)
    (data1_def=0278AA50)
    (data2_def=0278AA50)
    (data3_def=0278AA50)
    (data4_def=0278AA50)
    (data5_def=0278AA50)
    (data8_def=0278AA50)
    (data9_def=0278AA50)
   (data10_def=0278AA50)
    (data11_def=0278AA50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0278AA50)
    (data1=0278AA50)
    (data2=0278AA50)
    (data3=0278AA50)
    (data4=0278AA50)
    (data5=0278AA50)
    (data8=0278AA50)
    (data9=0278AA50)
    (data10=0278AA50)
    (data11=0278AA50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0278AA50)
    (data1_val=0278AA50)
    (data2_val=0278AA50)
    (data3_val=0278AA50)
    (data4_val=0278AA50)
    (data5_val=0278AA50)
    (data8_val=0278AA50)
    (data9_val=0278AA50)
    (data10_val=0278AA50)
    (data11_val=0278AA50)
target=62, binarySearch=[62, 9221]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=0278E650)
    (data1_def=0278E650)
    (data2_def=0278E650)
    (data3_def=0278E650)
    (data4_def=0278E650)
    (data5_def=0278E650)
    (data8_def=0278E650)
    (data9_def=0278E650)
   (data10_def=0278E650)
    (data11_def=0278E650)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0278E650)
    (data1=0278E650)
    (data2=0278E650)
    (data3=0278E650)
    (data4=0278E650)
    (data5=0278E650)
    (data8=0278E650)
    (data9=0278E650)
    (data10=0278E650)
    (data11=0278E650)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0278E650)
    (data1_val=0278E650)
    (data2_val=0278E650)
    (data3_val=0278E650)
    (data4_val=0278E650)
    (data5_val=0278E650)
    (data8_val=0278E650)
    (data9_val=0278E650)
    (data10_val=0278E650)
    (data11_val=0278E650)
target=126, binarySearch=[126, 1289]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=02795E50)
    (data1_def=02795E50)
    (data2_def=02795E50)
    (data3_def=02795E50)
    (data4_def=02795E50)
    (data5_def=02795E50)
    (data8_def=02795E50)
    (data9_def=02795E50)
   (data10_def=02795E50)
    (data11_def=02795E50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=02795E50)
    (data1=02795E50)
    (data2=02795E50)
    (data3=02795E50)
    (data4=02795E50)
    (data5=02795E50)
    (data8=02795E50)
    (data9=02795E50)
    (data10=02795E50)
    (data11=02795E50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=02795E50)
    (data1_val=02795E50)
    (data2_val=02795E50)
    (data3_val=02795E50)
    (data4_val=02795E50)
    (data5_val=02795E50)
    (data8_val=02795E50)
    (data9_val=02795E50)
    (data10_val=02795E50)
    (data11_val=02795E50)
target=254, binarySearch=[254, 8763]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=7.560468600 sec.
