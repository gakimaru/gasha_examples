============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=4951 / record(s)=10000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=5002 / record(s)=10000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=4984 / record(s)=10000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=10000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=3333 / record(s)=10000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=10000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=4976 / record(s)=10000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.003002300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003004100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.003002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001002100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.003001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.015013500 sec.
* Average time     = 0.002144786 sec.
* Min time         = 0.001000300 sec.
* Max time         = 0.003004100 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001002300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.006007300 sec.
* Average time     = 0.000858186 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002001800 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.007005500 sec.
* Average time     = 0.001000786 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002000000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.005005000 sec.
* Average time     = 0.000715000 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.004002600 sec.
* Average time     = 0.000571800 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000900 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002007600 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000995400 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.008006700 sec.
* Average time     = 0.001143814 sec.
* Min time         = 0.000995400 sec.
* Max time         = 0.002007600 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.240227900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.252242600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.243229700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.291277500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.068064900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.306292500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 1.402336300 sec.
* Average time     = 0.200333757 sec.
* Min time         = 0.001001200 sec.
* Max time         = 0.306292500 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.218207200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.215205000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.198188400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.265252400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.258240000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 1.155093000 sec.
* Average time     = 0.165013286 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.265252400 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.133125800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.136130000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.132125600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.194184900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.063059600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.164156700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.822782600 sec.
* Average time     = 0.117540371 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.194184900 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.005004900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1892312 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.005004700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1873730 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.005004400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1860168 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=485134 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.003003200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1465201 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=485527 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.005005800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1882044 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.025024500 sec.
* Average time     = 0.003574929 sec.
* Min time         = 0.001000300 sec.
* Max time         = 0.005005800 sec.
* Total Swapped    =   9944116 count(s)
* Average  Swapped =   1420588 count(s)
* Min Swapped      =    485134 count(s)
* Max Swapped      =   1892312 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57500 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57587 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002002000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57584 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=18345 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=7303 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=58823 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.008008300 sec.
* Average time     = 0.001144043 sec.
* Min time         = 0.001000900 sec.
* Max time         = 0.002002000 sec.
* Total Swapped    =    257142 count(s)
* Average  Swapped =     36734 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     58823 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.196187800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.124118800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.129122600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.259249700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.218210300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 0.926889200 sec.
* Average time     = 0.132412743 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.259249700 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33719 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33677 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000999500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33444 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=36402 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.005004800 sec.
* Average time     = 0.000714971 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001002900 sec.
* Total Swapped    =    152242 count(s)
* Average  Swapped =     21748 count(s)
* Min Swapped      =      3333 count(s)
* Max Swapped      =     36402 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.124118200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.127120300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9995 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.126120600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.129124400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.126120600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.128121700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.124117700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9989 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.884843500 sec.
* Average time     = 0.126406214 sec.
* Min time         = 0.124117700 sec.
* Max time         = 0.129124400 sec.
* Total Swapped    =     48300 count(s)
* Average  Swapped =      6900 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129635 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129583 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129778 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=218680 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=116627 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=213143 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=123006 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.010009700 sec.
* Average time     = 0.001429957 sec.
* Min time         = 0.001000900 sec.
* Max time         = 0.002002100 sec.
* Total Swapped    =   1060452 count(s)
* Average  Swapped =    151493 count(s)
* Min Swapped      =    116627 count(s)
* Max Swapped      =    218680 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.118112000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9985 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.118112700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9987 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.116110300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9983 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.263251700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.201190700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9994 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.816777400 sec.
* Average time     = 0.116682486 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.263251700 sec.
* Total Swapped    =     59947 count(s)
* Average  Swapped =      8563 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48473 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48925 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48799 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=37222 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=5156 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49469 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.006005800 sec.
* Average time     = 0.000857971 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002002100 sec.
* Total Swapped    =    238044 count(s)
* Average  Swapped =     34006 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     49469 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.075072500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58291 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.088097300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58193 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.083065500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58188 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.159151100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=60442 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.131125200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58404 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.537512500 sec.
* Average time     = 0.076787500 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.159151100 sec.
* Total Swapped    =    303524 count(s)
* Average  Swapped =     43360 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     60442 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31152 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31250 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31256 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=6022 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1024 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33844 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.005005000 sec.
* Average time     = 0.000715000 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =    134548 count(s)
* Average  Swapped =     19221 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     33844 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9996 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9998 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.003003200 sec.
* Average time     = 0.000429029 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001400 sec.
* Total Swapped    =     49997 count(s)
* Average  Swapped =      7142 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     10000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 10000 Count(s)
Total Array size   = 800000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.015013500/  0.002144786/  0.001000300/  0.003004100
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.006007300/  0.000858186/  0.000000000/  0.002001800
- std::sort(inline-func):   0.007005500/  0.001000786/  0.000000000/  0.002000000
- std::sort(functor):       0.005005000/  0.000715000/  0.000000000/  0.001001200
- std::sort(lambda):        0.004002600/  0.000571800/  0.000000000/  0.001000900
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.008006700/  0.001143814/  0.000995400/  0.002007600
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           1.402336300/  0.200333757/  0.001001200/  0.306292500  162016591/   23145227/          0/   49985001
- Shaker sort<S>:           1.155093000/  0.165013286/  0.000000000/  0.265252400  162016591/   23145227/          0/   49985001
- Odd-Even sort<S>:         0.822782600/  0.117540371/  0.000000000/  0.194184900  162016591/   23145227/          0/   49985001
- Shear sort:               0.025024500/  0.003574929/  0.001000300/  0.005005800    9944116/    1420588/     485134/    1892312
- Comb sort:                0.008008300/  0.001144043/  0.001000900/  0.002002000     257142/      36734/          0/      58823
- Gnome sort<S>:            0.926889200/  0.132412743/  0.000000000/  0.259249700  162016591/   23145227/          0/   49985001
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.005004800/  0.000714971/  0.000000000/  0.001002900     152242/      21748/       3333/      36402
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.884843500/  0.126406214/  0.124117700/  0.129124400      48300/       6900/          0/       9995
- Heap sort:                0.010009700/  0.001429957/  0.001000900/  0.002002100    1060452/     151493/     116627/     218680
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.816777400/  0.116682486/  0.000000000/  0.263251700      59947/       8563/          0/       9999
- Shell sort:               0.006005800/  0.000857971/  0.000000000/  0.002002100     238044/      34006/          0/      49469
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.537512500/  0.076787500/  0.000000000/  0.159151100     303524/      43360/          0/      60442
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.005005000/  0.000715000/  0.000000000/  0.001001200     134548/      19221/          0/      33844
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.003003200/  0.000429029/  0.000000000/  0.001001400      49997/       7142/          0/      10000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=31152)
(result1=31152)
(result3=31152)
(result4=31152)
(result5=31152)
(result6=31152)
(result8=31152)
(result9=31152)
(result10=31152)
(result11=31095)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
    (data10_def=00000000)
    (data11_def=00000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=005AEC10)
    (data1_def=005AEC10)
    (data2_def=005AEC10)
    (data3_def=005AEC10)
    (data4_def=005AEC10)
    (data5_def=005AEC10)
    (data8_def=005AEC10)
    (data9_def=005AEC10)
    (data10_def=005AEC10)
    (data11_def=005AEC10)
  linearSearch(*array_shuffle1, search_predicate);
    (data=005AEC10)
    (data1=005AEC10)
    (data2=005AEC10)
    (data3=005AEC10)
    (data4=005AEC10)
    (data5=005AEC10)
    (data8=005AEC10)
    (data9=005AEC10)
    (data10=005AEC10)
    (data11=005AEC10)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=005AEC10)
    (data1_val=005AEC10)
    (data2_val=005AEC10)
    (data3_val=005AEC10)
    (data4_val=005AEC10)
    (data5_val=005AEC10)
    (data8_val=005AEC10)
    (data9_val=005AEC10)
    (data10_val=005AEC10)
    (data11_val=005AEC10)
target=0, linearSearch=[0, 2342]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=0058C3E0)
    (data1_def=0058C3E0)
    (data2_def=0058C3E0)
    (data3_def=0058C3E0)
    (data4_def=0058C3E0)
    (data5_def=0058C3E0)
    (data8_def=0058C3E0)
    (data9_def=0058C3E0)
    (data10_def=0058C3E0)
    (data11_def=0058C3E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0058C3E0)
    (data1=0058C3E0)
    (data2=0058C3E0)
    (data3=0058C3E0)
    (data4=0058C3E0)
    (data5=0058C3E0)
    (data8=0058C3E0)
    (data9=0058C3E0)
    (data10=0058C3E0)
    (data11=0058C3E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0058C3E0)
    (data1_val=0058C3E0)
    (data2_val=0058C3E0)
    (data3_val=0058C3E0)
    (data4_val=0058C3E0)
    (data5_val=0058C3E0)
    (data8_val=0058C3E0)
    (data9_val=0058C3E0)
    (data10_val=0058C3E0)
    (data11_val=0058C3E0)
target=2, linearSearch=[2, 575]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=00594E50)
    (data1_def=00594E50)
    (data2_def=00594E50)
    (data3_def=00594E50)
    (data4_def=00594E50)
    (data5_def=00594E50)
    (data8_def=00594E50)
    (data9_def=00594E50)
    (data10_def=00594E50)
    (data11_def=00594E50)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00594E50)
    (data1=00594E50)
    (data2=00594E50)
    (data3=00594E50)
    (data4=00594E50)
    (data5=00594E50)
    (data8=00594E50)
    (data9=00594E50)
    (data10=00594E50)
    (data11=00594E50)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00594E50)
    (data1_val=00594E50)
    (data2_val=00594E50)
    (data3_val=00594E50)
    (data4_val=00594E50)
    (data5_val=00594E50)
    (data8_val=00594E50)
    (data9_val=00594E50)
    (data10_val=00594E50)
    (data11_val=00594E50)
target=6, linearSearch=[6, 1018]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=005AC1E0)
    (data1_def=005AC1E0)
    (data2_def=005AC1E0)
    (data3_def=005AC1E0)
    (data4_def=005AC1E0)
    (data5_def=005AC1E0)
    (data8_def=005AC1E0)
    (data9_def=005AC1E0)
    (data10_def=005AC1E0)
    (data11_def=005AC1E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=005AC1E0)
    (data1=005AC1E0)
    (data2=005AC1E0)
    (data3=005AC1E0)
    (data4=005AC1E0)
    (data5=005AC1E0)
    (data8=005AC1E0)
    (data9=005AC1E0)
    (data10=005AC1E0)
    (data11=005AC1E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=005AC1E0)
    (data1_val=005AC1E0)
    (data2_val=005AC1E0)
    (data3_val=005AC1E0)
    (data4_val=005AC1E0)
    (data5_val=005AC1E0)
    (data8_val=005AC1E0)
    (data9_val=005AC1E0)
    (data10_val=005AC1E0)
    (data11_val=005AC1E0)
target=14, linearSearch=[14, 2207]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=0059F620)
    (data1_def=0059F620)
    (data2_def=0059F620)
    (data3_def=0059F620)
    (data4_def=0059F620)
    (data5_def=0059F620)
    (data8_def=0059F620)
    (data9_def=0059F620)
    (data10_def=0059F620)
    (data11_def=0059F620)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0059F620)
    (data1=0059F620)
    (data2=0059F620)
    (data3=0059F620)
    (data4=0059F620)
    (data5=0059F620)
    (data8=0059F620)
    (data9=0059F620)
    (data10=0059F620)
    (data11=0059F620)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0059F620)
    (data1_val=0059F620)
    (data2_val=0059F620)
    (data3_val=0059F620)
    (data4_val=0059F620)
    (data5_val=0059F620)
    (data8_val=0059F620)
    (data9_val=0059F620)
    (data10_val=0059F620)
    (data11_val=0059F620)
target=30, linearSearch=[30, 1555]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=005942C0)
    (data1_def=005942C0)
    (data2_def=005942C0)
    (data3_def=005942C0)
    (data4_def=005942C0)
    (data5_def=005942C0)
    (data8_def=005942C0)
    (data9_def=005942C0)
    (data10_def=005942C0)
    (data11_def=005942C0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=005942C0)
    (data1=005942C0)
    (data2=005942C0)
    (data3=005942C0)
    (data4=005942C0)
    (data5=005942C0)
    (data8=005942C0)
    (data9=005942C0)
    (data10=005942C0)
    (data11=005942C0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=005942C0)
    (data1_val=005942C0)
    (data2_val=005942C0)
    (data3_val=005942C0)
    (data4_val=005942C0)
    (data5_val=005942C0)
    (data8_val=005942C0)
    (data9_val=005942C0)
    (data10_val=005942C0)
    (data11_val=005942C0)
target=62, linearSearch=[62, 981]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=0059A300)
    (data1_def=0059A300)
    (data2_def=0059A300)
    (data3_def=0059A300)
    (data4_def=0059A300)
    (data5_def=0059A300)
    (data8_def=0059A300)
    (data9_def=0059A300)
    (data10_def=0059A300)
    (data11_def=0059A300)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0059A300)
    (data1=0059A300)
    (data2=0059A300)
    (data3=0059A300)
    (data4=0059A300)
    (data5=0059A300)
    (data8=0059A300)
    (data9=0059A300)
    (data10=0059A300)
    (data11=0059A300)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0059A300)
    (data1_val=0059A300)
    (data2_val=0059A300)
    (data3_val=0059A300)
    (data4_val=0059A300)
    (data5_val=0059A300)
    (data8_val=0059A300)
    (data9_val=0059A300)
    (data10_val=0059A300)
    (data11_val=0059A300)
target=126, linearSearch=[126, 1289]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=00620540)
    (data1_def=00620540)
    (data2_def=00620540)
    (data3_def=00620540)
    (data4_def=00620540)
    (data5_def=00620540)
    (data8_def=00620540)
    (data9_def=00620540)
    (data10_def=00620540)
    (data11_def=00620540)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00620540)
    (data1=00620540)
    (data2=00620540)
    (data3=00620540)
    (data4=00620540)
    (data5=00620540)
    (data8=00620540)
    (data9=00620540)
    (data10=00620540)
    (data11=00620540)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00620540)
    (data1_val=00620540)
    (data2_val=00620540)
    (data3_val=00620540)
    (data4_val=00620540)
    (data5_val=00620540)
    (data8_val=00620540)
    (data9_val=00620540)
    (data10_val=00620540)
    (data11_val=00620540)
target=254, linearSearch=[254, 8157]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
   (data10_def=00000000)
    (data11_def=00000000)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=00581030)
    (data1_def=00581030)
    (data2_def=00581030)
    (data3_def=00581030)
    (data4_def=00581030)
    (data5_def=00581030)
    (data8_def=00581030)
    (data9_def=00581030)
   (data10_def=00581030)
    (data11_def=00581030)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00581030)
    (data1=00581030)
    (data2=00581030)
    (data3=00581030)
    (data4=00581030)
    (data5=00581030)
    (data8=00581030)
    (data9=00581030)
    (data10=00581030)
    (data11=00581030)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00581030)
    (data1_val=00581030)
    (data2_val=00581030)
    (data3_val=00581030)
    (data4_val=00581030)
    (data5_val=00581030)
    (data8_val=00581030)
    (data9_val=00581030)
    (data10_val=00581030)
    (data11_val=00581030)
target=0, binarySearch=[0, 2342]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=00581210)
    (data1_def=00581210)
    (data2_def=00581210)
    (data3_def=00581210)
    (data4_def=00581210)
    (data5_def=00581210)
    (data8_def=00581210)
    (data9_def=00581210)
   (data10_def=00581210)
    (data11_def=00581210)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00581210)
    (data1=00581210)
    (data2=00581210)
    (data3=00581210)
    (data4=00581210)
    (data5=00581210)
    (data8=00581210)
    (data9=00581210)
    (data10=00581210)
    (data11=00581210)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00581210)
    (data1_val=00581210)
    (data2_val=00581210)
    (data3_val=00581210)
    (data4_val=00581210)
    (data5_val=00581210)
    (data8_val=00581210)
    (data9_val=00581210)
    (data10_val=00581210)
    (data11_val=00581210)
target=2, binarySearch=[2, 6831]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=005815D0)
    (data1_def=005815D0)
    (data2_def=005815D0)
    (data3_def=005815D0)
    (data4_def=005815D0)
    (data5_def=005815D0)
    (data8_def=005815D0)
    (data9_def=005815D0)
   (data10_def=005815D0)
    (data11_def=005815D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=005815D0)
    (data1=005815D0)
    (data2=005815D0)
    (data3=005815D0)
    (data4=005815D0)
    (data5=005815D0)
    (data8=005815D0)
    (data9=005815D0)
    (data10=005815D0)
    (data11=005815D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=005815D0)
    (data1_val=005815D0)
    (data2_val=005815D0)
    (data3_val=005815D0)
    (data4_val=005815D0)
    (data5_val=005815D0)
    (data8_val=005815D0)
    (data9_val=005815D0)
    (data10_val=005815D0)
    (data11_val=005815D0)
target=6, binarySearch=[6, 1018]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=00581D50)
    (data1_def=00581D50)
    (data2_def=00581D50)
    (data3_def=00581D50)
    (data4_def=00581D50)
    (data5_def=00581D50)
    (data8_def=00581D50)
    (data9_def=00581D50)
   (data10_def=00581D50)
    (data11_def=00581D50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00581D50)
    (data1=00581D50)
    (data2=00581D50)
    (data3=00581D50)
    (data4=00581D50)
    (data5=00581D50)
    (data8=00581D50)
    (data9=00581D50)
    (data10=00581D50)
    (data11=00581D50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00581D50)
    (data1_val=00581D50)
    (data2_val=00581D50)
    (data3_val=00581D50)
    (data4_val=00581D50)
    (data5_val=00581D50)
    (data8_val=00581D50)
    (data9_val=00581D50)
    (data10_val=00581D50)
    (data11_val=00581D50)
target=14, binarySearch=[14, 4706]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=00582C50)
    (data1_def=00582C50)
    (data2_def=00582C50)
    (data3_def=00582C50)
    (data4_def=00582C50)
    (data5_def=00582C50)
    (data8_def=00582C50)
    (data9_def=00582C50)
   (data10_def=00582C50)
    (data11_def=00582C50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00582C50)
    (data1=00582C50)
    (data2=00582C50)
    (data3=00582C50)
    (data4=00582C50)
    (data5=00582C50)
    (data8=00582C50)
    (data9=00582C50)
    (data10=00582C50)
    (data11=00582C50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00582C50)
    (data1_val=00582C50)
    (data2_val=00582C50)
    (data3_val=00582C50)
    (data4_val=00582C50)
    (data5_val=00582C50)
    (data8_val=00582C50)
    (data9_val=00582C50)
    (data10_val=00582C50)
    (data11_val=00582C50)
target=30, binarySearch=[30, 5065]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=00584A50)
    (data1_def=00584A50)
    (data2_def=00584A50)
    (data3_def=00584A50)
    (data4_def=00584A50)
    (data5_def=00584A50)
    (data8_def=00584A50)
    (data9_def=00584A50)
   (data10_def=00584A50)
    (data11_def=00584A50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00584A50)
    (data1=00584A50)
    (data2=00584A50)
    (data3=00584A50)
    (data4=00584A50)
    (data5=00584A50)
    (data8=00584A50)
    (data9=00584A50)
    (data10=00584A50)
    (data11=00584A50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00584A50)
    (data1_val=00584A50)
    (data2_val=00584A50)
    (data3_val=00584A50)
    (data4_val=00584A50)
    (data5_val=00584A50)
    (data8_val=00584A50)
    (data9_val=00584A50)
    (data10_val=00584A50)
    (data11_val=00584A50)
target=62, binarySearch=[62, 9221]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=00588650)
    (data1_def=00588650)
    (data2_def=00588650)
    (data3_def=00588650)
    (data4_def=00588650)
    (data5_def=00588650)
    (data8_def=00588650)
    (data9_def=00588650)
   (data10_def=00588650)
    (data11_def=00588650)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00588650)
    (data1=00588650)
    (data2=00588650)
    (data3=00588650)
    (data4=00588650)
    (data5=00588650)
    (data8=00588650)
    (data9=00588650)
    (data10=00588650)
    (data11=00588650)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00588650)
    (data1_val=00588650)
    (data2_val=00588650)
    (data3_val=00588650)
    (data4_val=00588650)
    (data5_val=00588650)
    (data8_val=00588650)
    (data9_val=00588650)
    (data10_val=00588650)
    (data11_val=00588650)
target=126, binarySearch=[126, 1289]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=0058FE50)
    (data1_def=0058FE50)
    (data2_def=0058FE50)
    (data3_def=0058FE50)
    (data4_def=0058FE50)
    (data5_def=0058FE50)
    (data8_def=0058FE50)
    (data9_def=0058FE50)
   (data10_def=0058FE50)
    (data11_def=0058FE50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0058FE50)
    (data1=0058FE50)
    (data2=0058FE50)
    (data3=0058FE50)
    (data4=0058FE50)
    (data5=0058FE50)
    (data8=0058FE50)
    (data9=0058FE50)
    (data10=0058FE50)
    (data11=0058FE50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0058FE50)
    (data1_val=0058FE50)
    (data2_val=0058FE50)
    (data3_val=0058FE50)
    (data4_val=0058FE50)
    (data5_val=0058FE50)
    (data8_val=0058FE50)
    (data9_val=0058FE50)
    (data10_val=0058FE50)
    (data11_val=0058FE50)
target=254, binarySearch=[254, 8763]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=6.706387700 sec.
