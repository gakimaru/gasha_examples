============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=4951 / record(s)=10000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=5002 / record(s)=10000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=4984 / record(s)=10000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=10000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=3333 / record(s)=10000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=10000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=4976 / record(s)=10000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002999400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.003000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.003000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.013999700 sec.
* Average time     = 0.001999957 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.003000300 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000999800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.006000400 sec.
* Average time     = 0.000857200 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002000300 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001999400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.006999100 sec.
* Average time     = 0.000999871 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001999700 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.005000600 sec.
* Average time     = 0.000714371 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000600 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.003000300 sec.
* Average time     = 0.000428614 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000300 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000999400 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002000300 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000999200 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000200 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002000100 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.008999200 sec.
* Average time     = 0.001285600 sec.
* Min time         = 0.000999200 sec.
* Max time         = 0.002000300 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.248032400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.241012800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.237015700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.284016400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.070022000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.259997600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 1.340096900 sec.
* Average time     = 0.191442414 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.284016400 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.183030100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.181991400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.180009200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.260015800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.240013600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 1.045060100 sec.
* Average time     = 0.149294300 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.260015800 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.135007100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.187011300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.136007900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.199012300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.075005300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.174009900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.906053800 sec.
* Average time     = 0.129436257 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.199012300 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.005001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1922616 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.005000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1902755 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.006000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1895908 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=494802 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.004000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1474414 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.002000100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=514605 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.006000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1903279 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.029002500 sec.
* Average time     = 0.004143214 sec.
* Min time         = 0.001000000 sec.
* Max time         = 0.006000600 sec.
* Total Swapped    =  10108379 count(s)
* Average  Swapped =   1444054 count(s)
* Min Swapped      =    494802 count(s)
* Max Swapped      =   1922616 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57500 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57587 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57584 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=18345 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=7303 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=58823 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.004999100 sec.
* Average time     = 0.000714157 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000000 sec.
* Total Swapped    =    257142 count(s)
* Average  Swapped =     36734 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     58823 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.145028700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.125988900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.125006400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.261013500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.197032400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 0.854069900 sec.
* Average time     = 0.122009986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.261013500 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001015200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33719 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001004400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33677 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33444 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=36402 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.003021100 sec.
* Average time     = 0.000431586 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001015200 sec.
* Total Swapped    =    152242 count(s)
* Average  Swapped =     21748 count(s)
* Min Swapped      =      3333 count(s)
* Max Swapped      =     36402 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.127026600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.125989100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9995 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.125007300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.125024800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.124997100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.125000500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.125007900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9989 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.878053300 sec.
* Average time     = 0.125436186 sec.
* Min time         = 0.124997100 sec.
* Max time         = 0.127026600 sec.
* Total Swapped    =     48300 count(s)
* Average  Swapped =      6900 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129635 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129583 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129778 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=218680 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=116627 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=213143 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=123006 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.008001500 sec.
* Average time     = 0.001143071 sec.
* Min time         = 0.000999700 sec.
* Max time         = 0.002001200 sec.
* Total Swapped    =   1060452 count(s)
* Average  Swapped =    151493 count(s)
* Min Swapped      =    116627 count(s)
* Max Swapped      =    218680 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.127008400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9985 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.121007000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9987 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.117007200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9983 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.255014000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.193012900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9994 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.813049500 sec.
* Average time     = 0.116149929 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.255014000 sec.
* Total Swapped    =     59947 count(s)
* Average  Swapped =      8563 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48473 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48925 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48799 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=37222 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=5156 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49469 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.004001200 sec.
* Average time     = 0.000571600 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000900 sec.
* Total Swapped    =    238044 count(s)
* Average  Swapped =     34006 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     49469 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.076004400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58291 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.076004100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58193 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.074004500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58188 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.162009500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=60442 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.119005500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58404 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.507028000 sec.
* Average time     = 0.072432571 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.162009500 sec.
* Total Swapped    =    303524 count(s)
* Average  Swapped =     43360 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     60442 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31152 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31250 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31256 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=6022 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1024 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33844 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.001000300 sec.
* Average time     = 0.000142900 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000300 sec.
* Total Swapped    =    134548 count(s)
* Average  Swapped =     19221 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     33844 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9996 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9998 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.003000300 sec.
* Average time     = 0.000428614 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000600 sec.
* Total Swapped    =     49997 count(s)
* Average  Swapped =      7142 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     10000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 10000 Count(s)
Total Array size   = 800000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.013999700/  0.001999957/  0.000000000/  0.003000300
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.006000400/  0.000857200/  0.000000000/  0.002000300
- std::sort(inline-func):   0.006999100/  0.000999871/  0.000000000/  0.001999700
- std::sort(functor):       0.005000600/  0.000714371/  0.000000000/  0.001000600
- std::sort(lambda):        0.003000300/  0.000428614/  0.000000000/  0.001000300
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.008999200/  0.001285600/  0.000999200/  0.002000300
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           1.340096900/  0.191442414/  0.000000000/  0.284016400  162016591/   23145227/          0/   49985001
- Shaker sort<S>:           1.045060100/  0.149294300/  0.000000000/  0.260015800  162016591/   23145227/          0/   49985001
- Odd-Even sort<S>:         0.906053800/  0.129436257/  0.000000000/  0.199012300  162016591/   23145227/          0/   49985001
- Shear sort:               0.029002500/  0.004143214/  0.001000000/  0.006000600   10108379/    1444054/     494802/    1922616
- Comb sort:                0.004999100/  0.000714157/  0.000000000/  0.001000000     257142/      36734/          0/      58823
- Gnome sort<S>:            0.854069900/  0.122009986/  0.000000000/  0.261013500  162016591/   23145227/          0/   49985001
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.003021100/  0.000431586/  0.000000000/  0.001015200     152242/      21748/       3333/      36402
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.878053300/  0.125436186/  0.124997100/  0.127026600      48300/       6900/          0/       9995
- Heap sort:                0.008001500/  0.001143071/  0.000999700/  0.002001200    1060452/     151493/     116627/     218680
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.813049500/  0.116149929/  0.000000000/  0.255014000      59947/       8563/          0/       9999
- Shell sort:               0.004001200/  0.000571600/  0.000000000/  0.001000900     238044/      34006/          0/      49469
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.507028000/  0.072432571/  0.000000000/  0.162009500     303524/      43360/          0/      60442
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.001000300/  0.000142900/  0.000000000/  0.001000300     134548/      19221/          0/      33844
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.003000300/  0.000428614/  0.000000000/  0.001000600      49997/       7142/          0/      10000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=31152)
(result1=31152)
(result3=31152)
(result4=31152)
(result5=31152)
(result6=31152)
(result8=31152)
(result9=31152)
(result10=31152)
(result11=31095)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
    (data10_def=00000000)
    (data11_def=00000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=00D03C10)
    (data1_def=00D03C10)
    (data2_def=00D03C10)
    (data3_def=00D03C10)
    (data4_def=00D03C10)
    (data5_def=00D03C10)
    (data8_def=00D03C10)
    (data9_def=00D03C10)
    (data10_def=00D03C10)
    (data11_def=00D03C10)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00D03C10)
    (data1=00D03C10)
    (data2=00D03C10)
    (data3=00D03C10)
    (data4=00D03C10)
    (data5=00D03C10)
    (data8=00D03C10)
    (data9=00D03C10)
    (data10=00D03C10)
    (data11=00D03C10)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00D03C10)
    (data1_val=00D03C10)
    (data2_val=00D03C10)
    (data3_val=00D03C10)
    (data4_val=00D03C10)
    (data5_val=00D03C10)
    (data8_val=00D03C10)
    (data9_val=00D03C10)
    (data10_val=00D03C10)
    (data11_val=00D03C10)
target=0, linearSearch=[0, 2342]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=00CE13E0)
    (data1_def=00CE13E0)
    (data2_def=00CE13E0)
    (data3_def=00CE13E0)
    (data4_def=00CE13E0)
    (data5_def=00CE13E0)
    (data8_def=00CE13E0)
    (data9_def=00CE13E0)
    (data10_def=00CE13E0)
    (data11_def=00CE13E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00CE13E0)
    (data1=00CE13E0)
    (data2=00CE13E0)
    (data3=00CE13E0)
    (data4=00CE13E0)
    (data5=00CE13E0)
    (data8=00CE13E0)
    (data9=00CE13E0)
    (data10=00CE13E0)
    (data11=00CE13E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00CE13E0)
    (data1_val=00CE13E0)
    (data2_val=00CE13E0)
    (data3_val=00CE13E0)
    (data4_val=00CE13E0)
    (data5_val=00CE13E0)
    (data8_val=00CE13E0)
    (data9_val=00CE13E0)
    (data10_val=00CE13E0)
    (data11_val=00CE13E0)
target=2, linearSearch=[2, 575]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=00CE9E50)
    (data1_def=00CE9E50)
    (data2_def=00CE9E50)
    (data3_def=00CE9E50)
    (data4_def=00CE9E50)
    (data5_def=00CE9E50)
    (data8_def=00CE9E50)
    (data9_def=00CE9E50)
    (data10_def=00CE9E50)
    (data11_def=00CE9E50)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00CE9E50)
    (data1=00CE9E50)
    (data2=00CE9E50)
    (data3=00CE9E50)
    (data4=00CE9E50)
    (data5=00CE9E50)
    (data8=00CE9E50)
    (data9=00CE9E50)
    (data10=00CE9E50)
    (data11=00CE9E50)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00CE9E50)
    (data1_val=00CE9E50)
    (data2_val=00CE9E50)
    (data3_val=00CE9E50)
    (data4_val=00CE9E50)
    (data5_val=00CE9E50)
    (data8_val=00CE9E50)
    (data9_val=00CE9E50)
    (data10_val=00CE9E50)
    (data11_val=00CE9E50)
target=6, linearSearch=[6, 1018]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=00D011E0)
    (data1_def=00D011E0)
    (data2_def=00D011E0)
    (data3_def=00D011E0)
    (data4_def=00D011E0)
    (data5_def=00D011E0)
    (data8_def=00D011E0)
    (data9_def=00D011E0)
    (data10_def=00D011E0)
    (data11_def=00D011E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00D011E0)
    (data1=00D011E0)
    (data2=00D011E0)
    (data3=00D011E0)
    (data4=00D011E0)
    (data5=00D011E0)
    (data8=00D011E0)
    (data9=00D011E0)
    (data10=00D011E0)
    (data11=00D011E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00D011E0)
    (data1_val=00D011E0)
    (data2_val=00D011E0)
    (data3_val=00D011E0)
    (data4_val=00D011E0)
    (data5_val=00D011E0)
    (data8_val=00D011E0)
    (data9_val=00D011E0)
    (data10_val=00D011E0)
    (data11_val=00D011E0)
target=14, linearSearch=[14, 2207]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=00CF4620)
    (data1_def=00CF4620)
    (data2_def=00CF4620)
    (data3_def=00CF4620)
    (data4_def=00CF4620)
    (data5_def=00CF4620)
    (data8_def=00CF4620)
    (data9_def=00CF4620)
    (data10_def=00CF4620)
    (data11_def=00CF4620)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00CF4620)
    (data1=00CF4620)
    (data2=00CF4620)
    (data3=00CF4620)
    (data4=00CF4620)
    (data5=00CF4620)
    (data8=00CF4620)
    (data9=00CF4620)
    (data10=00CF4620)
    (data11=00CF4620)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00CF4620)
    (data1_val=00CF4620)
    (data2_val=00CF4620)
    (data3_val=00CF4620)
    (data4_val=00CF4620)
    (data5_val=00CF4620)
    (data8_val=00CF4620)
    (data9_val=00CF4620)
    (data10_val=00CF4620)
    (data11_val=00CF4620)
target=30, linearSearch=[30, 1555]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=00CE92C0)
    (data1_def=00CE92C0)
    (data2_def=00CE92C0)
    (data3_def=00CE92C0)
    (data4_def=00CE92C0)
    (data5_def=00CE92C0)
    (data8_def=00CE92C0)
    (data9_def=00CE92C0)
    (data10_def=00CE92C0)
    (data11_def=00CE92C0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00CE92C0)
    (data1=00CE92C0)
    (data2=00CE92C0)
    (data3=00CE92C0)
    (data4=00CE92C0)
    (data5=00CE92C0)
    (data8=00CE92C0)
    (data9=00CE92C0)
    (data10=00CE92C0)
    (data11=00CE92C0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00CE92C0)
    (data1_val=00CE92C0)
    (data2_val=00CE92C0)
    (data3_val=00CE92C0)
    (data4_val=00CE92C0)
    (data5_val=00CE92C0)
    (data8_val=00CE92C0)
    (data9_val=00CE92C0)
    (data10_val=00CE92C0)
    (data11_val=00CE92C0)
target=62, linearSearch=[62, 981]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=00CEF300)
    (data1_def=00CEF300)
    (data2_def=00CEF300)
    (data3_def=00CEF300)
    (data4_def=00CEF300)
    (data5_def=00CEF300)
    (data8_def=00CEF300)
    (data9_def=00CEF300)
    (data10_def=00CEF300)
    (data11_def=00CEF300)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00CEF300)
    (data1=00CEF300)
    (data2=00CEF300)
    (data3=00CEF300)
    (data4=00CEF300)
    (data5=00CEF300)
    (data8=00CEF300)
    (data9=00CEF300)
    (data10=00CEF300)
    (data11=00CEF300)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00CEF300)
    (data1_val=00CEF300)
    (data2_val=00CEF300)
    (data3_val=00CEF300)
    (data4_val=00CEF300)
    (data5_val=00CEF300)
    (data8_val=00CEF300)
    (data9_val=00CEF300)
    (data10_val=00CEF300)
    (data11_val=00CEF300)
target=126, linearSearch=[126, 1289]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=00D75540)
    (data1_def=00D75540)
    (data2_def=00D75540)
    (data3_def=00D75540)
    (data4_def=00D75540)
    (data5_def=00D75540)
    (data8_def=00D75540)
    (data9_def=00D75540)
    (data10_def=00D75540)
    (data11_def=00D75540)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00D75540)
    (data1=00D75540)
    (data2=00D75540)
    (data3=00D75540)
    (data4=00D75540)
    (data5=00D75540)
    (data8=00D75540)
    (data9=00D75540)
    (data10=00D75540)
    (data11=00D75540)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00D75540)
    (data1_val=00D75540)
    (data2_val=00D75540)
    (data3_val=00D75540)
    (data4_val=00D75540)
    (data5_val=00D75540)
    (data8_val=00D75540)
    (data9_val=00D75540)
    (data10_val=00D75540)
    (data11_val=00D75540)
target=254, linearSearch=[254, 8157]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
   (data10_def=00000000)
    (data11_def=00000000)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=00CD6030)
    (data1_def=00CD6030)
    (data2_def=00CD6030)
    (data3_def=00CD6030)
    (data4_def=00CD6030)
    (data5_def=00CD6030)
    (data8_def=00CD6030)
    (data9_def=00CD6030)
   (data10_def=00CD6030)
    (data11_def=00CD6030)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00CD6030)
    (data1=00CD6030)
    (data2=00CD6030)
    (data3=00CD6030)
    (data4=00CD6030)
    (data5=00CD6030)
    (data8=00CD6030)
    (data9=00CD6030)
    (data10=00CD6030)
    (data11=00CD6030)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00CD6030)
    (data1_val=00CD6030)
    (data2_val=00CD6030)
    (data3_val=00CD6030)
    (data4_val=00CD6030)
    (data5_val=00CD6030)
    (data8_val=00CD6030)
    (data9_val=00CD6030)
    (data10_val=00CD6030)
    (data11_val=00CD6030)
target=0, binarySearch=[0, 2342]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=00CD6210)
    (data1_def=00CD6210)
    (data2_def=00CD6210)
    (data3_def=00CD6210)
    (data4_def=00CD6210)
    (data5_def=00CD6210)
    (data8_def=00CD6210)
    (data9_def=00CD6210)
   (data10_def=00CD6210)
    (data11_def=00CD6210)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00CD6210)
    (data1=00CD6210)
    (data2=00CD6210)
    (data3=00CD6210)
    (data4=00CD6210)
    (data5=00CD6210)
    (data8=00CD6210)
    (data9=00CD6210)
    (data10=00CD6210)
    (data11=00CD6210)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00CD6210)
    (data1_val=00CD6210)
    (data2_val=00CD6210)
    (data3_val=00CD6210)
    (data4_val=00CD6210)
    (data5_val=00CD6210)
    (data8_val=00CD6210)
    (data9_val=00CD6210)
    (data10_val=00CD6210)
    (data11_val=00CD6210)
target=2, binarySearch=[2, 6831]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=00CD65D0)
    (data1_def=00CD65D0)
    (data2_def=00CD65D0)
    (data3_def=00CD65D0)
    (data4_def=00CD65D0)
    (data5_def=00CD65D0)
    (data8_def=00CD65D0)
    (data9_def=00CD65D0)
   (data10_def=00CD65D0)
    (data11_def=00CD65D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00CD65D0)
    (data1=00CD65D0)
    (data2=00CD65D0)
    (data3=00CD65D0)
    (data4=00CD65D0)
    (data5=00CD65D0)
    (data8=00CD65D0)
    (data9=00CD65D0)
    (data10=00CD65D0)
    (data11=00CD65D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00CD65D0)
    (data1_val=00CD65D0)
    (data2_val=00CD65D0)
    (data3_val=00CD65D0)
    (data4_val=00CD65D0)
    (data5_val=00CD65D0)
    (data8_val=00CD65D0)
    (data9_val=00CD65D0)
    (data10_val=00CD65D0)
    (data11_val=00CD65D0)
target=6, binarySearch=[6, 1018]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=00CD6D50)
    (data1_def=00CD6D50)
    (data2_def=00CD6D50)
    (data3_def=00CD6D50)
    (data4_def=00CD6D50)
    (data5_def=00CD6D50)
    (data8_def=00CD6D50)
    (data9_def=00CD6D50)
   (data10_def=00CD6D50)
    (data11_def=00CD6D50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00CD6D50)
    (data1=00CD6D50)
    (data2=00CD6D50)
    (data3=00CD6D50)
    (data4=00CD6D50)
    (data5=00CD6D50)
    (data8=00CD6D50)
    (data9=00CD6D50)
    (data10=00CD6D50)
    (data11=00CD6D50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00CD6D50)
    (data1_val=00CD6D50)
    (data2_val=00CD6D50)
    (data3_val=00CD6D50)
    (data4_val=00CD6D50)
    (data5_val=00CD6D50)
    (data8_val=00CD6D50)
    (data9_val=00CD6D50)
    (data10_val=00CD6D50)
    (data11_val=00CD6D50)
target=14, binarySearch=[14, 4706]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=00CD7C50)
    (data1_def=00CD7C50)
    (data2_def=00CD7C50)
    (data3_def=00CD7C50)
    (data4_def=00CD7C50)
    (data5_def=00CD7C50)
    (data8_def=00CD7C50)
    (data9_def=00CD7C50)
   (data10_def=00CD7C50)
    (data11_def=00CD7C50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00CD7C50)
    (data1=00CD7C50)
    (data2=00CD7C50)
    (data3=00CD7C50)
    (data4=00CD7C50)
    (data5=00CD7C50)
    (data8=00CD7C50)
    (data9=00CD7C50)
    (data10=00CD7C50)
    (data11=00CD7C50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00CD7C50)
    (data1_val=00CD7C50)
    (data2_val=00CD7C50)
    (data3_val=00CD7C50)
    (data4_val=00CD7C50)
    (data5_val=00CD7C50)
    (data8_val=00CD7C50)
    (data9_val=00CD7C50)
    (data10_val=00CD7C50)
    (data11_val=00CD7C50)
target=30, binarySearch=[30, 5065]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=00CD9A50)
    (data1_def=00CD9A50)
    (data2_def=00CD9A50)
    (data3_def=00CD9A50)
    (data4_def=00CD9A50)
    (data5_def=00CD9A50)
    (data8_def=00CD9A50)
    (data9_def=00CD9A50)
   (data10_def=00CD9A50)
    (data11_def=00CD9A50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00CD9A50)
    (data1=00CD9A50)
    (data2=00CD9A50)
    (data3=00CD9A50)
    (data4=00CD9A50)
    (data5=00CD9A50)
    (data8=00CD9A50)
    (data9=00CD9A50)
    (data10=00CD9A50)
    (data11=00CD9A50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00CD9A50)
    (data1_val=00CD9A50)
    (data2_val=00CD9A50)
    (data3_val=00CD9A50)
    (data4_val=00CD9A50)
    (data5_val=00CD9A50)
    (data8_val=00CD9A50)
    (data9_val=00CD9A50)
    (data10_val=00CD9A50)
    (data11_val=00CD9A50)
target=62, binarySearch=[62, 9221]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=00CDD650)
    (data1_def=00CDD650)
    (data2_def=00CDD650)
    (data3_def=00CDD650)
    (data4_def=00CDD650)
    (data5_def=00CDD650)
    (data8_def=00CDD650)
    (data9_def=00CDD650)
   (data10_def=00CDD650)
    (data11_def=00CDD650)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00CDD650)
    (data1=00CDD650)
    (data2=00CDD650)
    (data3=00CDD650)
    (data4=00CDD650)
    (data5=00CDD650)
    (data8=00CDD650)
    (data9=00CDD650)
    (data10=00CDD650)
    (data11=00CDD650)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00CDD650)
    (data1_val=00CDD650)
    (data2_val=00CDD650)
    (data3_val=00CDD650)
    (data4_val=00CDD650)
    (data5_val=00CDD650)
    (data8_val=00CDD650)
    (data9_val=00CDD650)
    (data10_val=00CDD650)
    (data11_val=00CDD650)
target=126, binarySearch=[126, 1289]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=00CE4E50)
    (data1_def=00CE4E50)
    (data2_def=00CE4E50)
    (data3_def=00CE4E50)
    (data4_def=00CE4E50)
    (data5_def=00CE4E50)
    (data8_def=00CE4E50)
    (data9_def=00CE4E50)
   (data10_def=00CE4E50)
    (data11_def=00CE4E50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00CE4E50)
    (data1=00CE4E50)
    (data2=00CE4E50)
    (data3=00CE4E50)
    (data4=00CE4E50)
    (data5=00CE4E50)
    (data8=00CE4E50)
    (data9=00CE4E50)
    (data10=00CE4E50)
    (data11=00CE4E50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00CE4E50)
    (data1_val=00CE4E50)
    (data2_val=00CE4E50)
    (data3_val=00CE4E50)
    (data4_val=00CE4E50)
    (data5_val=00CE4E50)
    (data8_val=00CE4E50)
    (data9_val=00CE4E50)
    (data10_val=00CE4E50)
    (data11_val=00CE4E50)
target=254, binarySearch=[254, 8763]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=6.515384900 sec.
