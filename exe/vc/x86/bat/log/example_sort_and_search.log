============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=4951 / record(s)=10000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=5002 / record(s)=10000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=4984 / record(s)=10000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=10000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=3333 / record(s)=10000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=10000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=4976 / record(s)=10000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.003002600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003002600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.003003000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.005003800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.014012000 sec.
* Average time     = 0.002001714 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.005003800 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002002000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.010010000 sec.
* Average time     = 0.001430000 sec.
* Min time         = 0.001000300 sec.
* Max time         = 0.002002900 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002002600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002002000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.007007600 sec.
* Average time     = 0.001001086 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002002600 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.003002900 sec.
* Average time     = 0.000428986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.005004700 sec.
* Average time     = 0.000714957 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001700 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.009009600 sec.
* Average time     = 0.001287086 sec.
* Min time         = 0.001000800 sec.
* Max time         = 0.002002100 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.236222900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.234222500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.233221700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.279266400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.066063000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.259255000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 1.308251500 sec.
* Average time     = 0.186893071 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.279266400 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.183171600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.180164300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.183175400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.254241900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.283267400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 1.085022000 sec.
* Average time     = 0.155003143 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.283267400 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.128122100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.128121800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.128121800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.187178000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.057054200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.161153100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.789751000 sec.
* Average time     = 0.112821571 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.187178000 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.005004700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1892312 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.005005000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1873730 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.005004900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1860168 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=485134 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.003002300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1465201 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=485527 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.004003800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1882044 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.024022200 sec.
* Average time     = 0.003431743 sec.
* Min time         = 0.001000600 sec.
* Max time         = 0.005005000 sec.
* Total Swapped    =   9944116 count(s)
* Average  Swapped =   1420588 count(s)
* Min Swapped      =    485134 count(s)
* Max Swapped      =   1892312 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57500 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57587 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57584 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=18345 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=7303 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=58823 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.005005100 sec.
* Average time     = 0.000715014 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =    257142 count(s)
* Average  Swapped =     36734 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     58823 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.155147300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.122116000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.120114200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.257246000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.191181500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 0.845805000 sec.
* Average time     = 0.120829286 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.257246000 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33719 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33677 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33444 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=36402 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.006006200 sec.
* Average time     = 0.000858029 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001500 sec.
* Total Swapped    =    152242 count(s)
* Average  Swapped =     21748 count(s)
* Min Swapped      =      3333 count(s)
* Max Swapped      =     36402 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.122115300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.124117800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9995 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.121114800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.121114500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.123116200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.121115100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.122116200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9989 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.854809900 sec.
* Average time     = 0.122115700 sec.
* Min time         = 0.121114500 sec.
* Max time         = 0.124117800 sec.
* Total Swapped    =     48300 count(s)
* Average  Swapped =      6900 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129635 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129583 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129778 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=218680 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=116627 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=213143 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=123006 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.008007900 sec.
* Average time     = 0.001143986 sec.
* Min time         = 0.001000800 sec.
* Max time         = 0.002001700 sec.
* Total Swapped    =   1060452 count(s)
* Average  Swapped =    151493 count(s)
* Min Swapped      =    116627 count(s)
* Max Swapped      =    218680 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.116112100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9985 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.116110400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9987 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.114108400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9983 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.248234800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.186175100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9994 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.780740800 sec.
* Average time     = 0.111534400 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.248234800 sec.
* Total Swapped    =     59947 count(s)
* Average  Swapped =      8563 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48473 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48925 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48799 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=37222 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=5156 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49469 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.005004900 sec.
* Average time     = 0.000714986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =    238044 count(s)
* Average  Swapped =     34006 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     49469 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.073069400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58291 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.072069400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58193 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.070066200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58188 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.156149000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=60442 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.118111600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58404 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.490466800 sec.
* Average time     = 0.070066686 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.156149000 sec.
* Total Swapped    =    303524 count(s)
* Average  Swapped =     43360 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     60442 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31152 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31250 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31256 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=6022 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1024 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33844 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.000000000 sec.
* Average time     = 0.000000000 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.000000000 sec.
* Total Swapped    =    134548 count(s)
* Average  Swapped =     19221 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     33844 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9996 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9998 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.001001100 sec.
* Average time     = 0.000143014 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001100 sec.
* Total Swapped    =     49997 count(s)
* Average  Swapped =      7142 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     10000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 10000 Count(s)
Total Array size   = 800000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.014012000/  0.002001714/  0.000000000/  0.005003800
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.010010000/  0.001430000/  0.001000300/  0.002002900
- std::sort(inline-func):   0.007007600/  0.001001086/  0.000000000/  0.002002600
- std::sort(functor):       0.003002900/  0.000428986/  0.000000000/  0.001001200
- std::sort(lambda):        0.005004700/  0.000714957/  0.000000000/  0.001001200
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.009009600/  0.001287086/  0.001000800/  0.002002100
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           1.308251500/  0.186893071/  0.000000000/  0.279266400  162016591/   23145227/          0/   49985001
- Shaker sort<S>:           1.085022000/  0.155003143/  0.000000000/  0.283267400  162016591/   23145227/          0/   49985001
- Odd-Even sort<S>:         0.789751000/  0.112821571/  0.000000000/  0.187178000  162016591/   23145227/          0/   49985001
- Shear sort:               0.024022200/  0.003431743/  0.001000600/  0.005005000    9944116/    1420588/     485134/    1892312
- Comb sort:                0.005005100/  0.000715014/  0.000000000/  0.001001200     257142/      36734/          0/      58823
- Gnome sort<S>:            0.845805000/  0.120829286/  0.000000000/  0.257246000  162016591/   23145227/          0/   49985001
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.006006200/  0.000858029/  0.000000000/  0.001001500     152242/      21748/       3333/      36402
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.854809900/  0.122115700/  0.121114500/  0.124117800      48300/       6900/          0/       9995
- Heap sort:                0.008007900/  0.001143986/  0.001000800/  0.002001700    1060452/     151493/     116627/     218680
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.780740800/  0.111534400/  0.000000000/  0.248234800      59947/       8563/          0/       9999
- Shell sort:               0.005004900/  0.000714986/  0.000000000/  0.001001200     238044/      34006/          0/      49469
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.490466800/  0.070066686/  0.000000000/  0.156149000     303524/      43360/          0/      60442
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.000000000/  0.000000000/  0.000000000/  0.000000000     134548/      19221/          0/      33844
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.001001100/  0.000143014/  0.000000000/  0.001001100      49997/       7142/          0/      10000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=31152)
(result1=31152)
(result3=31152)
(result4=31152)
(result5=31152)
(result6=31152)
(result8=31152)
(result9=31152)
(result10=31152)
(result11=31095)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
    (data10_def=00000000)
    (data11_def=00000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=02528C10)
    (data1_def=02528C10)
    (data2_def=02528C10)
    (data3_def=02528C10)
    (data4_def=02528C10)
    (data5_def=02528C10)
    (data8_def=02528C10)
    (data9_def=02528C10)
    (data10_def=02528C10)
    (data11_def=02528C10)
  linearSearch(*array_shuffle1, search_predicate);
    (data=02528C10)
    (data1=02528C10)
    (data2=02528C10)
    (data3=02528C10)
    (data4=02528C10)
    (data5=02528C10)
    (data8=02528C10)
    (data9=02528C10)
    (data10=02528C10)
    (data11=02528C10)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=02528C10)
    (data1_val=02528C10)
    (data2_val=02528C10)
    (data3_val=02528C10)
    (data4_val=02528C10)
    (data5_val=02528C10)
    (data8_val=02528C10)
    (data9_val=02528C10)
    (data10_val=02528C10)
    (data11_val=02528C10)
target=0, linearSearch=[0, 2342]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=025063E0)
    (data1_def=025063E0)
    (data2_def=025063E0)
    (data3_def=025063E0)
    (data4_def=025063E0)
    (data5_def=025063E0)
    (data8_def=025063E0)
    (data9_def=025063E0)
    (data10_def=025063E0)
    (data11_def=025063E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=025063E0)
    (data1=025063E0)
    (data2=025063E0)
    (data3=025063E0)
    (data4=025063E0)
    (data5=025063E0)
    (data8=025063E0)
    (data9=025063E0)
    (data10=025063E0)
    (data11=025063E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=025063E0)
    (data1_val=025063E0)
    (data2_val=025063E0)
    (data3_val=025063E0)
    (data4_val=025063E0)
    (data5_val=025063E0)
    (data8_val=025063E0)
    (data9_val=025063E0)
    (data10_val=025063E0)
    (data11_val=025063E0)
target=2, linearSearch=[2, 575]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=0250EE50)
    (data1_def=0250EE50)
    (data2_def=0250EE50)
    (data3_def=0250EE50)
    (data4_def=0250EE50)
    (data5_def=0250EE50)
    (data8_def=0250EE50)
    (data9_def=0250EE50)
    (data10_def=0250EE50)
    (data11_def=0250EE50)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0250EE50)
    (data1=0250EE50)
    (data2=0250EE50)
    (data3=0250EE50)
    (data4=0250EE50)
    (data5=0250EE50)
    (data8=0250EE50)
    (data9=0250EE50)
    (data10=0250EE50)
    (data11=0250EE50)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0250EE50)
    (data1_val=0250EE50)
    (data2_val=0250EE50)
    (data3_val=0250EE50)
    (data4_val=0250EE50)
    (data5_val=0250EE50)
    (data8_val=0250EE50)
    (data9_val=0250EE50)
    (data10_val=0250EE50)
    (data11_val=0250EE50)
target=6, linearSearch=[6, 1018]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=025261E0)
    (data1_def=025261E0)
    (data2_def=025261E0)
    (data3_def=025261E0)
    (data4_def=025261E0)
    (data5_def=025261E0)
    (data8_def=025261E0)
    (data9_def=025261E0)
    (data10_def=025261E0)
    (data11_def=025261E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=025261E0)
    (data1=025261E0)
    (data2=025261E0)
    (data3=025261E0)
    (data4=025261E0)
    (data5=025261E0)
    (data8=025261E0)
    (data9=025261E0)
    (data10=025261E0)
    (data11=025261E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=025261E0)
    (data1_val=025261E0)
    (data2_val=025261E0)
    (data3_val=025261E0)
    (data4_val=025261E0)
    (data5_val=025261E0)
    (data8_val=025261E0)
    (data9_val=025261E0)
    (data10_val=025261E0)
    (data11_val=025261E0)
target=14, linearSearch=[14, 2207]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=02519620)
    (data1_def=02519620)
    (data2_def=02519620)
    (data3_def=02519620)
    (data4_def=02519620)
    (data5_def=02519620)
    (data8_def=02519620)
    (data9_def=02519620)
    (data10_def=02519620)
    (data11_def=02519620)
  linearSearch(*array_shuffle1, search_predicate);
    (data=02519620)
    (data1=02519620)
    (data2=02519620)
    (data3=02519620)
    (data4=02519620)
    (data5=02519620)
    (data8=02519620)
    (data9=02519620)
    (data10=02519620)
    (data11=02519620)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=02519620)
    (data1_val=02519620)
    (data2_val=02519620)
    (data3_val=02519620)
    (data4_val=02519620)
    (data5_val=02519620)
    (data8_val=02519620)
    (data9_val=02519620)
    (data10_val=02519620)
    (data11_val=02519620)
target=30, linearSearch=[30, 1555]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=0250E2C0)
    (data1_def=0250E2C0)
    (data2_def=0250E2C0)
    (data3_def=0250E2C0)
    (data4_def=0250E2C0)
    (data5_def=0250E2C0)
    (data8_def=0250E2C0)
    (data9_def=0250E2C0)
    (data10_def=0250E2C0)
    (data11_def=0250E2C0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0250E2C0)
    (data1=0250E2C0)
    (data2=0250E2C0)
    (data3=0250E2C0)
    (data4=0250E2C0)
    (data5=0250E2C0)
    (data8=0250E2C0)
    (data9=0250E2C0)
    (data10=0250E2C0)
    (data11=0250E2C0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0250E2C0)
    (data1_val=0250E2C0)
    (data2_val=0250E2C0)
    (data3_val=0250E2C0)
    (data4_val=0250E2C0)
    (data5_val=0250E2C0)
    (data8_val=0250E2C0)
    (data9_val=0250E2C0)
    (data10_val=0250E2C0)
    (data11_val=0250E2C0)
target=62, linearSearch=[62, 981]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=02514300)
    (data1_def=02514300)
    (data2_def=02514300)
    (data3_def=02514300)
    (data4_def=02514300)
    (data5_def=02514300)
    (data8_def=02514300)
    (data9_def=02514300)
    (data10_def=02514300)
    (data11_def=02514300)
  linearSearch(*array_shuffle1, search_predicate);
    (data=02514300)
    (data1=02514300)
    (data2=02514300)
    (data3=02514300)
    (data4=02514300)
    (data5=02514300)
    (data8=02514300)
    (data9=02514300)
    (data10=02514300)
    (data11=02514300)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=02514300)
    (data1_val=02514300)
    (data2_val=02514300)
    (data3_val=02514300)
    (data4_val=02514300)
    (data5_val=02514300)
    (data8_val=02514300)
    (data9_val=02514300)
    (data10_val=02514300)
    (data11_val=02514300)
target=126, linearSearch=[126, 1289]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=0259A540)
    (data1_def=0259A540)
    (data2_def=0259A540)
    (data3_def=0259A540)
    (data4_def=0259A540)
    (data5_def=0259A540)
    (data8_def=0259A540)
    (data9_def=0259A540)
    (data10_def=0259A540)
    (data11_def=0259A540)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0259A540)
    (data1=0259A540)
    (data2=0259A540)
    (data3=0259A540)
    (data4=0259A540)
    (data5=0259A540)
    (data8=0259A540)
    (data9=0259A540)
    (data10=0259A540)
    (data11=0259A540)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0259A540)
    (data1_val=0259A540)
    (data2_val=0259A540)
    (data3_val=0259A540)
    (data4_val=0259A540)
    (data5_val=0259A540)
    (data8_val=0259A540)
    (data9_val=0259A540)
    (data10_val=0259A540)
    (data11_val=0259A540)
target=254, linearSearch=[254, 8157]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
   (data10_def=00000000)
    (data11_def=00000000)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=024FB030)
    (data1_def=024FB030)
    (data2_def=024FB030)
    (data3_def=024FB030)
    (data4_def=024FB030)
    (data5_def=024FB030)
    (data8_def=024FB030)
    (data9_def=024FB030)
   (data10_def=024FB030)
    (data11_def=024FB030)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=024FB030)
    (data1=024FB030)
    (data2=024FB030)
    (data3=024FB030)
    (data4=024FB030)
    (data5=024FB030)
    (data8=024FB030)
    (data9=024FB030)
    (data10=024FB030)
    (data11=024FB030)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=024FB030)
    (data1_val=024FB030)
    (data2_val=024FB030)
    (data3_val=024FB030)
    (data4_val=024FB030)
    (data5_val=024FB030)
    (data8_val=024FB030)
    (data9_val=024FB030)
    (data10_val=024FB030)
    (data11_val=024FB030)
target=0, binarySearch=[0, 2342]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=024FB210)
    (data1_def=024FB210)
    (data2_def=024FB210)
    (data3_def=024FB210)
    (data4_def=024FB210)
    (data5_def=024FB210)
    (data8_def=024FB210)
    (data9_def=024FB210)
   (data10_def=024FB210)
    (data11_def=024FB210)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=024FB210)
    (data1=024FB210)
    (data2=024FB210)
    (data3=024FB210)
    (data4=024FB210)
    (data5=024FB210)
    (data8=024FB210)
    (data9=024FB210)
    (data10=024FB210)
    (data11=024FB210)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=024FB210)
    (data1_val=024FB210)
    (data2_val=024FB210)
    (data3_val=024FB210)
    (data4_val=024FB210)
    (data5_val=024FB210)
    (data8_val=024FB210)
    (data9_val=024FB210)
    (data10_val=024FB210)
    (data11_val=024FB210)
target=2, binarySearch=[2, 6831]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=024FB5D0)
    (data1_def=024FB5D0)
    (data2_def=024FB5D0)
    (data3_def=024FB5D0)
    (data4_def=024FB5D0)
    (data5_def=024FB5D0)
    (data8_def=024FB5D0)
    (data9_def=024FB5D0)
   (data10_def=024FB5D0)
    (data11_def=024FB5D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=024FB5D0)
    (data1=024FB5D0)
    (data2=024FB5D0)
    (data3=024FB5D0)
    (data4=024FB5D0)
    (data5=024FB5D0)
    (data8=024FB5D0)
    (data9=024FB5D0)
    (data10=024FB5D0)
    (data11=024FB5D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=024FB5D0)
    (data1_val=024FB5D0)
    (data2_val=024FB5D0)
    (data3_val=024FB5D0)
    (data4_val=024FB5D0)
    (data5_val=024FB5D0)
    (data8_val=024FB5D0)
    (data9_val=024FB5D0)
    (data10_val=024FB5D0)
    (data11_val=024FB5D0)
target=6, binarySearch=[6, 1018]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=024FBD50)
    (data1_def=024FBD50)
    (data2_def=024FBD50)
    (data3_def=024FBD50)
    (data4_def=024FBD50)
    (data5_def=024FBD50)
    (data8_def=024FBD50)
    (data9_def=024FBD50)
   (data10_def=024FBD50)
    (data11_def=024FBD50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=024FBD50)
    (data1=024FBD50)
    (data2=024FBD50)
    (data3=024FBD50)
    (data4=024FBD50)
    (data5=024FBD50)
    (data8=024FBD50)
    (data9=024FBD50)
    (data10=024FBD50)
    (data11=024FBD50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=024FBD50)
    (data1_val=024FBD50)
    (data2_val=024FBD50)
    (data3_val=024FBD50)
    (data4_val=024FBD50)
    (data5_val=024FBD50)
    (data8_val=024FBD50)
    (data9_val=024FBD50)
    (data10_val=024FBD50)
    (data11_val=024FBD50)
target=14, binarySearch=[14, 4706]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=024FCC50)
    (data1_def=024FCC50)
    (data2_def=024FCC50)
    (data3_def=024FCC50)
    (data4_def=024FCC50)
    (data5_def=024FCC50)
    (data8_def=024FCC50)
    (data9_def=024FCC50)
   (data10_def=024FCC50)
    (data11_def=024FCC50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=024FCC50)
    (data1=024FCC50)
    (data2=024FCC50)
    (data3=024FCC50)
    (data4=024FCC50)
    (data5=024FCC50)
    (data8=024FCC50)
    (data9=024FCC50)
    (data10=024FCC50)
    (data11=024FCC50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=024FCC50)
    (data1_val=024FCC50)
    (data2_val=024FCC50)
    (data3_val=024FCC50)
    (data4_val=024FCC50)
    (data5_val=024FCC50)
    (data8_val=024FCC50)
    (data9_val=024FCC50)
    (data10_val=024FCC50)
    (data11_val=024FCC50)
target=30, binarySearch=[30, 5065]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=024FEA50)
    (data1_def=024FEA50)
    (data2_def=024FEA50)
    (data3_def=024FEA50)
    (data4_def=024FEA50)
    (data5_def=024FEA50)
    (data8_def=024FEA50)
    (data9_def=024FEA50)
   (data10_def=024FEA50)
    (data11_def=024FEA50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=024FEA50)
    (data1=024FEA50)
    (data2=024FEA50)
    (data3=024FEA50)
    (data4=024FEA50)
    (data5=024FEA50)
    (data8=024FEA50)
    (data9=024FEA50)
    (data10=024FEA50)
    (data11=024FEA50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=024FEA50)
    (data1_val=024FEA50)
    (data2_val=024FEA50)
    (data3_val=024FEA50)
    (data4_val=024FEA50)
    (data5_val=024FEA50)
    (data8_val=024FEA50)
    (data9_val=024FEA50)
    (data10_val=024FEA50)
    (data11_val=024FEA50)
target=62, binarySearch=[62, 9221]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=02502650)
    (data1_def=02502650)
    (data2_def=02502650)
    (data3_def=02502650)
    (data4_def=02502650)
    (data5_def=02502650)
    (data8_def=02502650)
    (data9_def=02502650)
   (data10_def=02502650)
    (data11_def=02502650)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=02502650)
    (data1=02502650)
    (data2=02502650)
    (data3=02502650)
    (data4=02502650)
    (data5=02502650)
    (data8=02502650)
    (data9=02502650)
    (data10=02502650)
    (data11=02502650)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=02502650)
    (data1_val=02502650)
    (data2_val=02502650)
    (data3_val=02502650)
    (data4_val=02502650)
    (data5_val=02502650)
    (data8_val=02502650)
    (data9_val=02502650)
    (data10_val=02502650)
    (data11_val=02502650)
target=126, binarySearch=[126, 1289]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=02509E50)
    (data1_def=02509E50)
    (data2_def=02509E50)
    (data3_def=02509E50)
    (data4_def=02509E50)
    (data5_def=02509E50)
    (data8_def=02509E50)
    (data9_def=02509E50)
   (data10_def=02509E50)
    (data11_def=02509E50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=02509E50)
    (data1=02509E50)
    (data2=02509E50)
    (data3=02509E50)
    (data4=02509E50)
    (data5=02509E50)
    (data8=02509E50)
    (data9=02509E50)
    (data10=02509E50)
    (data11=02509E50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=02509E50)
    (data1_val=02509E50)
    (data2_val=02509E50)
    (data3_val=02509E50)
    (data4_val=02509E50)
    (data5_val=02509E50)
    (data8_val=02509E50)
    (data9_val=02509E50)
    (data10_val=02509E50)
    (data11_val=02509E50)
target=254, binarySearch=[254, 8763]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=6.320009900 sec.
