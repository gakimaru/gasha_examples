============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=4951 / record(s)=10000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=5002 / record(s)=10000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=4984 / record(s)=10000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=10000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=3333 / record(s)=10000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=10000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=4976 / record(s)=10000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.003002700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.004004100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.003002700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.003003000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.016015100 sec.
* Average time     = 0.002287871 sec.
* Min time         = 0.001000800 sec.
* Max time         = 0.004004100 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.007006500 sec.
* Average time     = 0.001000929 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002001800 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002002700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.007006500 sec.
* Average time     = 0.001000929 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002002700 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.002002700 sec.
* Average time     = 0.000286100 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001500 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001002100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.006005800 sec.
* Average time     = 0.000857971 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001002100 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000500 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000987400 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.007993600 sec.
* Average time     = 0.001141943 sec.
* Min time         = 0.000987400 sec.
* Max time         = 0.002002100 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.238226100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.236225500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.238226700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.279264900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.067064000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.252240200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 1.311247400 sec.
* Average time     = 0.187321057 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.279264900 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.222212400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.183172700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.179170400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.258246100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.233223800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 1.076025400 sec.
* Average time     = 0.153717914 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.258246100 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.074068600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.073069800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.076072200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.093088800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.035033400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.092088000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.443420800 sec.
* Average time     = 0.063345829 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.093088800 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.003002600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1922616 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003003000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1902755 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.003002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1895908 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=494802 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.002002000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1474414 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=514605 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.003002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1903279 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.015014300 sec.
* Average time     = 0.002144900 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.003003000 sec.
* Total Swapped    =  10108379 count(s)
* Average  Swapped =   1444054 count(s)
* Min Swapped      =    494802 count(s)
* Max Swapped      =   1922616 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57500 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57587 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57584 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=18345 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=7303 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=58823 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.008007300 sec.
* Average time     = 0.001143900 sec.
* Min time         = 0.001000800 sec.
* Max time         = 0.002001800 sec.
* Total Swapped    =    257142 count(s)
* Average  Swapped =     36734 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     58823 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.156149900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.153146900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.129123500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.257244900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.193183000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 0.888848200 sec.
* Average time     = 0.126978314 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.257244900 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33719 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33677 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33444 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=36402 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.003002900 sec.
* Average time     = 0.000428986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001100 sec.
* Total Swapped    =    152242 count(s)
* Average  Swapped =     21748 count(s)
* Min Swapped      =      3333 count(s)
* Max Swapped      =     36402 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.124118200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.125117400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9995 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.124118200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.125119000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.124118200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.124118800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.125119400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9989 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.871829200 sec.
* Average time     = 0.124547029 sec.
* Min time         = 0.124118200 sec.
* Max time         = 0.125119400 sec.
* Total Swapped    =     48300 count(s)
* Average  Swapped =      6900 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002003500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129635 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001002600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129583 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001988000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129778 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.002003800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=218680 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.002000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=116627 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.002005300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=213143 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=123006 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.012003700 sec.
* Average time     = 0.001714814 sec.
* Min time         = 0.001000500 sec.
* Max time         = 0.002005300 sec.
* Total Swapped    =   1060452 count(s)
* Average  Swapped =    151493 count(s)
* Min Swapped      =    116627 count(s)
* Max Swapped      =    218680 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.140131100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9985 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.126120200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9987 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.126121500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9983 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.251237200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.189180100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9994 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.832790100 sec.
* Average time     = 0.118970014 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.251237200 sec.
* Total Swapped    =     59947 count(s)
* Average  Swapped =      8563 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48473 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48925 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48799 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=37222 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=5156 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000998500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49469 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.004001500 sec.
* Average time     = 0.000571643 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =    238044 count(s)
* Average  Swapped =     34006 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     49469 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.075072800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58291 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.073070100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58193 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.073070000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58188 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.160151700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=60442 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.120114400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58404 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.502480700 sec.
* Average time     = 0.071782957 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.160151700 sec.
* Total Swapped    =    303524 count(s)
* Average  Swapped =     43360 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     60442 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31152 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31250 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31256 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=6022 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1024 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33844 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.001000500 sec.
* Average time     = 0.000142929 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000500 sec.
* Total Swapped    =    134548 count(s)
* Average  Swapped =     19221 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     33844 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9996 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9998 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.001001200 sec.
* Average time     = 0.000143029 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =     49997 count(s)
* Average  Swapped =      7142 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     10000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 10000 Count(s)
Total Array size   = 800000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.016015100/  0.002287871/  0.001000800/  0.004004100
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.007006500/  0.001000929/  0.000000000/  0.002001800
- std::sort(inline-func):   0.007006500/  0.001000929/  0.000000000/  0.002002700
- std::sort(functor):       0.002002700/  0.000286100/  0.000000000/  0.001001500
- std::sort(lambda):        0.006005800/  0.000857971/  0.000000000/  0.001002100
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.007993600/  0.001141943/  0.000987400/  0.002002100
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           1.311247400/  0.187321057/  0.000000000/  0.279264900  162016591/   23145227/          0/   49985001
- Shaker sort<S>:           1.076025400/  0.153717914/  0.000000000/  0.258246100  162016591/   23145227/          0/   49985001
- Odd-Even sort<S>:         0.443420800/  0.063345829/  0.000000000/  0.093088800  162016591/   23145227/          0/   49985001
- Shear sort:               0.015014300/  0.002144900/  0.000000000/  0.003003000   10108379/    1444054/     494802/    1922616
- Comb sort:                0.008007300/  0.001143900/  0.001000800/  0.002001800     257142/      36734/          0/      58823
- Gnome sort<S>:            0.888848200/  0.126978314/  0.000000000/  0.257244900  162016591/   23145227/          0/   49985001
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.003002900/  0.000428986/  0.000000000/  0.001001100     152242/      21748/       3333/      36402
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.871829200/  0.124547029/  0.124118200/  0.125119400      48300/       6900/          0/       9995
- Heap sort:                0.012003700/  0.001714814/  0.001000500/  0.002005300    1060452/     151493/     116627/     218680
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.832790100/  0.118970014/  0.000000000/  0.251237200      59947/       8563/          0/       9999
- Shell sort:               0.004001500/  0.000571643/  0.000000000/  0.001001200     238044/      34006/          0/      49469
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.502480700/  0.071782957/  0.000000000/  0.160151700     303524/      43360/          0/      60442
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.001000500/  0.000142929/  0.000000000/  0.001000500     134548/      19221/          0/      33844
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.001001200/  0.000143029/  0.000000000/  0.001001200      49997/       7142/          0/      10000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=31152)
(result1=31152)
(result3=31152)
(result4=31152)
(result5=31152)
(result6=31152)
(result8=31152)
(result9=31152)
(result10=31152)
(result11=31095)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
    (data10_def=00000000)
    (data11_def=00000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=02376C10)
    (data1_def=02376C10)
    (data2_def=02376C10)
    (data3_def=02376C10)
    (data4_def=02376C10)
    (data5_def=02376C10)
    (data8_def=02376C10)
    (data9_def=02376C10)
    (data10_def=02376C10)
    (data11_def=02376C10)
  linearSearch(*array_shuffle1, search_predicate);
    (data=02376C10)
    (data1=02376C10)
    (data2=02376C10)
    (data3=02376C10)
    (data4=02376C10)
    (data5=02376C10)
    (data8=02376C10)
    (data9=02376C10)
    (data10=02376C10)
    (data11=02376C10)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=02376C10)
    (data1_val=02376C10)
    (data2_val=02376C10)
    (data3_val=02376C10)
    (data4_val=02376C10)
    (data5_val=02376C10)
    (data8_val=02376C10)
    (data9_val=02376C10)
    (data10_val=02376C10)
    (data11_val=02376C10)
target=0, linearSearch=[0, 2342]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=023543E0)
    (data1_def=023543E0)
    (data2_def=023543E0)
    (data3_def=023543E0)
    (data4_def=023543E0)
    (data5_def=023543E0)
    (data8_def=023543E0)
    (data9_def=023543E0)
    (data10_def=023543E0)
    (data11_def=023543E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=023543E0)
    (data1=023543E0)
    (data2=023543E0)
    (data3=023543E0)
    (data4=023543E0)
    (data5=023543E0)
    (data8=023543E0)
    (data9=023543E0)
    (data10=023543E0)
    (data11=023543E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=023543E0)
    (data1_val=023543E0)
    (data2_val=023543E0)
    (data3_val=023543E0)
    (data4_val=023543E0)
    (data5_val=023543E0)
    (data8_val=023543E0)
    (data9_val=023543E0)
    (data10_val=023543E0)
    (data11_val=023543E0)
target=2, linearSearch=[2, 575]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=0235CE50)
    (data1_def=0235CE50)
    (data2_def=0235CE50)
    (data3_def=0235CE50)
    (data4_def=0235CE50)
    (data5_def=0235CE50)
    (data8_def=0235CE50)
    (data9_def=0235CE50)
    (data10_def=0235CE50)
    (data11_def=0235CE50)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0235CE50)
    (data1=0235CE50)
    (data2=0235CE50)
    (data3=0235CE50)
    (data4=0235CE50)
    (data5=0235CE50)
    (data8=0235CE50)
    (data9=0235CE50)
    (data10=0235CE50)
    (data11=0235CE50)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0235CE50)
    (data1_val=0235CE50)
    (data2_val=0235CE50)
    (data3_val=0235CE50)
    (data4_val=0235CE50)
    (data5_val=0235CE50)
    (data8_val=0235CE50)
    (data9_val=0235CE50)
    (data10_val=0235CE50)
    (data11_val=0235CE50)
target=6, linearSearch=[6, 1018]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=023741E0)
    (data1_def=023741E0)
    (data2_def=023741E0)
    (data3_def=023741E0)
    (data4_def=023741E0)
    (data5_def=023741E0)
    (data8_def=023741E0)
    (data9_def=023741E0)
    (data10_def=023741E0)
    (data11_def=023741E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=023741E0)
    (data1=023741E0)
    (data2=023741E0)
    (data3=023741E0)
    (data4=023741E0)
    (data5=023741E0)
    (data8=023741E0)
    (data9=023741E0)
    (data10=023741E0)
    (data11=023741E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=023741E0)
    (data1_val=023741E0)
    (data2_val=023741E0)
    (data3_val=023741E0)
    (data4_val=023741E0)
    (data5_val=023741E0)
    (data8_val=023741E0)
    (data9_val=023741E0)
    (data10_val=023741E0)
    (data11_val=023741E0)
target=14, linearSearch=[14, 2207]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=02367620)
    (data1_def=02367620)
    (data2_def=02367620)
    (data3_def=02367620)
    (data4_def=02367620)
    (data5_def=02367620)
    (data8_def=02367620)
    (data9_def=02367620)
    (data10_def=02367620)
    (data11_def=02367620)
  linearSearch(*array_shuffle1, search_predicate);
    (data=02367620)
    (data1=02367620)
    (data2=02367620)
    (data3=02367620)
    (data4=02367620)
    (data5=02367620)
    (data8=02367620)
    (data9=02367620)
    (data10=02367620)
    (data11=02367620)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=02367620)
    (data1_val=02367620)
    (data2_val=02367620)
    (data3_val=02367620)
    (data4_val=02367620)
    (data5_val=02367620)
    (data8_val=02367620)
    (data9_val=02367620)
    (data10_val=02367620)
    (data11_val=02367620)
target=30, linearSearch=[30, 1555]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=0235C2C0)
    (data1_def=0235C2C0)
    (data2_def=0235C2C0)
    (data3_def=0235C2C0)
    (data4_def=0235C2C0)
    (data5_def=0235C2C0)
    (data8_def=0235C2C0)
    (data9_def=0235C2C0)
    (data10_def=0235C2C0)
    (data11_def=0235C2C0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0235C2C0)
    (data1=0235C2C0)
    (data2=0235C2C0)
    (data3=0235C2C0)
    (data4=0235C2C0)
    (data5=0235C2C0)
    (data8=0235C2C0)
    (data9=0235C2C0)
    (data10=0235C2C0)
    (data11=0235C2C0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0235C2C0)
    (data1_val=0235C2C0)
    (data2_val=0235C2C0)
    (data3_val=0235C2C0)
    (data4_val=0235C2C0)
    (data5_val=0235C2C0)
    (data8_val=0235C2C0)
    (data9_val=0235C2C0)
    (data10_val=0235C2C0)
    (data11_val=0235C2C0)
target=62, linearSearch=[62, 981]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=02362300)
    (data1_def=02362300)
    (data2_def=02362300)
    (data3_def=02362300)
    (data4_def=02362300)
    (data5_def=02362300)
    (data8_def=02362300)
    (data9_def=02362300)
    (data10_def=02362300)
    (data11_def=02362300)
  linearSearch(*array_shuffle1, search_predicate);
    (data=02362300)
    (data1=02362300)
    (data2=02362300)
    (data3=02362300)
    (data4=02362300)
    (data5=02362300)
    (data8=02362300)
    (data9=02362300)
    (data10=02362300)
    (data11=02362300)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=02362300)
    (data1_val=02362300)
    (data2_val=02362300)
    (data3_val=02362300)
    (data4_val=02362300)
    (data5_val=02362300)
    (data8_val=02362300)
    (data9_val=02362300)
    (data10_val=02362300)
    (data11_val=02362300)
target=126, linearSearch=[126, 1289]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=023E8540)
    (data1_def=023E8540)
    (data2_def=023E8540)
    (data3_def=023E8540)
    (data4_def=023E8540)
    (data5_def=023E8540)
    (data8_def=023E8540)
    (data9_def=023E8540)
    (data10_def=023E8540)
    (data11_def=023E8540)
  linearSearch(*array_shuffle1, search_predicate);
    (data=023E8540)
    (data1=023E8540)
    (data2=023E8540)
    (data3=023E8540)
    (data4=023E8540)
    (data5=023E8540)
    (data8=023E8540)
    (data9=023E8540)
    (data10=023E8540)
    (data11=023E8540)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=023E8540)
    (data1_val=023E8540)
    (data2_val=023E8540)
    (data3_val=023E8540)
    (data4_val=023E8540)
    (data5_val=023E8540)
    (data8_val=023E8540)
    (data9_val=023E8540)
    (data10_val=023E8540)
    (data11_val=023E8540)
target=254, linearSearch=[254, 8157]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
   (data10_def=00000000)
    (data11_def=00000000)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=02349030)
    (data1_def=02349030)
    (data2_def=02349030)
    (data3_def=02349030)
    (data4_def=02349030)
    (data5_def=02349030)
    (data8_def=02349030)
    (data9_def=02349030)
   (data10_def=02349030)
    (data11_def=02349030)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=02349030)
    (data1=02349030)
    (data2=02349030)
    (data3=02349030)
    (data4=02349030)
    (data5=02349030)
    (data8=02349030)
    (data9=02349030)
    (data10=02349030)
    (data11=02349030)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=02349030)
    (data1_val=02349030)
    (data2_val=02349030)
    (data3_val=02349030)
    (data4_val=02349030)
    (data5_val=02349030)
    (data8_val=02349030)
    (data9_val=02349030)
    (data10_val=02349030)
    (data11_val=02349030)
target=0, binarySearch=[0, 2342]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=02349210)
    (data1_def=02349210)
    (data2_def=02349210)
    (data3_def=02349210)
    (data4_def=02349210)
    (data5_def=02349210)
    (data8_def=02349210)
    (data9_def=02349210)
   (data10_def=02349210)
    (data11_def=02349210)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=02349210)
    (data1=02349210)
    (data2=02349210)
    (data3=02349210)
    (data4=02349210)
    (data5=02349210)
    (data8=02349210)
    (data9=02349210)
    (data10=02349210)
    (data11=02349210)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=02349210)
    (data1_val=02349210)
    (data2_val=02349210)
    (data3_val=02349210)
    (data4_val=02349210)
    (data5_val=02349210)
    (data8_val=02349210)
    (data9_val=02349210)
    (data10_val=02349210)
    (data11_val=02349210)
target=2, binarySearch=[2, 6831]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=023495D0)
    (data1_def=023495D0)
    (data2_def=023495D0)
    (data3_def=023495D0)
    (data4_def=023495D0)
    (data5_def=023495D0)
    (data8_def=023495D0)
    (data9_def=023495D0)
   (data10_def=023495D0)
    (data11_def=023495D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=023495D0)
    (data1=023495D0)
    (data2=023495D0)
    (data3=023495D0)
    (data4=023495D0)
    (data5=023495D0)
    (data8=023495D0)
    (data9=023495D0)
    (data10=023495D0)
    (data11=023495D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=023495D0)
    (data1_val=023495D0)
    (data2_val=023495D0)
    (data3_val=023495D0)
    (data4_val=023495D0)
    (data5_val=023495D0)
    (data8_val=023495D0)
    (data9_val=023495D0)
    (data10_val=023495D0)
    (data11_val=023495D0)
target=6, binarySearch=[6, 1018]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=02349D50)
    (data1_def=02349D50)
    (data2_def=02349D50)
    (data3_def=02349D50)
    (data4_def=02349D50)
    (data5_def=02349D50)
    (data8_def=02349D50)
    (data9_def=02349D50)
   (data10_def=02349D50)
    (data11_def=02349D50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=02349D50)
    (data1=02349D50)
    (data2=02349D50)
    (data3=02349D50)
    (data4=02349D50)
    (data5=02349D50)
    (data8=02349D50)
    (data9=02349D50)
    (data10=02349D50)
    (data11=02349D50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=02349D50)
    (data1_val=02349D50)
    (data2_val=02349D50)
    (data3_val=02349D50)
    (data4_val=02349D50)
    (data5_val=02349D50)
    (data8_val=02349D50)
    (data9_val=02349D50)
    (data10_val=02349D50)
    (data11_val=02349D50)
target=14, binarySearch=[14, 4706]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=0234AC50)
    (data1_def=0234AC50)
    (data2_def=0234AC50)
    (data3_def=0234AC50)
    (data4_def=0234AC50)
    (data5_def=0234AC50)
    (data8_def=0234AC50)
    (data9_def=0234AC50)
   (data10_def=0234AC50)
    (data11_def=0234AC50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0234AC50)
    (data1=0234AC50)
    (data2=0234AC50)
    (data3=0234AC50)
    (data4=0234AC50)
    (data5=0234AC50)
    (data8=0234AC50)
    (data9=0234AC50)
    (data10=0234AC50)
    (data11=0234AC50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0234AC50)
    (data1_val=0234AC50)
    (data2_val=0234AC50)
    (data3_val=0234AC50)
    (data4_val=0234AC50)
    (data5_val=0234AC50)
    (data8_val=0234AC50)
    (data9_val=0234AC50)
    (data10_val=0234AC50)
    (data11_val=0234AC50)
target=30, binarySearch=[30, 5065]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=0234CA50)
    (data1_def=0234CA50)
    (data2_def=0234CA50)
    (data3_def=0234CA50)
    (data4_def=0234CA50)
    (data5_def=0234CA50)
    (data8_def=0234CA50)
    (data9_def=0234CA50)
   (data10_def=0234CA50)
    (data11_def=0234CA50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0234CA50)
    (data1=0234CA50)
    (data2=0234CA50)
    (data3=0234CA50)
    (data4=0234CA50)
    (data5=0234CA50)
    (data8=0234CA50)
    (data9=0234CA50)
    (data10=0234CA50)
    (data11=0234CA50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0234CA50)
    (data1_val=0234CA50)
    (data2_val=0234CA50)
    (data3_val=0234CA50)
    (data4_val=0234CA50)
    (data5_val=0234CA50)
    (data8_val=0234CA50)
    (data9_val=0234CA50)
    (data10_val=0234CA50)
    (data11_val=0234CA50)
target=62, binarySearch=[62, 9221]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=02350650)
    (data1_def=02350650)
    (data2_def=02350650)
    (data3_def=02350650)
    (data4_def=02350650)
    (data5_def=02350650)
    (data8_def=02350650)
    (data9_def=02350650)
   (data10_def=02350650)
    (data11_def=02350650)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=02350650)
    (data1=02350650)
    (data2=02350650)
    (data3=02350650)
    (data4=02350650)
    (data5=02350650)
    (data8=02350650)
    (data9=02350650)
    (data10=02350650)
    (data11=02350650)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=02350650)
    (data1_val=02350650)
    (data2_val=02350650)
    (data3_val=02350650)
    (data4_val=02350650)
    (data5_val=02350650)
    (data8_val=02350650)
    (data9_val=02350650)
    (data10_val=02350650)
    (data11_val=02350650)
target=126, binarySearch=[126, 1289]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=02357E50)
    (data1_def=02357E50)
    (data2_def=02357E50)
    (data3_def=02357E50)
    (data4_def=02357E50)
    (data5_def=02357E50)
    (data8_def=02357E50)
    (data9_def=02357E50)
   (data10_def=02357E50)
    (data11_def=02357E50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=02357E50)
    (data1=02357E50)
    (data2=02357E50)
    (data3=02357E50)
    (data4=02357E50)
    (data5=02357E50)
    (data8=02357E50)
    (data9=02357E50)
    (data10=02357E50)
    (data11=02357E50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=02357E50)
    (data1_val=02357E50)
    (data2_val=02357E50)
    (data3_val=02357E50)
    (data4_val=02357E50)
    (data5_val=02357E50)
    (data8_val=02357E50)
    (data9_val=02357E50)
    (data10_val=02357E50)
    (data11_val=02357E50)
target=254, binarySearch=[254, 8763]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=6.080790700 sec.
