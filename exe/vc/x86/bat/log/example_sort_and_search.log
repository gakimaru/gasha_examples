============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=4951 / record(s)=10000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=5002 / record(s)=10000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=4984 / record(s)=10000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=10000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=3333 / record(s)=10000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=10000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=4976 / record(s)=10000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.003002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003002600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.003003000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.007006800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.019018200 sec.
* Average time     = 0.002716886 sec.
* Min time         = 0.001000900 sec.
* Max time         = 0.007006800 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.003003000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.003002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.003002300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.015015200 sec.
* Average time     = 0.002145029 sec.
* Min time         = 0.001001200 sec.
* Max time         = 0.003003000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000997600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002002700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.007002600 sec.
* Average time     = 0.001000371 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002002700 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.003002900 sec.
* Average time     = 0.000428986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001400 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.003002900 sec.
* Average time     = 0.000428986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001100 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002000800 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001500 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000987100 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.007993300 sec.
* Average time     = 0.001141900 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002001800 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.232220000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.232221100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.229218500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.267254300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.068064800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.248236400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 1.277215100 sec.
* Average time     = 0.182459300 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.267254300 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.178171300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.178171300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.178171600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.253241700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.229217900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 1.016973800 sec.
* Average time     = 0.145281971 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.253241700 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.073067800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.078074500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.067063900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.092088000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.036034700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.089084700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.435413600 sec.
* Average time     = 0.062201943 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.092088000 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.003002700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1922616 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003003000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1902755 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.003002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1895908 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=494802 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1474414 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=514605 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.003002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1903279 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.015014100 sec.
* Average time     = 0.002144871 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.003003000 sec.
* Total Swapped    =  10108379 count(s)
* Average  Swapped =   1444054 count(s)
* Min Swapped      =    494802 count(s)
* Max Swapped      =   1922616 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57500 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57587 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57584 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=18345 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=7303 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=58823 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.005005100 sec.
* Average time     = 0.000715014 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =    257142 count(s)
* Average  Swapped =     36734 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     58823 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.156149600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.122116400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.121115300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.253241900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.189180400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 0.841803600 sec.
* Average time     = 0.120257657 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.253241900 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33719 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33677 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33444 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=36402 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.005005000 sec.
* Average time     = 0.000715000 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =    152242 count(s)
* Average  Swapped =     21748 count(s)
* Min Swapped      =      3333 count(s)
* Max Swapped      =     36402 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.122116100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.122116400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9995 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.122116200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.121115300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.121115500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.121115500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.121115000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9989 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.850810000 sec.
* Average time     = 0.121544286 sec.
* Min time         = 0.121115000 sec.
* Max time         = 0.122116400 sec.
* Total Swapped    =     48300 count(s)
* Average  Swapped =      6900 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129635 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129583 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129778 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=218680 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=116627 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=213143 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002001500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=123006 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.008006500 sec.
* Average time     = 0.001143786 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002001500 sec.
* Total Swapped    =   1060452 count(s)
* Average  Swapped =    151493 count(s)
* Min Swapped      =    116627 count(s)
* Max Swapped      =    218680 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.116110800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9985 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.116110600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9987 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.113107600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9983 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.245233500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.187178300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9994 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.778741700 sec.
* Average time     = 0.111248814 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.245233500 sec.
* Total Swapped    =     59947 count(s)
* Average  Swapped =      8563 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48473 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48925 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48799 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=37222 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=5156 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000996500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49469 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.005000600 sec.
* Average time     = 0.000714371 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =    238044 count(s)
* Average  Swapped =     34006 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     49469 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.073069800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58291 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.072068700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58193 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.071067400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58188 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.156148400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=60442 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.118111700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58404 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.490466000 sec.
* Average time     = 0.070066571 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.156148400 sec.
* Total Swapped    =    303524 count(s)
* Average  Swapped =     43360 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     60442 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31152 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31250 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31256 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=6022 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1024 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33844 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.001000900 sec.
* Average time     = 0.000142986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000900 sec.
* Total Swapped    =    134548 count(s)
* Average  Swapped =     19221 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     33844 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9996 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9998 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.001001200 sec.
* Average time     = 0.000143029 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =     49997 count(s)
* Average  Swapped =      7142 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     10000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 10000 Count(s)
Total Array size   = 800000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.019018200/  0.002716886/  0.001000900/  0.007006800
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.015015200/  0.002145029/  0.001001200/  0.003003000
- std::sort(inline-func):   0.007002600/  0.001000371/  0.000000000/  0.002002700
- std::sort(functor):       0.003002900/  0.000428986/  0.000000000/  0.001001400
- std::sort(lambda):        0.003002900/  0.000428986/  0.000000000/  0.001001100
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.007993300/  0.001141900/  0.000000000/  0.002001800
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           1.277215100/  0.182459300/  0.000000000/  0.267254300  162016591/   23145227/          0/   49985001
- Shaker sort<S>:           1.016973800/  0.145281971/  0.000000000/  0.253241700  162016591/   23145227/          0/   49985001
- Odd-Even sort<S>:         0.435413600/  0.062201943/  0.000000000/  0.092088000  162016591/   23145227/          0/   49985001
- Shear sort:               0.015014100/  0.002144871/  0.000000000/  0.003003000   10108379/    1444054/     494802/    1922616
- Comb sort:                0.005005100/  0.000715014/  0.000000000/  0.001001200     257142/      36734/          0/      58823
- Gnome sort<S>:            0.841803600/  0.120257657/  0.000000000/  0.253241900  162016591/   23145227/          0/   49985001
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.005005000/  0.000715000/  0.000000000/  0.001001200     152242/      21748/       3333/      36402
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.850810000/  0.121544286/  0.121115000/  0.122116400      48300/       6900/          0/       9995
- Heap sort:                0.008006500/  0.001143786/  0.000000000/  0.002001500    1060452/     151493/     116627/     218680
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.778741700/  0.111248814/  0.000000000/  0.245233500      59947/       8563/          0/       9999
- Shell sort:               0.005000600/  0.000714371/  0.000000000/  0.001001200     238044/      34006/          0/      49469
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.490466000/  0.070066571/  0.000000000/  0.156148400     303524/      43360/          0/      60442
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.001000900/  0.000142986/  0.000000000/  0.001000900     134548/      19221/          0/      33844
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.001001200/  0.000143029/  0.000000000/  0.001001200      49997/       7142/          0/      10000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=31152)
(result1=31152)
(result3=31152)
(result4=31152)
(result5=31152)
(result6=31152)
(result8=31152)
(result9=31152)
(result10=31152)
(result11=31095)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
    (data10_def=00000000)
    (data11_def=00000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=008E1C10)
    (data1_def=008E1C10)
    (data2_def=008E1C10)
    (data3_def=008E1C10)
    (data4_def=008E1C10)
    (data5_def=008E1C10)
    (data8_def=008E1C10)
    (data9_def=008E1C10)
    (data10_def=008E1C10)
    (data11_def=008E1C10)
  linearSearch(*array_shuffle1, search_predicate);
    (data=008E1C10)
    (data1=008E1C10)
    (data2=008E1C10)
    (data3=008E1C10)
    (data4=008E1C10)
    (data5=008E1C10)
    (data8=008E1C10)
    (data9=008E1C10)
    (data10=008E1C10)
    (data11=008E1C10)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=008E1C10)
    (data1_val=008E1C10)
    (data2_val=008E1C10)
    (data3_val=008E1C10)
    (data4_val=008E1C10)
    (data5_val=008E1C10)
    (data8_val=008E1C10)
    (data9_val=008E1C10)
    (data10_val=008E1C10)
    (data11_val=008E1C10)
target=0, linearSearch=[0, 2342]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=008BF3E0)
    (data1_def=008BF3E0)
    (data2_def=008BF3E0)
    (data3_def=008BF3E0)
    (data4_def=008BF3E0)
    (data5_def=008BF3E0)
    (data8_def=008BF3E0)
    (data9_def=008BF3E0)
    (data10_def=008BF3E0)
    (data11_def=008BF3E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=008BF3E0)
    (data1=008BF3E0)
    (data2=008BF3E0)
    (data3=008BF3E0)
    (data4=008BF3E0)
    (data5=008BF3E0)
    (data8=008BF3E0)
    (data9=008BF3E0)
    (data10=008BF3E0)
    (data11=008BF3E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=008BF3E0)
    (data1_val=008BF3E0)
    (data2_val=008BF3E0)
    (data3_val=008BF3E0)
    (data4_val=008BF3E0)
    (data5_val=008BF3E0)
    (data8_val=008BF3E0)
    (data9_val=008BF3E0)
    (data10_val=008BF3E0)
    (data11_val=008BF3E0)
target=2, linearSearch=[2, 575]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=008C7E50)
    (data1_def=008C7E50)
    (data2_def=008C7E50)
    (data3_def=008C7E50)
    (data4_def=008C7E50)
    (data5_def=008C7E50)
    (data8_def=008C7E50)
    (data9_def=008C7E50)
    (data10_def=008C7E50)
    (data11_def=008C7E50)
  linearSearch(*array_shuffle1, search_predicate);
    (data=008C7E50)
    (data1=008C7E50)
    (data2=008C7E50)
    (data3=008C7E50)
    (data4=008C7E50)
    (data5=008C7E50)
    (data8=008C7E50)
    (data9=008C7E50)
    (data10=008C7E50)
    (data11=008C7E50)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=008C7E50)
    (data1_val=008C7E50)
    (data2_val=008C7E50)
    (data3_val=008C7E50)
    (data4_val=008C7E50)
    (data5_val=008C7E50)
    (data8_val=008C7E50)
    (data9_val=008C7E50)
    (data10_val=008C7E50)
    (data11_val=008C7E50)
target=6, linearSearch=[6, 1018]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=008DF1E0)
    (data1_def=008DF1E0)
    (data2_def=008DF1E0)
    (data3_def=008DF1E0)
    (data4_def=008DF1E0)
    (data5_def=008DF1E0)
    (data8_def=008DF1E0)
    (data9_def=008DF1E0)
    (data10_def=008DF1E0)
    (data11_def=008DF1E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=008DF1E0)
    (data1=008DF1E0)
    (data2=008DF1E0)
    (data3=008DF1E0)
    (data4=008DF1E0)
    (data5=008DF1E0)
    (data8=008DF1E0)
    (data9=008DF1E0)
    (data10=008DF1E0)
    (data11=008DF1E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=008DF1E0)
    (data1_val=008DF1E0)
    (data2_val=008DF1E0)
    (data3_val=008DF1E0)
    (data4_val=008DF1E0)
    (data5_val=008DF1E0)
    (data8_val=008DF1E0)
    (data9_val=008DF1E0)
    (data10_val=008DF1E0)
    (data11_val=008DF1E0)
target=14, linearSearch=[14, 2207]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=008D2620)
    (data1_def=008D2620)
    (data2_def=008D2620)
    (data3_def=008D2620)
    (data4_def=008D2620)
    (data5_def=008D2620)
    (data8_def=008D2620)
    (data9_def=008D2620)
    (data10_def=008D2620)
    (data11_def=008D2620)
  linearSearch(*array_shuffle1, search_predicate);
    (data=008D2620)
    (data1=008D2620)
    (data2=008D2620)
    (data3=008D2620)
    (data4=008D2620)
    (data5=008D2620)
    (data8=008D2620)
    (data9=008D2620)
    (data10=008D2620)
    (data11=008D2620)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=008D2620)
    (data1_val=008D2620)
    (data2_val=008D2620)
    (data3_val=008D2620)
    (data4_val=008D2620)
    (data5_val=008D2620)
    (data8_val=008D2620)
    (data9_val=008D2620)
    (data10_val=008D2620)
    (data11_val=008D2620)
target=30, linearSearch=[30, 1555]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=008C72C0)
    (data1_def=008C72C0)
    (data2_def=008C72C0)
    (data3_def=008C72C0)
    (data4_def=008C72C0)
    (data5_def=008C72C0)
    (data8_def=008C72C0)
    (data9_def=008C72C0)
    (data10_def=008C72C0)
    (data11_def=008C72C0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=008C72C0)
    (data1=008C72C0)
    (data2=008C72C0)
    (data3=008C72C0)
    (data4=008C72C0)
    (data5=008C72C0)
    (data8=008C72C0)
    (data9=008C72C0)
    (data10=008C72C0)
    (data11=008C72C0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=008C72C0)
    (data1_val=008C72C0)
    (data2_val=008C72C0)
    (data3_val=008C72C0)
    (data4_val=008C72C0)
    (data5_val=008C72C0)
    (data8_val=008C72C0)
    (data9_val=008C72C0)
    (data10_val=008C72C0)
    (data11_val=008C72C0)
target=62, linearSearch=[62, 981]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=008CD300)
    (data1_def=008CD300)
    (data2_def=008CD300)
    (data3_def=008CD300)
    (data4_def=008CD300)
    (data5_def=008CD300)
    (data8_def=008CD300)
    (data9_def=008CD300)
    (data10_def=008CD300)
    (data11_def=008CD300)
  linearSearch(*array_shuffle1, search_predicate);
    (data=008CD300)
    (data1=008CD300)
    (data2=008CD300)
    (data3=008CD300)
    (data4=008CD300)
    (data5=008CD300)
    (data8=008CD300)
    (data9=008CD300)
    (data10=008CD300)
    (data11=008CD300)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=008CD300)
    (data1_val=008CD300)
    (data2_val=008CD300)
    (data3_val=008CD300)
    (data4_val=008CD300)
    (data5_val=008CD300)
    (data8_val=008CD300)
    (data9_val=008CD300)
    (data10_val=008CD300)
    (data11_val=008CD300)
target=126, linearSearch=[126, 1289]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=00953540)
    (data1_def=00953540)
    (data2_def=00953540)
    (data3_def=00953540)
    (data4_def=00953540)
    (data5_def=00953540)
    (data8_def=00953540)
    (data9_def=00953540)
    (data10_def=00953540)
    (data11_def=00953540)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00953540)
    (data1=00953540)
    (data2=00953540)
    (data3=00953540)
    (data4=00953540)
    (data5=00953540)
    (data8=00953540)
    (data9=00953540)
    (data10=00953540)
    (data11=00953540)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00953540)
    (data1_val=00953540)
    (data2_val=00953540)
    (data3_val=00953540)
    (data4_val=00953540)
    (data5_val=00953540)
    (data8_val=00953540)
    (data9_val=00953540)
    (data10_val=00953540)
    (data11_val=00953540)
target=254, linearSearch=[254, 8157]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
   (data10_def=00000000)
    (data11_def=00000000)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=008B4030)
    (data1_def=008B4030)
    (data2_def=008B4030)
    (data3_def=008B4030)
    (data4_def=008B4030)
    (data5_def=008B4030)
    (data8_def=008B4030)
    (data9_def=008B4030)
   (data10_def=008B4030)
    (data11_def=008B4030)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=008B4030)
    (data1=008B4030)
    (data2=008B4030)
    (data3=008B4030)
    (data4=008B4030)
    (data5=008B4030)
    (data8=008B4030)
    (data9=008B4030)
    (data10=008B4030)
    (data11=008B4030)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=008B4030)
    (data1_val=008B4030)
    (data2_val=008B4030)
    (data3_val=008B4030)
    (data4_val=008B4030)
    (data5_val=008B4030)
    (data8_val=008B4030)
    (data9_val=008B4030)
    (data10_val=008B4030)
    (data11_val=008B4030)
target=0, binarySearch=[0, 2342]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=008B4210)
    (data1_def=008B4210)
    (data2_def=008B4210)
    (data3_def=008B4210)
    (data4_def=008B4210)
    (data5_def=008B4210)
    (data8_def=008B4210)
    (data9_def=008B4210)
   (data10_def=008B4210)
    (data11_def=008B4210)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=008B4210)
    (data1=008B4210)
    (data2=008B4210)
    (data3=008B4210)
    (data4=008B4210)
    (data5=008B4210)
    (data8=008B4210)
    (data9=008B4210)
    (data10=008B4210)
    (data11=008B4210)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=008B4210)
    (data1_val=008B4210)
    (data2_val=008B4210)
    (data3_val=008B4210)
    (data4_val=008B4210)
    (data5_val=008B4210)
    (data8_val=008B4210)
    (data9_val=008B4210)
    (data10_val=008B4210)
    (data11_val=008B4210)
target=2, binarySearch=[2, 6831]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=008B45D0)
    (data1_def=008B45D0)
    (data2_def=008B45D0)
    (data3_def=008B45D0)
    (data4_def=008B45D0)
    (data5_def=008B45D0)
    (data8_def=008B45D0)
    (data9_def=008B45D0)
   (data10_def=008B45D0)
    (data11_def=008B45D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=008B45D0)
    (data1=008B45D0)
    (data2=008B45D0)
    (data3=008B45D0)
    (data4=008B45D0)
    (data5=008B45D0)
    (data8=008B45D0)
    (data9=008B45D0)
    (data10=008B45D0)
    (data11=008B45D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=008B45D0)
    (data1_val=008B45D0)
    (data2_val=008B45D0)
    (data3_val=008B45D0)
    (data4_val=008B45D0)
    (data5_val=008B45D0)
    (data8_val=008B45D0)
    (data9_val=008B45D0)
    (data10_val=008B45D0)
    (data11_val=008B45D0)
target=6, binarySearch=[6, 1018]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=008B4D50)
    (data1_def=008B4D50)
    (data2_def=008B4D50)
    (data3_def=008B4D50)
    (data4_def=008B4D50)
    (data5_def=008B4D50)
    (data8_def=008B4D50)
    (data9_def=008B4D50)
   (data10_def=008B4D50)
    (data11_def=008B4D50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=008B4D50)
    (data1=008B4D50)
    (data2=008B4D50)
    (data3=008B4D50)
    (data4=008B4D50)
    (data5=008B4D50)
    (data8=008B4D50)
    (data9=008B4D50)
    (data10=008B4D50)
    (data11=008B4D50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=008B4D50)
    (data1_val=008B4D50)
    (data2_val=008B4D50)
    (data3_val=008B4D50)
    (data4_val=008B4D50)
    (data5_val=008B4D50)
    (data8_val=008B4D50)
    (data9_val=008B4D50)
    (data10_val=008B4D50)
    (data11_val=008B4D50)
target=14, binarySearch=[14, 4706]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=008B5C50)
    (data1_def=008B5C50)
    (data2_def=008B5C50)
    (data3_def=008B5C50)
    (data4_def=008B5C50)
    (data5_def=008B5C50)
    (data8_def=008B5C50)
    (data9_def=008B5C50)
   (data10_def=008B5C50)
    (data11_def=008B5C50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=008B5C50)
    (data1=008B5C50)
    (data2=008B5C50)
    (data3=008B5C50)
    (data4=008B5C50)
    (data5=008B5C50)
    (data8=008B5C50)
    (data9=008B5C50)
    (data10=008B5C50)
    (data11=008B5C50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=008B5C50)
    (data1_val=008B5C50)
    (data2_val=008B5C50)
    (data3_val=008B5C50)
    (data4_val=008B5C50)
    (data5_val=008B5C50)
    (data8_val=008B5C50)
    (data9_val=008B5C50)
    (data10_val=008B5C50)
    (data11_val=008B5C50)
target=30, binarySearch=[30, 5065]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=008B7A50)
    (data1_def=008B7A50)
    (data2_def=008B7A50)
    (data3_def=008B7A50)
    (data4_def=008B7A50)
    (data5_def=008B7A50)
    (data8_def=008B7A50)
    (data9_def=008B7A50)
   (data10_def=008B7A50)
    (data11_def=008B7A50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=008B7A50)
    (data1=008B7A50)
    (data2=008B7A50)
    (data3=008B7A50)
    (data4=008B7A50)
    (data5=008B7A50)
    (data8=008B7A50)
    (data9=008B7A50)
    (data10=008B7A50)
    (data11=008B7A50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=008B7A50)
    (data1_val=008B7A50)
    (data2_val=008B7A50)
    (data3_val=008B7A50)
    (data4_val=008B7A50)
    (data5_val=008B7A50)
    (data8_val=008B7A50)
    (data9_val=008B7A50)
    (data10_val=008B7A50)
    (data11_val=008B7A50)
target=62, binarySearch=[62, 9221]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=008BB650)
    (data1_def=008BB650)
    (data2_def=008BB650)
    (data3_def=008BB650)
    (data4_def=008BB650)
    (data5_def=008BB650)
    (data8_def=008BB650)
    (data9_def=008BB650)
   (data10_def=008BB650)
    (data11_def=008BB650)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=008BB650)
    (data1=008BB650)
    (data2=008BB650)
    (data3=008BB650)
    (data4=008BB650)
    (data5=008BB650)
    (data8=008BB650)
    (data9=008BB650)
    (data10=008BB650)
    (data11=008BB650)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=008BB650)
    (data1_val=008BB650)
    (data2_val=008BB650)
    (data3_val=008BB650)
    (data4_val=008BB650)
    (data5_val=008BB650)
    (data8_val=008BB650)
    (data9_val=008BB650)
    (data10_val=008BB650)
    (data11_val=008BB650)
target=126, binarySearch=[126, 1289]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=008C2E50)
    (data1_def=008C2E50)
    (data2_def=008C2E50)
    (data3_def=008C2E50)
    (data4_def=008C2E50)
    (data5_def=008C2E50)
    (data8_def=008C2E50)
    (data9_def=008C2E50)
   (data10_def=008C2E50)
    (data11_def=008C2E50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=008C2E50)
    (data1=008C2E50)
    (data2=008C2E50)
    (data3=008C2E50)
    (data4=008C2E50)
    (data5=008C2E50)
    (data8=008C2E50)
    (data9=008C2E50)
    (data10=008C2E50)
    (data11=008C2E50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=008C2E50)
    (data1_val=008C2E50)
    (data2_val=008C2E50)
    (data3_val=008C2E50)
    (data4_val=008C2E50)
    (data5_val=008C2E50)
    (data8_val=008C2E50)
    (data9_val=008C2E50)
    (data10_val=008C2E50)
    (data11_val=008C2E50)
target=254, binarySearch=[254, 8763]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=5.854575200 sec.
