============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=4951 / record(s)=10000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=5002 / record(s)=10000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=4984 / record(s)=10000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=10000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=3333 / record(s)=10000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=10000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=4976 / record(s)=10000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.004000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003998200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.003002400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000999400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.003999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.017001200 sec.
* Average time     = 0.002428743 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.004000600 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.008000600 sec.
* Average time     = 0.001142943 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002000300 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.007001500 sec.
* Average time     = 0.001000214 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002000300 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.002000600 sec.
* Average time     = 0.000285800 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000900 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000999100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000999400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000998500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.004998800 sec.
* Average time     = 0.000714114 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001800 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002001500 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002004400 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000995600 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000999400 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.009001800 sec.
* Average time     = 0.001285971 sec.
* Min time         = 0.000995600 sec.
* Max time         = 0.002004400 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.271013000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.244015500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.242017300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.277017300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.068004000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.256014000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 1.358081100 sec.
* Average time     = 0.194011586 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.277017300 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.196010100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.198010400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.193013900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.302028000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001016900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.239986300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 1.130065600 sec.
* Average time     = 0.161437943 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.302028000 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.244009100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.221012800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.188010900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.297016500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.091005800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.236013700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 1.277068800 sec.
* Average time     = 0.182438400 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.297016500 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.009000100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1922616 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.008001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1902755 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.007000400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1895908 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=494802 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.007000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1474414 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=514605 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.006000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1903279 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.039002500 sec.
* Average time     = 0.005571786 sec.
* Min time         = 0.000999700 sec.
* Max time         = 0.009000100 sec.
* Total Swapped    =  10108379 count(s)
* Average  Swapped =   1444054 count(s)
* Min Swapped      =    494802 count(s)
* Max Swapped      =   1922616 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000999400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57500 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57587 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000999400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57584 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000999400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=18345 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=7303 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=58823 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.007999400 sec.
* Average time     = 0.001142771 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002000900 sec.
* Total Swapped    =    257142 count(s)
* Average  Swapped =     36734 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     58823 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.189010400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.128011700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.128003200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.267031300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.224032500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 0.936089100 sec.
* Average time     = 0.133727014 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.267031300 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33719 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33677 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000998600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33444 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000998000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=36402 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.004998000 sec.
* Average time     = 0.000714000 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000800 sec.
* Total Swapped    =    152242 count(s)
* Average  Swapped =     21748 count(s)
* Min Swapped      =      3333 count(s)
* Max Swapped      =     36402 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.125988300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.127009100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9995 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.127007000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.128004700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.124013100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.124026900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.125994200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9989 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.882043300 sec.
* Average time     = 0.126006186 sec.
* Min time         = 0.124013100 sec.
* Max time         = 0.128004700 sec.
* Total Swapped    =     48300 count(s)
* Average  Swapped =      6900 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129635 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001009300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129583 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001990700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129778 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=218680 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=116627 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000999400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=213143 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000998900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=123006 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.007999200 sec.
* Average time     = 0.001142743 sec.
* Min time         = 0.000998900 sec.
* Max time         = 0.001990700 sec.
* Total Swapped    =   1060452 count(s)
* Average  Swapped =    151493 count(s)
* Min Swapped      =    116627 count(s)
* Max Swapped      =    218680 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.129007300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9985 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.127008500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9987 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.156010300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9983 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.286039600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.214010500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9994 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.912076200 sec.
* Average time     = 0.130296600 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.286039600 sec.
* Total Swapped    =     59947 count(s)
* Average  Swapped =      8563 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001994700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48473 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001982200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48925 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002018700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48799 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000980700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=37222 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=5156 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001003800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49469 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.008980400 sec.
* Average time     = 0.001282914 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002018700 sec.
* Total Swapped    =    238044 count(s)
* Average  Swapped =     34006 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     49469 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.094003400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58291 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.077003400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58193 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.076003400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58188 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.167020900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=60442 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001008200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.138007000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58404 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.553046300 sec.
* Average time     = 0.079006614 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.167020900 sec.
* Total Swapped    =    303524 count(s)
* Average  Swapped =     43360 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     60442 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31152 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31250 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31256 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001002400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=6022 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1024 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33844 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.001002400 sec.
* Average time     = 0.000143200 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001002400 sec.
* Total Swapped    =    134548 count(s)
* Average  Swapped =     19221 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     33844 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9996 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001261300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9998 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.002261300 sec.
* Average time     = 0.000323043 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001261300 sec.
* Total Swapped    =     49997 count(s)
* Average  Swapped =      7142 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     10000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 10000 Count(s)
Total Array size   = 800000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.017001200/  0.002428743/  0.000000000/  0.004000600
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.008000600/  0.001142943/  0.000000000/  0.002000300
- std::sort(inline-func):   0.007001500/  0.001000214/  0.000000000/  0.002000300
- std::sort(functor):       0.002000600/  0.000285800/  0.000000000/  0.001000900
- std::sort(lambda):        0.004998800/  0.000714114/  0.000000000/  0.001001800
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.009001800/  0.001285971/  0.000995600/  0.002004400
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           1.358081100/  0.194011586/  0.000000000/  0.277017300  162016591/   23145227/          0/   49985001
- Shaker sort<S>:           1.130065600/  0.161437943/  0.000000000/  0.302028000  162016591/   23145227/          0/   49985001
- Odd-Even sort<S>:         1.277068800/  0.182438400/  0.000000000/  0.297016500  162016591/   23145227/          0/   49985001
- Shear sort:               0.039002500/  0.005571786/  0.000999700/  0.009000100   10108379/    1444054/     494802/    1922616
- Comb sort:                0.007999400/  0.001142771/  0.000000000/  0.002000900     257142/      36734/          0/      58823
- Gnome sort<S>:            0.936089100/  0.133727014/  0.000000000/  0.267031300  162016591/   23145227/          0/   49985001
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.004998000/  0.000714000/  0.000000000/  0.001000800     152242/      21748/       3333/      36402
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.882043300/  0.126006186/  0.124013100/  0.128004700      48300/       6900/          0/       9995
- Heap sort:                0.007999200/  0.001142743/  0.000998900/  0.001990700    1060452/     151493/     116627/     218680
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.912076200/  0.130296600/  0.000000000/  0.286039600      59947/       8563/          0/       9999
- Shell sort:               0.008980400/  0.001282914/  0.000000000/  0.002018700     238044/      34006/          0/      49469
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.553046300/  0.079006614/  0.000000000/  0.167020900     303524/      43360/          0/      60442
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.001002400/  0.000143200/  0.000000000/  0.001002400     134548/      19221/          0/      33844
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.002261300/  0.000323043/  0.000000000/  0.001261300      49997/       7142/          0/      10000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=31152)
(result1=31152)
(result3=31152)
(result4=31152)
(result5=31152)
(result6=31152)
(result8=31152)
(result9=31152)
(result10=31152)
(result11=31095)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
    (data10_def=00000000)
    (data11_def=00000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=00DDFC10)
    (data1_def=00DDFC10)
    (data2_def=00DDFC10)
    (data3_def=00DDFC10)
    (data4_def=00DDFC10)
    (data5_def=00DDFC10)
    (data8_def=00DDFC10)
    (data9_def=00DDFC10)
    (data10_def=00DDFC10)
    (data11_def=00DDFC10)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00DDFC10)
    (data1=00DDFC10)
    (data2=00DDFC10)
    (data3=00DDFC10)
    (data4=00DDFC10)
    (data5=00DDFC10)
    (data8=00DDFC10)
    (data9=00DDFC10)
    (data10=00DDFC10)
    (data11=00DDFC10)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00DDFC10)
    (data1_val=00DDFC10)
    (data2_val=00DDFC10)
    (data3_val=00DDFC10)
    (data4_val=00DDFC10)
    (data5_val=00DDFC10)
    (data8_val=00DDFC10)
    (data9_val=00DDFC10)
    (data10_val=00DDFC10)
    (data11_val=00DDFC10)
target=0, linearSearch=[0, 2342]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=00DBD3E0)
    (data1_def=00DBD3E0)
    (data2_def=00DBD3E0)
    (data3_def=00DBD3E0)
    (data4_def=00DBD3E0)
    (data5_def=00DBD3E0)
    (data8_def=00DBD3E0)
    (data9_def=00DBD3E0)
    (data10_def=00DBD3E0)
    (data11_def=00DBD3E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00DBD3E0)
    (data1=00DBD3E0)
    (data2=00DBD3E0)
    (data3=00DBD3E0)
    (data4=00DBD3E0)
    (data5=00DBD3E0)
    (data8=00DBD3E0)
    (data9=00DBD3E0)
    (data10=00DBD3E0)
    (data11=00DBD3E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00DBD3E0)
    (data1_val=00DBD3E0)
    (data2_val=00DBD3E0)
    (data3_val=00DBD3E0)
    (data4_val=00DBD3E0)
    (data5_val=00DBD3E0)
    (data8_val=00DBD3E0)
    (data9_val=00DBD3E0)
    (data10_val=00DBD3E0)
    (data11_val=00DBD3E0)
target=2, linearSearch=[2, 575]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=00DC5E50)
    (data1_def=00DC5E50)
    (data2_def=00DC5E50)
    (data3_def=00DC5E50)
    (data4_def=00DC5E50)
    (data5_def=00DC5E50)
    (data8_def=00DC5E50)
    (data9_def=00DC5E50)
    (data10_def=00DC5E50)
    (data11_def=00DC5E50)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00DC5E50)
    (data1=00DC5E50)
    (data2=00DC5E50)
    (data3=00DC5E50)
    (data4=00DC5E50)
    (data5=00DC5E50)
    (data8=00DC5E50)
    (data9=00DC5E50)
    (data10=00DC5E50)
    (data11=00DC5E50)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00DC5E50)
    (data1_val=00DC5E50)
    (data2_val=00DC5E50)
    (data3_val=00DC5E50)
    (data4_val=00DC5E50)
    (data5_val=00DC5E50)
    (data8_val=00DC5E50)
    (data9_val=00DC5E50)
    (data10_val=00DC5E50)
    (data11_val=00DC5E50)
target=6, linearSearch=[6, 1018]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=00DDD1E0)
    (data1_def=00DDD1E0)
    (data2_def=00DDD1E0)
    (data3_def=00DDD1E0)
    (data4_def=00DDD1E0)
    (data5_def=00DDD1E0)
    (data8_def=00DDD1E0)
    (data9_def=00DDD1E0)
    (data10_def=00DDD1E0)
    (data11_def=00DDD1E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00DDD1E0)
    (data1=00DDD1E0)
    (data2=00DDD1E0)
    (data3=00DDD1E0)
    (data4=00DDD1E0)
    (data5=00DDD1E0)
    (data8=00DDD1E0)
    (data9=00DDD1E0)
    (data10=00DDD1E0)
    (data11=00DDD1E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00DDD1E0)
    (data1_val=00DDD1E0)
    (data2_val=00DDD1E0)
    (data3_val=00DDD1E0)
    (data4_val=00DDD1E0)
    (data5_val=00DDD1E0)
    (data8_val=00DDD1E0)
    (data9_val=00DDD1E0)
    (data10_val=00DDD1E0)
    (data11_val=00DDD1E0)
target=14, linearSearch=[14, 2207]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=00DD0620)
    (data1_def=00DD0620)
    (data2_def=00DD0620)
    (data3_def=00DD0620)
    (data4_def=00DD0620)
    (data5_def=00DD0620)
    (data8_def=00DD0620)
    (data9_def=00DD0620)
    (data10_def=00DD0620)
    (data11_def=00DD0620)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00DD0620)
    (data1=00DD0620)
    (data2=00DD0620)
    (data3=00DD0620)
    (data4=00DD0620)
    (data5=00DD0620)
    (data8=00DD0620)
    (data9=00DD0620)
    (data10=00DD0620)
    (data11=00DD0620)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00DD0620)
    (data1_val=00DD0620)
    (data2_val=00DD0620)
    (data3_val=00DD0620)
    (data4_val=00DD0620)
    (data5_val=00DD0620)
    (data8_val=00DD0620)
    (data9_val=00DD0620)
    (data10_val=00DD0620)
    (data11_val=00DD0620)
target=30, linearSearch=[30, 1555]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=00DC52C0)
    (data1_def=00DC52C0)
    (data2_def=00DC52C0)
    (data3_def=00DC52C0)
    (data4_def=00DC52C0)
    (data5_def=00DC52C0)
    (data8_def=00DC52C0)
    (data9_def=00DC52C0)
    (data10_def=00DC52C0)
    (data11_def=00DC52C0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00DC52C0)
    (data1=00DC52C0)
    (data2=00DC52C0)
    (data3=00DC52C0)
    (data4=00DC52C0)
    (data5=00DC52C0)
    (data8=00DC52C0)
    (data9=00DC52C0)
    (data10=00DC52C0)
    (data11=00DC52C0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00DC52C0)
    (data1_val=00DC52C0)
    (data2_val=00DC52C0)
    (data3_val=00DC52C0)
    (data4_val=00DC52C0)
    (data5_val=00DC52C0)
    (data8_val=00DC52C0)
    (data9_val=00DC52C0)
    (data10_val=00DC52C0)
    (data11_val=00DC52C0)
target=62, linearSearch=[62, 981]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=00DCB300)
    (data1_def=00DCB300)
    (data2_def=00DCB300)
    (data3_def=00DCB300)
    (data4_def=00DCB300)
    (data5_def=00DCB300)
    (data8_def=00DCB300)
    (data9_def=00DCB300)
    (data10_def=00DCB300)
    (data11_def=00DCB300)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00DCB300)
    (data1=00DCB300)
    (data2=00DCB300)
    (data3=00DCB300)
    (data4=00DCB300)
    (data5=00DCB300)
    (data8=00DCB300)
    (data9=00DCB300)
    (data10=00DCB300)
    (data11=00DCB300)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00DCB300)
    (data1_val=00DCB300)
    (data2_val=00DCB300)
    (data3_val=00DCB300)
    (data4_val=00DCB300)
    (data5_val=00DCB300)
    (data8_val=00DCB300)
    (data9_val=00DCB300)
    (data10_val=00DCB300)
    (data11_val=00DCB300)
target=126, linearSearch=[126, 1289]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=00E51540)
    (data1_def=00E51540)
    (data2_def=00E51540)
    (data3_def=00E51540)
    (data4_def=00E51540)
    (data5_def=00E51540)
    (data8_def=00E51540)
    (data9_def=00E51540)
    (data10_def=00E51540)
    (data11_def=00E51540)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00E51540)
    (data1=00E51540)
    (data2=00E51540)
    (data3=00E51540)
    (data4=00E51540)
    (data5=00E51540)
    (data8=00E51540)
    (data9=00E51540)
    (data10=00E51540)
    (data11=00E51540)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00E51540)
    (data1_val=00E51540)
    (data2_val=00E51540)
    (data3_val=00E51540)
    (data4_val=00E51540)
    (data5_val=00E51540)
    (data8_val=00E51540)
    (data9_val=00E51540)
    (data10_val=00E51540)
    (data11_val=00E51540)
target=254, linearSearch=[254, 8157]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
   (data10_def=00000000)
    (data11_def=00000000)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=00DB2030)
    (data1_def=00DB2030)
    (data2_def=00DB2030)
    (data3_def=00DB2030)
    (data4_def=00DB2030)
    (data5_def=00DB2030)
    (data8_def=00DB2030)
    (data9_def=00DB2030)
   (data10_def=00DB2030)
    (data11_def=00DB2030)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00DB2030)
    (data1=00DB2030)
    (data2=00DB2030)
    (data3=00DB2030)
    (data4=00DB2030)
    (data5=00DB2030)
    (data8=00DB2030)
    (data9=00DB2030)
    (data10=00DB2030)
    (data11=00DB2030)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00DB2030)
    (data1_val=00DB2030)
    (data2_val=00DB2030)
    (data3_val=00DB2030)
    (data4_val=00DB2030)
    (data5_val=00DB2030)
    (data8_val=00DB2030)
    (data9_val=00DB2030)
    (data10_val=00DB2030)
    (data11_val=00DB2030)
target=0, binarySearch=[0, 2342]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=00DB2210)
    (data1_def=00DB2210)
    (data2_def=00DB2210)
    (data3_def=00DB2210)
    (data4_def=00DB2210)
    (data5_def=00DB2210)
    (data8_def=00DB2210)
    (data9_def=00DB2210)
   (data10_def=00DB2210)
    (data11_def=00DB2210)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00DB2210)
    (data1=00DB2210)
    (data2=00DB2210)
    (data3=00DB2210)
    (data4=00DB2210)
    (data5=00DB2210)
    (data8=00DB2210)
    (data9=00DB2210)
    (data10=00DB2210)
    (data11=00DB2210)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00DB2210)
    (data1_val=00DB2210)
    (data2_val=00DB2210)
    (data3_val=00DB2210)
    (data4_val=00DB2210)
    (data5_val=00DB2210)
    (data8_val=00DB2210)
    (data9_val=00DB2210)
    (data10_val=00DB2210)
    (data11_val=00DB2210)
target=2, binarySearch=[2, 6831]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=00DB25D0)
    (data1_def=00DB25D0)
    (data2_def=00DB25D0)
    (data3_def=00DB25D0)
    (data4_def=00DB25D0)
    (data5_def=00DB25D0)
    (data8_def=00DB25D0)
    (data9_def=00DB25D0)
   (data10_def=00DB25D0)
    (data11_def=00DB25D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00DB25D0)
    (data1=00DB25D0)
    (data2=00DB25D0)
    (data3=00DB25D0)
    (data4=00DB25D0)
    (data5=00DB25D0)
    (data8=00DB25D0)
    (data9=00DB25D0)
    (data10=00DB25D0)
    (data11=00DB25D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00DB25D0)
    (data1_val=00DB25D0)
    (data2_val=00DB25D0)
    (data3_val=00DB25D0)
    (data4_val=00DB25D0)
    (data5_val=00DB25D0)
    (data8_val=00DB25D0)
    (data9_val=00DB25D0)
    (data10_val=00DB25D0)
    (data11_val=00DB25D0)
target=6, binarySearch=[6, 1018]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=00DB2D50)
    (data1_def=00DB2D50)
    (data2_def=00DB2D50)
    (data3_def=00DB2D50)
    (data4_def=00DB2D50)
    (data5_def=00DB2D50)
    (data8_def=00DB2D50)
    (data9_def=00DB2D50)
   (data10_def=00DB2D50)
    (data11_def=00DB2D50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00DB2D50)
    (data1=00DB2D50)
    (data2=00DB2D50)
    (data3=00DB2D50)
    (data4=00DB2D50)
    (data5=00DB2D50)
    (data8=00DB2D50)
    (data9=00DB2D50)
    (data10=00DB2D50)
    (data11=00DB2D50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00DB2D50)
    (data1_val=00DB2D50)
    (data2_val=00DB2D50)
    (data3_val=00DB2D50)
    (data4_val=00DB2D50)
    (data5_val=00DB2D50)
    (data8_val=00DB2D50)
    (data9_val=00DB2D50)
    (data10_val=00DB2D50)
    (data11_val=00DB2D50)
target=14, binarySearch=[14, 4706]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=00DB3C50)
    (data1_def=00DB3C50)
    (data2_def=00DB3C50)
    (data3_def=00DB3C50)
    (data4_def=00DB3C50)
    (data5_def=00DB3C50)
    (data8_def=00DB3C50)
    (data9_def=00DB3C50)
   (data10_def=00DB3C50)
    (data11_def=00DB3C50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00DB3C50)
    (data1=00DB3C50)
    (data2=00DB3C50)
    (data3=00DB3C50)
    (data4=00DB3C50)
    (data5=00DB3C50)
    (data8=00DB3C50)
    (data9=00DB3C50)
    (data10=00DB3C50)
    (data11=00DB3C50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00DB3C50)
    (data1_val=00DB3C50)
    (data2_val=00DB3C50)
    (data3_val=00DB3C50)
    (data4_val=00DB3C50)
    (data5_val=00DB3C50)
    (data8_val=00DB3C50)
    (data9_val=00DB3C50)
    (data10_val=00DB3C50)
    (data11_val=00DB3C50)
target=30, binarySearch=[30, 5065]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=00DB5A50)
    (data1_def=00DB5A50)
    (data2_def=00DB5A50)
    (data3_def=00DB5A50)
    (data4_def=00DB5A50)
    (data5_def=00DB5A50)
    (data8_def=00DB5A50)
    (data9_def=00DB5A50)
   (data10_def=00DB5A50)
    (data11_def=00DB5A50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00DB5A50)
    (data1=00DB5A50)
    (data2=00DB5A50)
    (data3=00DB5A50)
    (data4=00DB5A50)
    (data5=00DB5A50)
    (data8=00DB5A50)
    (data9=00DB5A50)
    (data10=00DB5A50)
    (data11=00DB5A50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00DB5A50)
    (data1_val=00DB5A50)
    (data2_val=00DB5A50)
    (data3_val=00DB5A50)
    (data4_val=00DB5A50)
    (data5_val=00DB5A50)
    (data8_val=00DB5A50)
    (data9_val=00DB5A50)
    (data10_val=00DB5A50)
    (data11_val=00DB5A50)
target=62, binarySearch=[62, 9221]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=00DB9650)
    (data1_def=00DB9650)
    (data2_def=00DB9650)
    (data3_def=00DB9650)
    (data4_def=00DB9650)
    (data5_def=00DB9650)
    (data8_def=00DB9650)
    (data9_def=00DB9650)
   (data10_def=00DB9650)
    (data11_def=00DB9650)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00DB9650)
    (data1=00DB9650)
    (data2=00DB9650)
    (data3=00DB9650)
    (data4=00DB9650)
    (data5=00DB9650)
    (data8=00DB9650)
    (data9=00DB9650)
    (data10=00DB9650)
    (data11=00DB9650)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00DB9650)
    (data1_val=00DB9650)
    (data2_val=00DB9650)
    (data3_val=00DB9650)
    (data4_val=00DB9650)
    (data5_val=00DB9650)
    (data8_val=00DB9650)
    (data9_val=00DB9650)
    (data10_val=00DB9650)
    (data11_val=00DB9650)
target=126, binarySearch=[126, 1289]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=00DC0E50)
    (data1_def=00DC0E50)
    (data2_def=00DC0E50)
    (data3_def=00DC0E50)
    (data4_def=00DC0E50)
    (data5_def=00DC0E50)
    (data8_def=00DC0E50)
    (data9_def=00DC0E50)
   (data10_def=00DC0E50)
    (data11_def=00DC0E50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00DC0E50)
    (data1=00DC0E50)
    (data2=00DC0E50)
    (data3=00DC0E50)
    (data4=00DC0E50)
    (data5=00DC0E50)
    (data8=00DC0E50)
    (data9=00DC0E50)
    (data10=00DC0E50)
    (data11=00DC0E50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00DC0E50)
    (data1_val=00DC0E50)
    (data2_val=00DC0E50)
    (data3_val=00DC0E50)
    (data4_val=00DC0E50)
    (data5_val=00DC0E50)
    (data8_val=00DC0E50)
    (data9_val=00DC0E50)
    (data10_val=00DC0E50)
    (data11_val=00DC0E50)
target=254, binarySearch=[254, 8763]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=7.232428000 sec.
