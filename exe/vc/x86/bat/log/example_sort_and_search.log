============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=4951 / record(s)=10000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=5002 / record(s)=10000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=4984 / record(s)=10000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=10000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=3333 / record(s)=10000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=10000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=4976 / record(s)=10000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.004000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003020500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002999100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002998800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.014019000 sec.
* Average time     = 0.002002714 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.004000300 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001981900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001025200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.007007400 sec.
* Average time     = 0.001001057 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002000000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000995100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001998800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001002100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000998500 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001002400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000996200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.006993100 sec.
* Average time     = 0.000999014 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001998800 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000996700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000998600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001002300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.002997600 sec.
* Average time     = 0.000428229 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001002300 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000985900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.000985900 sec.
* Average time     = 0.000140843 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.000985900 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000999100 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000985400 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002019300 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.009006800 sec.
* Average time     = 0.001286686 sec.
* Min time         = 0.000985400 sec.
* Max time         = 0.002019300 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.235026200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.233999600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.234012400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.271996000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.067003800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.251035300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 1.293073300 sec.
* Average time     = 0.184724757 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.271996000 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.181017800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.179984700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.181010400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.258041800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.234006600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 1.034061300 sec.
* Average time     = 0.147723043 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.258041800 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.127987100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.124007600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.127007000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.177010700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.055003700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.104006600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.715022700 sec.
* Average time     = 0.102146100 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.177010700 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.004000400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1922616 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.004000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1902755 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.004000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1895908 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000999400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=494802 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.003000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1474414 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=514605 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.004001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1903279 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.021002500 sec.
* Average time     = 0.003000357 sec.
* Min time         = 0.000999400 sec.
* Max time         = 0.004001200 sec.
* Total Swapped    =  10108379 count(s)
* Average  Swapped =   1444054 count(s)
* Min Swapped      =    494802 count(s)
* Max Swapped      =   1922616 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000998500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57500 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57587 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001999400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57584 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=18345 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000999100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=7303 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002000100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=58823 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.008998900 sec.
* Average time     = 0.001285557 sec.
* Min time         = 0.000998500 sec.
* Max time         = 0.002000100 sec.
* Total Swapped    =    257142 count(s)
* Average  Swapped =     36734 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     58823 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.154010300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.124034500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.119997300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.256002900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.190011100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 0.844056100 sec.
* Average time     = 0.120579443 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.256002900 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33719 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33677 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33444 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=36402 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.004000600 sec.
* Average time     = 0.000571514 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000600 sec.
* Total Swapped    =    152242 count(s)
* Average  Swapped =     21748 count(s)
* Min Swapped      =      3333 count(s)
* Max Swapped      =     36402 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.123004700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.122007200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9995 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.122007600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.122007000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.123026500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.124008200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.121007600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9989 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.857068800 sec.
* Average time     = 0.122438400 sec.
* Min time         = 0.121007600 sec.
* Max time         = 0.124008200 sec.
* Total Swapped    =     48300 count(s)
* Average  Swapped =      6900 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000989100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129635 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001998900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129583 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129778 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.002000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=218680 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=116627 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001999200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=213143 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=123006 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.009989500 sec.
* Average time     = 0.001427071 sec.
* Min time         = 0.000989100 sec.
* Max time         = 0.002000300 sec.
* Total Swapped    =   1060452 count(s)
* Average  Swapped =    151493 count(s)
* Min Swapped      =    116627 count(s)
* Max Swapped      =    218680 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.115987300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9985 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.118006700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9987 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.115032900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9983 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.249008200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.188012200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9994 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.786047300 sec.
* Average time     = 0.112292471 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.249008200 sec.
* Total Swapped    =     59947 count(s)
* Average  Swapped =      8563 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48473 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001019600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48925 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48799 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000981000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=37222 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=5156 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001022200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49469 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.005023100 sec.
* Average time     = 0.000717586 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001022200 sec.
* Total Swapped    =    238044 count(s)
* Average  Swapped =     34006 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     49469 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.073010600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58291 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.072994700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58193 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.073004100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58188 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.159017400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=60442 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.118991100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58404 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.497017900 sec.
* Average time     = 0.071002557 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.159017400 sec.
* Total Swapped    =    303524 count(s)
* Average  Swapped =     43360 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     60442 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31152 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001005000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31250 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31256 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=6022 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1024 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000998200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33844 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.005004400 sec.
* Average time     = 0.000714914 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001005000 sec.
* Total Swapped    =    134548 count(s)
* Average  Swapped =     19221 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     33844 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9996 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9998 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000993800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.002995300 sec.
* Average time     = 0.000427900 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000900 sec.
* Total Swapped    =     49997 count(s)
* Average  Swapped =      7142 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     10000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 10000 Count(s)
Total Array size   = 800000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.014019000/  0.002002714/  0.000000000/  0.004000300
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.007007400/  0.001001057/  0.000000000/  0.002000000
- std::sort(inline-func):   0.006993100/  0.000999014/  0.000000000/  0.001998800
- std::sort(functor):       0.002997600/  0.000428229/  0.000000000/  0.001002300
- std::sort(lambda):        0.000985900/  0.000140843/  0.000000000/  0.000985900
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.009006800/  0.001286686/  0.000985400/  0.002019300
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           1.293073300/  0.184724757/  0.000000000/  0.271996000  162016591/   23145227/          0/   49985001
- Shaker sort<S>:           1.034061300/  0.147723043/  0.000000000/  0.258041800  162016591/   23145227/          0/   49985001
- Odd-Even sort<S>:         0.715022700/  0.102146100/  0.000000000/  0.177010700  162016591/   23145227/          0/   49985001
- Shear sort:               0.021002500/  0.003000357/  0.000999400/  0.004001200   10108379/    1444054/     494802/    1922616
- Comb sort:                0.008998900/  0.001285557/  0.000998500/  0.002000100     257142/      36734/          0/      58823
- Gnome sort<S>:            0.844056100/  0.120579443/  0.000000000/  0.256002900  162016591/   23145227/          0/   49985001
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.004000600/  0.000571514/  0.000000000/  0.001000600     152242/      21748/       3333/      36402
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.857068800/  0.122438400/  0.121007600/  0.124008200      48300/       6900/          0/       9995
- Heap sort:                0.009989500/  0.001427071/  0.000989100/  0.002000300    1060452/     151493/     116627/     218680
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.786047300/  0.112292471/  0.000000000/  0.249008200      59947/       8563/          0/       9999
- Shell sort:               0.005023100/  0.000717586/  0.000000000/  0.001022200     238044/      34006/          0/      49469
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.497017900/  0.071002557/  0.000000000/  0.159017400     303524/      43360/          0/      60442
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.005004400/  0.000714914/  0.000000000/  0.001005000     134548/      19221/          0/      33844
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.002995300/  0.000427900/  0.000000000/  0.001000900      49997/       7142/          0/      10000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=31152)
(result1=31152)
(result3=31152)
(result4=31152)
(result5=31152)
(result6=31152)
(result8=31152)
(result9=31152)
(result10=31152)
(result11=31095)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
    (data10_def=00000000)
    (data11_def=00000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=0121CC10)
    (data1_def=0121CC10)
    (data2_def=0121CC10)
    (data3_def=0121CC10)
    (data4_def=0121CC10)
    (data5_def=0121CC10)
    (data8_def=0121CC10)
    (data9_def=0121CC10)
    (data10_def=0121CC10)
    (data11_def=0121CC10)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0121CC10)
    (data1=0121CC10)
    (data2=0121CC10)
    (data3=0121CC10)
    (data4=0121CC10)
    (data5=0121CC10)
    (data8=0121CC10)
    (data9=0121CC10)
    (data10=0121CC10)
    (data11=0121CC10)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0121CC10)
    (data1_val=0121CC10)
    (data2_val=0121CC10)
    (data3_val=0121CC10)
    (data4_val=0121CC10)
    (data5_val=0121CC10)
    (data8_val=0121CC10)
    (data9_val=0121CC10)
    (data10_val=0121CC10)
    (data11_val=0121CC10)
target=0, linearSearch=[0, 2342]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=011FA3E0)
    (data1_def=011FA3E0)
    (data2_def=011FA3E0)
    (data3_def=011FA3E0)
    (data4_def=011FA3E0)
    (data5_def=011FA3E0)
    (data8_def=011FA3E0)
    (data9_def=011FA3E0)
    (data10_def=011FA3E0)
    (data11_def=011FA3E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=011FA3E0)
    (data1=011FA3E0)
    (data2=011FA3E0)
    (data3=011FA3E0)
    (data4=011FA3E0)
    (data5=011FA3E0)
    (data8=011FA3E0)
    (data9=011FA3E0)
    (data10=011FA3E0)
    (data11=011FA3E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=011FA3E0)
    (data1_val=011FA3E0)
    (data2_val=011FA3E0)
    (data3_val=011FA3E0)
    (data4_val=011FA3E0)
    (data5_val=011FA3E0)
    (data8_val=011FA3E0)
    (data9_val=011FA3E0)
    (data10_val=011FA3E0)
    (data11_val=011FA3E0)
target=2, linearSearch=[2, 575]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=01202E50)
    (data1_def=01202E50)
    (data2_def=01202E50)
    (data3_def=01202E50)
    (data4_def=01202E50)
    (data5_def=01202E50)
    (data8_def=01202E50)
    (data9_def=01202E50)
    (data10_def=01202E50)
    (data11_def=01202E50)
  linearSearch(*array_shuffle1, search_predicate);
    (data=01202E50)
    (data1=01202E50)
    (data2=01202E50)
    (data3=01202E50)
    (data4=01202E50)
    (data5=01202E50)
    (data8=01202E50)
    (data9=01202E50)
    (data10=01202E50)
    (data11=01202E50)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=01202E50)
    (data1_val=01202E50)
    (data2_val=01202E50)
    (data3_val=01202E50)
    (data4_val=01202E50)
    (data5_val=01202E50)
    (data8_val=01202E50)
    (data9_val=01202E50)
    (data10_val=01202E50)
    (data11_val=01202E50)
target=6, linearSearch=[6, 1018]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=0121A1E0)
    (data1_def=0121A1E0)
    (data2_def=0121A1E0)
    (data3_def=0121A1E0)
    (data4_def=0121A1E0)
    (data5_def=0121A1E0)
    (data8_def=0121A1E0)
    (data9_def=0121A1E0)
    (data10_def=0121A1E0)
    (data11_def=0121A1E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0121A1E0)
    (data1=0121A1E0)
    (data2=0121A1E0)
    (data3=0121A1E0)
    (data4=0121A1E0)
    (data5=0121A1E0)
    (data8=0121A1E0)
    (data9=0121A1E0)
    (data10=0121A1E0)
    (data11=0121A1E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0121A1E0)
    (data1_val=0121A1E0)
    (data2_val=0121A1E0)
    (data3_val=0121A1E0)
    (data4_val=0121A1E0)
    (data5_val=0121A1E0)
    (data8_val=0121A1E0)
    (data9_val=0121A1E0)
    (data10_val=0121A1E0)
    (data11_val=0121A1E0)
target=14, linearSearch=[14, 2207]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=0120D620)
    (data1_def=0120D620)
    (data2_def=0120D620)
    (data3_def=0120D620)
    (data4_def=0120D620)
    (data5_def=0120D620)
    (data8_def=0120D620)
    (data9_def=0120D620)
    (data10_def=0120D620)
    (data11_def=0120D620)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0120D620)
    (data1=0120D620)
    (data2=0120D620)
    (data3=0120D620)
    (data4=0120D620)
    (data5=0120D620)
    (data8=0120D620)
    (data9=0120D620)
    (data10=0120D620)
    (data11=0120D620)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0120D620)
    (data1_val=0120D620)
    (data2_val=0120D620)
    (data3_val=0120D620)
    (data4_val=0120D620)
    (data5_val=0120D620)
    (data8_val=0120D620)
    (data9_val=0120D620)
    (data10_val=0120D620)
    (data11_val=0120D620)
target=30, linearSearch=[30, 1555]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=012022C0)
    (data1_def=012022C0)
    (data2_def=012022C0)
    (data3_def=012022C0)
    (data4_def=012022C0)
    (data5_def=012022C0)
    (data8_def=012022C0)
    (data9_def=012022C0)
    (data10_def=012022C0)
    (data11_def=012022C0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=012022C0)
    (data1=012022C0)
    (data2=012022C0)
    (data3=012022C0)
    (data4=012022C0)
    (data5=012022C0)
    (data8=012022C0)
    (data9=012022C0)
    (data10=012022C0)
    (data11=012022C0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=012022C0)
    (data1_val=012022C0)
    (data2_val=012022C0)
    (data3_val=012022C0)
    (data4_val=012022C0)
    (data5_val=012022C0)
    (data8_val=012022C0)
    (data9_val=012022C0)
    (data10_val=012022C0)
    (data11_val=012022C0)
target=62, linearSearch=[62, 981]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=01208300)
    (data1_def=01208300)
    (data2_def=01208300)
    (data3_def=01208300)
    (data4_def=01208300)
    (data5_def=01208300)
    (data8_def=01208300)
    (data9_def=01208300)
    (data10_def=01208300)
    (data11_def=01208300)
  linearSearch(*array_shuffle1, search_predicate);
    (data=01208300)
    (data1=01208300)
    (data2=01208300)
    (data3=01208300)
    (data4=01208300)
    (data5=01208300)
    (data8=01208300)
    (data9=01208300)
    (data10=01208300)
    (data11=01208300)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=01208300)
    (data1_val=01208300)
    (data2_val=01208300)
    (data3_val=01208300)
    (data4_val=01208300)
    (data5_val=01208300)
    (data8_val=01208300)
    (data9_val=01208300)
    (data10_val=01208300)
    (data11_val=01208300)
target=126, linearSearch=[126, 1289]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=0128E540)
    (data1_def=0128E540)
    (data2_def=0128E540)
    (data3_def=0128E540)
    (data4_def=0128E540)
    (data5_def=0128E540)
    (data8_def=0128E540)
    (data9_def=0128E540)
    (data10_def=0128E540)
    (data11_def=0128E540)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0128E540)
    (data1=0128E540)
    (data2=0128E540)
    (data3=0128E540)
    (data4=0128E540)
    (data5=0128E540)
    (data8=0128E540)
    (data9=0128E540)
    (data10=0128E540)
    (data11=0128E540)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0128E540)
    (data1_val=0128E540)
    (data2_val=0128E540)
    (data3_val=0128E540)
    (data4_val=0128E540)
    (data5_val=0128E540)
    (data8_val=0128E540)
    (data9_val=0128E540)
    (data10_val=0128E540)
    (data11_val=0128E540)
target=254, linearSearch=[254, 8157]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
   (data10_def=00000000)
    (data11_def=00000000)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=011EF030)
    (data1_def=011EF030)
    (data2_def=011EF030)
    (data3_def=011EF030)
    (data4_def=011EF030)
    (data5_def=011EF030)
    (data8_def=011EF030)
    (data9_def=011EF030)
   (data10_def=011EF030)
    (data11_def=011EF030)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=011EF030)
    (data1=011EF030)
    (data2=011EF030)
    (data3=011EF030)
    (data4=011EF030)
    (data5=011EF030)
    (data8=011EF030)
    (data9=011EF030)
    (data10=011EF030)
    (data11=011EF030)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=011EF030)
    (data1_val=011EF030)
    (data2_val=011EF030)
    (data3_val=011EF030)
    (data4_val=011EF030)
    (data5_val=011EF030)
    (data8_val=011EF030)
    (data9_val=011EF030)
    (data10_val=011EF030)
    (data11_val=011EF030)
target=0, binarySearch=[0, 2342]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=011EF210)
    (data1_def=011EF210)
    (data2_def=011EF210)
    (data3_def=011EF210)
    (data4_def=011EF210)
    (data5_def=011EF210)
    (data8_def=011EF210)
    (data9_def=011EF210)
   (data10_def=011EF210)
    (data11_def=011EF210)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=011EF210)
    (data1=011EF210)
    (data2=011EF210)
    (data3=011EF210)
    (data4=011EF210)
    (data5=011EF210)
    (data8=011EF210)
    (data9=011EF210)
    (data10=011EF210)
    (data11=011EF210)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=011EF210)
    (data1_val=011EF210)
    (data2_val=011EF210)
    (data3_val=011EF210)
    (data4_val=011EF210)
    (data5_val=011EF210)
    (data8_val=011EF210)
    (data9_val=011EF210)
    (data10_val=011EF210)
    (data11_val=011EF210)
target=2, binarySearch=[2, 6831]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=011EF5D0)
    (data1_def=011EF5D0)
    (data2_def=011EF5D0)
    (data3_def=011EF5D0)
    (data4_def=011EF5D0)
    (data5_def=011EF5D0)
    (data8_def=011EF5D0)
    (data9_def=011EF5D0)
   (data10_def=011EF5D0)
    (data11_def=011EF5D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=011EF5D0)
    (data1=011EF5D0)
    (data2=011EF5D0)
    (data3=011EF5D0)
    (data4=011EF5D0)
    (data5=011EF5D0)
    (data8=011EF5D0)
    (data9=011EF5D0)
    (data10=011EF5D0)
    (data11=011EF5D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=011EF5D0)
    (data1_val=011EF5D0)
    (data2_val=011EF5D0)
    (data3_val=011EF5D0)
    (data4_val=011EF5D0)
    (data5_val=011EF5D0)
    (data8_val=011EF5D0)
    (data9_val=011EF5D0)
    (data10_val=011EF5D0)
    (data11_val=011EF5D0)
target=6, binarySearch=[6, 1018]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=011EFD50)
    (data1_def=011EFD50)
    (data2_def=011EFD50)
    (data3_def=011EFD50)
    (data4_def=011EFD50)
    (data5_def=011EFD50)
    (data8_def=011EFD50)
    (data9_def=011EFD50)
   (data10_def=011EFD50)
    (data11_def=011EFD50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=011EFD50)
    (data1=011EFD50)
    (data2=011EFD50)
    (data3=011EFD50)
    (data4=011EFD50)
    (data5=011EFD50)
    (data8=011EFD50)
    (data9=011EFD50)
    (data10=011EFD50)
    (data11=011EFD50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=011EFD50)
    (data1_val=011EFD50)
    (data2_val=011EFD50)
    (data3_val=011EFD50)
    (data4_val=011EFD50)
    (data5_val=011EFD50)
    (data8_val=011EFD50)
    (data9_val=011EFD50)
    (data10_val=011EFD50)
    (data11_val=011EFD50)
target=14, binarySearch=[14, 4706]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=011F0C50)
    (data1_def=011F0C50)
    (data2_def=011F0C50)
    (data3_def=011F0C50)
    (data4_def=011F0C50)
    (data5_def=011F0C50)
    (data8_def=011F0C50)
    (data9_def=011F0C50)
   (data10_def=011F0C50)
    (data11_def=011F0C50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=011F0C50)
    (data1=011F0C50)
    (data2=011F0C50)
    (data3=011F0C50)
    (data4=011F0C50)
    (data5=011F0C50)
    (data8=011F0C50)
    (data9=011F0C50)
    (data10=011F0C50)
    (data11=011F0C50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=011F0C50)
    (data1_val=011F0C50)
    (data2_val=011F0C50)
    (data3_val=011F0C50)
    (data4_val=011F0C50)
    (data5_val=011F0C50)
    (data8_val=011F0C50)
    (data9_val=011F0C50)
    (data10_val=011F0C50)
    (data11_val=011F0C50)
target=30, binarySearch=[30, 5065]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=011F2A50)
    (data1_def=011F2A50)
    (data2_def=011F2A50)
    (data3_def=011F2A50)
    (data4_def=011F2A50)
    (data5_def=011F2A50)
    (data8_def=011F2A50)
    (data9_def=011F2A50)
   (data10_def=011F2A50)
    (data11_def=011F2A50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=011F2A50)
    (data1=011F2A50)
    (data2=011F2A50)
    (data3=011F2A50)
    (data4=011F2A50)
    (data5=011F2A50)
    (data8=011F2A50)
    (data9=011F2A50)
    (data10=011F2A50)
    (data11=011F2A50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=011F2A50)
    (data1_val=011F2A50)
    (data2_val=011F2A50)
    (data3_val=011F2A50)
    (data4_val=011F2A50)
    (data5_val=011F2A50)
    (data8_val=011F2A50)
    (data9_val=011F2A50)
    (data10_val=011F2A50)
    (data11_val=011F2A50)
target=62, binarySearch=[62, 9221]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=011F6650)
    (data1_def=011F6650)
    (data2_def=011F6650)
    (data3_def=011F6650)
    (data4_def=011F6650)
    (data5_def=011F6650)
    (data8_def=011F6650)
    (data9_def=011F6650)
   (data10_def=011F6650)
    (data11_def=011F6650)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=011F6650)
    (data1=011F6650)
    (data2=011F6650)
    (data3=011F6650)
    (data4=011F6650)
    (data5=011F6650)
    (data8=011F6650)
    (data9=011F6650)
    (data10=011F6650)
    (data11=011F6650)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=011F6650)
    (data1_val=011F6650)
    (data2_val=011F6650)
    (data3_val=011F6650)
    (data4_val=011F6650)
    (data5_val=011F6650)
    (data8_val=011F6650)
    (data9_val=011F6650)
    (data10_val=011F6650)
    (data11_val=011F6650)
target=126, binarySearch=[126, 1289]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=011FDE50)
    (data1_def=011FDE50)
    (data2_def=011FDE50)
    (data3_def=011FDE50)
    (data4_def=011FDE50)
    (data5_def=011FDE50)
    (data8_def=011FDE50)
    (data9_def=011FDE50)
   (data10_def=011FDE50)
    (data11_def=011FDE50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=011FDE50)
    (data1=011FDE50)
    (data2=011FDE50)
    (data3=011FDE50)
    (data4=011FDE50)
    (data5=011FDE50)
    (data8=011FDE50)
    (data9=011FDE50)
    (data10=011FDE50)
    (data11=011FDE50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=011FDE50)
    (data1_val=011FDE50)
    (data2_val=011FDE50)
    (data3_val=011FDE50)
    (data4_val=011FDE50)
    (data5_val=011FDE50)
    (data8_val=011FDE50)
    (data9_val=011FDE50)
    (data10_val=011FDE50)
    (data11_val=011FDE50)
target=254, binarySearch=[254, 8763]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=6.173386600 sec.
