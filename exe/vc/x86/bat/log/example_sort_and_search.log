============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=4951 / record(s)=10000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=5002 / record(s)=10000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=4984 / record(s)=10000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=10000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=3333 / record(s)=10000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=10000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=4976 / record(s)=10000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.003002100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003002600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.003003800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000501200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000501500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.003092200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.014104300 sec.
* Average time     = 0.002014900 sec.
* Min time         = 0.000501200 sec.
* Max time         = 0.003092200 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001004100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000501200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001501400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.006009700 sec.
* Average time     = 0.000858529 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002001200 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001501200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000500600 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000500600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000499200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001029500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.006032300 sec.
* Average time     = 0.000861757 sec.
* Min time         = 0.000499200 sec.
* Max time         = 0.001501200 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000500300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.002502400 sec.
* Average time     = 0.000357486 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000500900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000500300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000500600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.002501500 sec.
* Average time     = 0.000357357 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.000999700 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001502400 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001501200 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001104100 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.008110300 sec.
* Average time     = 0.001158614 sec.
* Min time         = 0.000999700 sec.
* Max time         = 0.001502400 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.241334900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.224474400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.227758800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.283382700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.069085000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.246756000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 1.292791800 sec.
* Average time     = 0.184684543 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.283382700 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.210721900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.180755200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.180171600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.278070500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.237756800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 1.087476000 sec.
* Average time     = 0.155353714 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.278070500 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.134143600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.138131300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.136651600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.198706400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.066075600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.163173500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.836882000 sec.
* Average time     = 0.119554571 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.198706400 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.005506700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1922616 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.005505300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1902755 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.005004100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1895908 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=494802 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.004005600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1474414 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=514605 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.005505000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1903279 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.027528600 sec.
* Average time     = 0.003932657 sec.
* Min time         = 0.001000800 sec.
* Max time         = 0.005506700 sec.
* Total Swapped    =  10108379 count(s)
* Average  Swapped =   1444054 count(s)
* Min Swapped      =    494802 count(s)
* Max Swapped      =   1922616 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001501800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57500 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57587 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001500900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57584 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000500300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000500600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=18345 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=7303 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001002700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=58823 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.007008900 sec.
* Average time     = 0.001001271 sec.
* Min time         = 0.000500300 sec.
* Max time         = 0.001501800 sec.
* Total Swapped    =    257142 count(s)
* Average  Swapped =     36734 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     58823 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.191203800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.167388800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.124984800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.280357600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.229477100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 0.993412100 sec.
* Average time     = 0.141916014 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.280357600 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33719 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33677 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33444 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=36402 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.003002900 sec.
* Average time     = 0.000428986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001100 sec.
* Total Swapped    =    152242 count(s)
* Average  Swapped =     21748 count(s)
* Min Swapped      =      3333 count(s)
* Max Swapped      =     36402 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.126118500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.124649200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9995 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.123780200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.124653000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.124624800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.129086000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.122137200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9989 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.875048900 sec.
* Average time     = 0.125006986 sec.
* Min time         = 0.122137200 sec.
* Max time         = 0.129086000 sec.
* Total Swapped    =     48300 count(s)
* Average  Swapped =      6900 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129635 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002002000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129583 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129778 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=218680 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=116627 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=213143 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=123006 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.009009900 sec.
* Average time     = 0.001287129 sec.
* Min time         = 0.001000800 sec.
* Max time         = 0.002002900 sec.
* Total Swapped    =   1060452 count(s)
* Average  Swapped =    151493 count(s)
* Min Swapped      =    116627 count(s)
* Max Swapped      =    218680 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.118631600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9985 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.116683100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9987 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.115661700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9983 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.250997600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.192209000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9994 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.794183000 sec.
* Average time     = 0.113454714 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.250997600 sec.
* Total Swapped    =     59947 count(s)
* Average  Swapped =      8563 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48473 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48925 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001006500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48799 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=37222 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=5156 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49469 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.005010000 sec.
* Average time     = 0.000715714 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002001700 sec.
* Total Swapped    =    238044 count(s)
* Average  Swapped =     34006 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     49469 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.076577100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58291 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.081090900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58193 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.078593200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58188 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.161725900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=60442 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.119128100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58404 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.517115200 sec.
* Average time     = 0.073873600 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.161725900 sec.
* Total Swapped    =    303524 count(s)
* Average  Swapped =     43360 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     60442 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31152 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31250 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31256 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=6022 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1024 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33844 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.001000900 sec.
* Average time     = 0.000142986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000900 sec.
* Total Swapped    =    134548 count(s)
* Average  Swapped =     19221 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     33844 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9996 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9998 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000997000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.001997900 sec.
* Average time     = 0.000285414 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000900 sec.
* Total Swapped    =     49997 count(s)
* Average  Swapped =      7142 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     10000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 10000 Count(s)
Total Array size   = 800000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.014104300/  0.002014900/  0.000501200/  0.003092200
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.006009700/  0.000858529/  0.000000000/  0.002001200
- std::sort(inline-func):   0.006032300/  0.000861757/  0.000499200/  0.001501200
- std::sort(functor):       0.002502400/  0.000357486/  0.000000000/  0.001001200
- std::sort(lambda):        0.002501500/  0.000357357/  0.000000000/  0.000999700
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.008110300/  0.001158614/  0.000999700/  0.001502400
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           1.292791800/  0.184684543/  0.000000000/  0.283382700  162016591/   23145227/          0/   49985001
- Shaker sort<S>:           1.087476000/  0.155353714/  0.000000000/  0.278070500  162016591/   23145227/          0/   49985001
- Odd-Even sort<S>:         0.836882000/  0.119554571/  0.000000000/  0.198706400  162016591/   23145227/          0/   49985001
- Shear sort:               0.027528600/  0.003932657/  0.001000800/  0.005506700   10108379/    1444054/     494802/    1922616
- Comb sort:                0.007008900/  0.001001271/  0.000500300/  0.001501800     257142/      36734/          0/      58823
- Gnome sort<S>:            0.993412100/  0.141916014/  0.000000000/  0.280357600  162016591/   23145227/          0/   49985001
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.003002900/  0.000428986/  0.000000000/  0.001001100     152242/      21748/       3333/      36402
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.875048900/  0.125006986/  0.122137200/  0.129086000      48300/       6900/          0/       9995
- Heap sort:                0.009009900/  0.001287129/  0.001000800/  0.002002900    1060452/     151493/     116627/     218680
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.794183000/  0.113454714/  0.000000000/  0.250997600      59947/       8563/          0/       9999
- Shell sort:               0.005010000/  0.000715714/  0.000000000/  0.002001700     238044/      34006/          0/      49469
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.517115200/  0.073873600/  0.000000000/  0.161725900     303524/      43360/          0/      60442
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.001000900/  0.000142986/  0.000000000/  0.001000900     134548/      19221/          0/      33844
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.001997900/  0.000285414/  0.000000000/  0.001000900      49997/       7142/          0/      10000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=31152)
(result1=31152)
(result3=31152)
(result4=31152)
(result5=31152)
(result6=31152)
(result8=31152)
(result9=31152)
(result10=31152)
(result11=31095)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
    (data10_def=00000000)
    (data11_def=00000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=01098C10)
    (data1_def=01098C10)
    (data2_def=01098C10)
    (data3_def=01098C10)
    (data4_def=01098C10)
    (data5_def=01098C10)
    (data8_def=01098C10)
    (data9_def=01098C10)
    (data10_def=01098C10)
    (data11_def=01098C10)
  linearSearch(*array_shuffle1, search_predicate);
    (data=01098C10)
    (data1=01098C10)
    (data2=01098C10)
    (data3=01098C10)
    (data4=01098C10)
    (data5=01098C10)
    (data8=01098C10)
    (data9=01098C10)
    (data10=01098C10)
    (data11=01098C10)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=01098C10)
    (data1_val=01098C10)
    (data2_val=01098C10)
    (data3_val=01098C10)
    (data4_val=01098C10)
    (data5_val=01098C10)
    (data8_val=01098C10)
    (data9_val=01098C10)
    (data10_val=01098C10)
    (data11_val=01098C10)
target=0, linearSearch=[0, 2342]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=010763E0)
    (data1_def=010763E0)
    (data2_def=010763E0)
    (data3_def=010763E0)
    (data4_def=010763E0)
    (data5_def=010763E0)
    (data8_def=010763E0)
    (data9_def=010763E0)
    (data10_def=010763E0)
    (data11_def=010763E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=010763E0)
    (data1=010763E0)
    (data2=010763E0)
    (data3=010763E0)
    (data4=010763E0)
    (data5=010763E0)
    (data8=010763E0)
    (data9=010763E0)
    (data10=010763E0)
    (data11=010763E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=010763E0)
    (data1_val=010763E0)
    (data2_val=010763E0)
    (data3_val=010763E0)
    (data4_val=010763E0)
    (data5_val=010763E0)
    (data8_val=010763E0)
    (data9_val=010763E0)
    (data10_val=010763E0)
    (data11_val=010763E0)
target=2, linearSearch=[2, 575]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=0107EE50)
    (data1_def=0107EE50)
    (data2_def=0107EE50)
    (data3_def=0107EE50)
    (data4_def=0107EE50)
    (data5_def=0107EE50)
    (data8_def=0107EE50)
    (data9_def=0107EE50)
    (data10_def=0107EE50)
    (data11_def=0107EE50)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0107EE50)
    (data1=0107EE50)
    (data2=0107EE50)
    (data3=0107EE50)
    (data4=0107EE50)
    (data5=0107EE50)
    (data8=0107EE50)
    (data9=0107EE50)
    (data10=0107EE50)
    (data11=0107EE50)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0107EE50)
    (data1_val=0107EE50)
    (data2_val=0107EE50)
    (data3_val=0107EE50)
    (data4_val=0107EE50)
    (data5_val=0107EE50)
    (data8_val=0107EE50)
    (data9_val=0107EE50)
    (data10_val=0107EE50)
    (data11_val=0107EE50)
target=6, linearSearch=[6, 1018]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=010961E0)
    (data1_def=010961E0)
    (data2_def=010961E0)
    (data3_def=010961E0)
    (data4_def=010961E0)
    (data5_def=010961E0)
    (data8_def=010961E0)
    (data9_def=010961E0)
    (data10_def=010961E0)
    (data11_def=010961E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=010961E0)
    (data1=010961E0)
    (data2=010961E0)
    (data3=010961E0)
    (data4=010961E0)
    (data5=010961E0)
    (data8=010961E0)
    (data9=010961E0)
    (data10=010961E0)
    (data11=010961E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=010961E0)
    (data1_val=010961E0)
    (data2_val=010961E0)
    (data3_val=010961E0)
    (data4_val=010961E0)
    (data5_val=010961E0)
    (data8_val=010961E0)
    (data9_val=010961E0)
    (data10_val=010961E0)
    (data11_val=010961E0)
target=14, linearSearch=[14, 2207]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=01089620)
    (data1_def=01089620)
    (data2_def=01089620)
    (data3_def=01089620)
    (data4_def=01089620)
    (data5_def=01089620)
    (data8_def=01089620)
    (data9_def=01089620)
    (data10_def=01089620)
    (data11_def=01089620)
  linearSearch(*array_shuffle1, search_predicate);
    (data=01089620)
    (data1=01089620)
    (data2=01089620)
    (data3=01089620)
    (data4=01089620)
    (data5=01089620)
    (data8=01089620)
    (data9=01089620)
    (data10=01089620)
    (data11=01089620)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=01089620)
    (data1_val=01089620)
    (data2_val=01089620)
    (data3_val=01089620)
    (data4_val=01089620)
    (data5_val=01089620)
    (data8_val=01089620)
    (data9_val=01089620)
    (data10_val=01089620)
    (data11_val=01089620)
target=30, linearSearch=[30, 1555]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=0107E2C0)
    (data1_def=0107E2C0)
    (data2_def=0107E2C0)
    (data3_def=0107E2C0)
    (data4_def=0107E2C0)
    (data5_def=0107E2C0)
    (data8_def=0107E2C0)
    (data9_def=0107E2C0)
    (data10_def=0107E2C0)
    (data11_def=0107E2C0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0107E2C0)
    (data1=0107E2C0)
    (data2=0107E2C0)
    (data3=0107E2C0)
    (data4=0107E2C0)
    (data5=0107E2C0)
    (data8=0107E2C0)
    (data9=0107E2C0)
    (data10=0107E2C0)
    (data11=0107E2C0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0107E2C0)
    (data1_val=0107E2C0)
    (data2_val=0107E2C0)
    (data3_val=0107E2C0)
    (data4_val=0107E2C0)
    (data5_val=0107E2C0)
    (data8_val=0107E2C0)
    (data9_val=0107E2C0)
    (data10_val=0107E2C0)
    (data11_val=0107E2C0)
target=62, linearSearch=[62, 981]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=01084300)
    (data1_def=01084300)
    (data2_def=01084300)
    (data3_def=01084300)
    (data4_def=01084300)
    (data5_def=01084300)
    (data8_def=01084300)
    (data9_def=01084300)
    (data10_def=01084300)
    (data11_def=01084300)
  linearSearch(*array_shuffle1, search_predicate);
    (data=01084300)
    (data1=01084300)
    (data2=01084300)
    (data3=01084300)
    (data4=01084300)
    (data5=01084300)
    (data8=01084300)
    (data9=01084300)
    (data10=01084300)
    (data11=01084300)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=01084300)
    (data1_val=01084300)
    (data2_val=01084300)
    (data3_val=01084300)
    (data4_val=01084300)
    (data5_val=01084300)
    (data8_val=01084300)
    (data9_val=01084300)
    (data10_val=01084300)
    (data11_val=01084300)
target=126, linearSearch=[126, 1289]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=0110A540)
    (data1_def=0110A540)
    (data2_def=0110A540)
    (data3_def=0110A540)
    (data4_def=0110A540)
    (data5_def=0110A540)
    (data8_def=0110A540)
    (data9_def=0110A540)
    (data10_def=0110A540)
    (data11_def=0110A540)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0110A540)
    (data1=0110A540)
    (data2=0110A540)
    (data3=0110A540)
    (data4=0110A540)
    (data5=0110A540)
    (data8=0110A540)
    (data9=0110A540)
    (data10=0110A540)
    (data11=0110A540)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0110A540)
    (data1_val=0110A540)
    (data2_val=0110A540)
    (data3_val=0110A540)
    (data4_val=0110A540)
    (data5_val=0110A540)
    (data8_val=0110A540)
    (data9_val=0110A540)
    (data10_val=0110A540)
    (data11_val=0110A540)
target=254, linearSearch=[254, 8157]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
   (data10_def=00000000)
    (data11_def=00000000)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=0106B030)
    (data1_def=0106B030)
    (data2_def=0106B030)
    (data3_def=0106B030)
    (data4_def=0106B030)
    (data5_def=0106B030)
    (data8_def=0106B030)
    (data9_def=0106B030)
   (data10_def=0106B030)
    (data11_def=0106B030)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0106B030)
    (data1=0106B030)
    (data2=0106B030)
    (data3=0106B030)
    (data4=0106B030)
    (data5=0106B030)
    (data8=0106B030)
    (data9=0106B030)
    (data10=0106B030)
    (data11=0106B030)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0106B030)
    (data1_val=0106B030)
    (data2_val=0106B030)
    (data3_val=0106B030)
    (data4_val=0106B030)
    (data5_val=0106B030)
    (data8_val=0106B030)
    (data9_val=0106B030)
    (data10_val=0106B030)
    (data11_val=0106B030)
target=0, binarySearch=[0, 2342]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=0106B210)
    (data1_def=0106B210)
    (data2_def=0106B210)
    (data3_def=0106B210)
    (data4_def=0106B210)
    (data5_def=0106B210)
    (data8_def=0106B210)
    (data9_def=0106B210)
   (data10_def=0106B210)
    (data11_def=0106B210)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0106B210)
    (data1=0106B210)
    (data2=0106B210)
    (data3=0106B210)
    (data4=0106B210)
    (data5=0106B210)
    (data8=0106B210)
    (data9=0106B210)
    (data10=0106B210)
    (data11=0106B210)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0106B210)
    (data1_val=0106B210)
    (data2_val=0106B210)
    (data3_val=0106B210)
    (data4_val=0106B210)
    (data5_val=0106B210)
    (data8_val=0106B210)
    (data9_val=0106B210)
    (data10_val=0106B210)
    (data11_val=0106B210)
target=2, binarySearch=[2, 6831]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=0106B5D0)
    (data1_def=0106B5D0)
    (data2_def=0106B5D0)
    (data3_def=0106B5D0)
    (data4_def=0106B5D0)
    (data5_def=0106B5D0)
    (data8_def=0106B5D0)
    (data9_def=0106B5D0)
   (data10_def=0106B5D0)
    (data11_def=0106B5D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0106B5D0)
    (data1=0106B5D0)
    (data2=0106B5D0)
    (data3=0106B5D0)
    (data4=0106B5D0)
    (data5=0106B5D0)
    (data8=0106B5D0)
    (data9=0106B5D0)
    (data10=0106B5D0)
    (data11=0106B5D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0106B5D0)
    (data1_val=0106B5D0)
    (data2_val=0106B5D0)
    (data3_val=0106B5D0)
    (data4_val=0106B5D0)
    (data5_val=0106B5D0)
    (data8_val=0106B5D0)
    (data9_val=0106B5D0)
    (data10_val=0106B5D0)
    (data11_val=0106B5D0)
target=6, binarySearch=[6, 1018]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=0106BD50)
    (data1_def=0106BD50)
    (data2_def=0106BD50)
    (data3_def=0106BD50)
    (data4_def=0106BD50)
    (data5_def=0106BD50)
    (data8_def=0106BD50)
    (data9_def=0106BD50)
   (data10_def=0106BD50)
    (data11_def=0106BD50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0106BD50)
    (data1=0106BD50)
    (data2=0106BD50)
    (data3=0106BD50)
    (data4=0106BD50)
    (data5=0106BD50)
    (data8=0106BD50)
    (data9=0106BD50)
    (data10=0106BD50)
    (data11=0106BD50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0106BD50)
    (data1_val=0106BD50)
    (data2_val=0106BD50)
    (data3_val=0106BD50)
    (data4_val=0106BD50)
    (data5_val=0106BD50)
    (data8_val=0106BD50)
    (data9_val=0106BD50)
    (data10_val=0106BD50)
    (data11_val=0106BD50)
target=14, binarySearch=[14, 4706]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=0106CC50)
    (data1_def=0106CC50)
    (data2_def=0106CC50)
    (data3_def=0106CC50)
    (data4_def=0106CC50)
    (data5_def=0106CC50)
    (data8_def=0106CC50)
    (data9_def=0106CC50)
   (data10_def=0106CC50)
    (data11_def=0106CC50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0106CC50)
    (data1=0106CC50)
    (data2=0106CC50)
    (data3=0106CC50)
    (data4=0106CC50)
    (data5=0106CC50)
    (data8=0106CC50)
    (data9=0106CC50)
    (data10=0106CC50)
    (data11=0106CC50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0106CC50)
    (data1_val=0106CC50)
    (data2_val=0106CC50)
    (data3_val=0106CC50)
    (data4_val=0106CC50)
    (data5_val=0106CC50)
    (data8_val=0106CC50)
    (data9_val=0106CC50)
    (data10_val=0106CC50)
    (data11_val=0106CC50)
target=30, binarySearch=[30, 5065]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=0106EA50)
    (data1_def=0106EA50)
    (data2_def=0106EA50)
    (data3_def=0106EA50)
    (data4_def=0106EA50)
    (data5_def=0106EA50)
    (data8_def=0106EA50)
    (data9_def=0106EA50)
   (data10_def=0106EA50)
    (data11_def=0106EA50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0106EA50)
    (data1=0106EA50)
    (data2=0106EA50)
    (data3=0106EA50)
    (data4=0106EA50)
    (data5=0106EA50)
    (data8=0106EA50)
    (data9=0106EA50)
    (data10=0106EA50)
    (data11=0106EA50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0106EA50)
    (data1_val=0106EA50)
    (data2_val=0106EA50)
    (data3_val=0106EA50)
    (data4_val=0106EA50)
    (data5_val=0106EA50)
    (data8_val=0106EA50)
    (data9_val=0106EA50)
    (data10_val=0106EA50)
    (data11_val=0106EA50)
target=62, binarySearch=[62, 9221]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=01072650)
    (data1_def=01072650)
    (data2_def=01072650)
    (data3_def=01072650)
    (data4_def=01072650)
    (data5_def=01072650)
    (data8_def=01072650)
    (data9_def=01072650)
   (data10_def=01072650)
    (data11_def=01072650)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=01072650)
    (data1=01072650)
    (data2=01072650)
    (data3=01072650)
    (data4=01072650)
    (data5=01072650)
    (data8=01072650)
    (data9=01072650)
    (data10=01072650)
    (data11=01072650)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=01072650)
    (data1_val=01072650)
    (data2_val=01072650)
    (data3_val=01072650)
    (data4_val=01072650)
    (data5_val=01072650)
    (data8_val=01072650)
    (data9_val=01072650)
    (data10_val=01072650)
    (data11_val=01072650)
target=126, binarySearch=[126, 1289]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=01079E50)
    (data1_def=01079E50)
    (data2_def=01079E50)
    (data3_def=01079E50)
    (data4_def=01079E50)
    (data5_def=01079E50)
    (data8_def=01079E50)
    (data9_def=01079E50)
   (data10_def=01079E50)
    (data11_def=01079E50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=01079E50)
    (data1=01079E50)
    (data2=01079E50)
    (data3=01079E50)
    (data4=01079E50)
    (data5=01079E50)
    (data8=01079E50)
    (data9=01079E50)
    (data10=01079E50)
    (data11=01079E50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=01079E50)
    (data1_val=01079E50)
    (data2_val=01079E50)
    (data3_val=01079E50)
    (data4_val=01079E50)
    (data5_val=01079E50)
    (data8_val=01079E50)
    (data9_val=01079E50)
    (data10_val=01079E50)
    (data11_val=01079E50)
target=254, binarySearch=[254, 8763]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=6.564565500 sec.
