============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=4951 / record(s)=10000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=5002 / record(s)=10000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=4984 / record(s)=10000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=10000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=3333 / record(s)=10000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=10000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=4976 / record(s)=10000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.003002400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003002700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.003002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.003002600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.015013500 sec.
* Average time     = 0.002144786 sec.
* Min time         = 0.001000800 sec.
* Max time         = 0.003002900 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.006005300 sec.
* Average time     = 0.000857900 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002001700 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.005004300 sec.
* Average time     = 0.000714900 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.001000900 sec.
* Average time     = 0.000142986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000900 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.004004100 sec.
* Average time     = 0.000572014 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000500 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.007006000 sec.
* Average time     = 0.001000857 sec.
* Min time         = 0.001000300 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.237224900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.237224600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.256244500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.273259700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.066063000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.257243600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 1.327260300 sec.
* Average time     = 0.189608614 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.273259700 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.182175100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.180171000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.195187700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.271257100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.233222300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 1.062013200 sec.
* Average time     = 0.151716171 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.271257100 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.126118300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.127120600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.129122700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.192183000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.064061000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.165156700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.803762300 sec.
* Average time     = 0.114823186 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.192183000 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.005004400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1892312 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.005004900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1873730 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.005004700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1860168 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=485134 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.003002600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1465201 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=485527 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.005004600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1882044 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.025023300 sec.
* Average time     = 0.003574757 sec.
* Min time         = 0.001000900 sec.
* Max time         = 0.005004900 sec.
* Total Swapped    =   9944116 count(s)
* Average  Swapped =   1420588 count(s)
* Min Swapped      =    485134 count(s)
* Max Swapped      =   1892312 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57500 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57587 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57584 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=18345 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=7303 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=58823 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.007006500 sec.
* Average time     = 0.001000929 sec.
* Min time         = 0.001000800 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =    257142 count(s)
* Average  Swapped =     36734 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     58823 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.158150800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.129123900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.121114500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.255241800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.202193600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 0.865824600 sec.
* Average time     = 0.123689229 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.255241800 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33719 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33677 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33444 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=36402 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.002001400 sec.
* Average time     = 0.000285914 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000800 sec.
* Total Swapped    =    152242 count(s)
* Average  Swapped =     21748 count(s)
* Min Swapped      =      3333 count(s)
* Max Swapped      =     36402 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.122114500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.121115100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9995 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.122115700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.122115900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.122116000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.121115400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.122118000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9989 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.852810600 sec.
* Average time     = 0.121830086 sec.
* Min time         = 0.121115100 sec.
* Max time         = 0.122118000 sec.
* Total Swapped    =     48300 count(s)
* Average  Swapped =      6900 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129635 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129583 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129778 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=218680 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=116627 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=213143 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002002400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=123006 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.009008300 sec.
* Average time     = 0.001286900 sec.
* Min time         = 0.001000300 sec.
* Max time         = 0.002002400 sec.
* Total Swapped    =   1060452 count(s)
* Average  Swapped =    151493 count(s)
* Min Swapped      =    116627 count(s)
* Max Swapped      =    218680 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.118113000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9985 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.115109500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9987 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.114106900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9983 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.248236400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.187168700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9994 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.782734500 sec.
* Average time     = 0.111819214 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.248236400 sec.
* Total Swapped    =     59947 count(s)
* Average  Swapped =      8563 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48473 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48925 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48799 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=37222 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=5156 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49469 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.006006100 sec.
* Average time     = 0.000858014 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002001800 sec.
* Total Swapped    =    238044 count(s)
* Average  Swapped =     34006 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     49469 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.073069700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58291 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.073068200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58193 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.072069400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58188 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.156147900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=60442 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.117101300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58404 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.491456500 sec.
* Average time     = 0.070208071 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.156147900 sec.
* Total Swapped    =    303524 count(s)
* Average  Swapped =     43360 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     60442 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31152 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31250 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31256 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=6022 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1024 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33844 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.004003200 sec.
* Average time     = 0.000571886 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =    134548 count(s)
* Average  Swapped =     19221 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     33844 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9996 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9998 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001005300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.003007100 sec.
* Average time     = 0.000429586 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001005300 sec.
* Total Swapped    =     49997 count(s)
* Average  Swapped =      7142 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     10000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 10000 Count(s)
Total Array size   = 800000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.015013500/  0.002144786/  0.001000800/  0.003002900
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.006005300/  0.000857900/  0.000000000/  0.002001700
- std::sort(inline-func):   0.005004300/  0.000714900/  0.000000000/  0.001001200
- std::sort(functor):       0.001000900/  0.000142986/  0.000000000/  0.001000900
- std::sort(lambda):        0.004004100/  0.000572014/  0.000000000/  0.001001200
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.007006000/  0.001000857/  0.001000300/  0.001001200
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           1.327260300/  0.189608614/  0.000000000/  0.273259700  162016591/   23145227/          0/   49985001
- Shaker sort<S>:           1.062013200/  0.151716171/  0.000000000/  0.271257100  162016591/   23145227/          0/   49985001
- Odd-Even sort<S>:         0.803762300/  0.114823186/  0.000000000/  0.192183000  162016591/   23145227/          0/   49985001
- Shear sort:               0.025023300/  0.003574757/  0.001000900/  0.005004900    9944116/    1420588/     485134/    1892312
- Comb sort:                0.007006500/  0.001000929/  0.001000800/  0.001001200     257142/      36734/          0/      58823
- Gnome sort<S>:            0.865824600/  0.123689229/  0.000000000/  0.255241800  162016591/   23145227/          0/   49985001
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.002001400/  0.000285914/  0.000000000/  0.001000800     152242/      21748/       3333/      36402
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.852810600/  0.121830086/  0.121115100/  0.122118000      48300/       6900/          0/       9995
- Heap sort:                0.009008300/  0.001286900/  0.001000300/  0.002002400    1060452/     151493/     116627/     218680
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.782734500/  0.111819214/  0.000000000/  0.248236400      59947/       8563/          0/       9999
- Shell sort:               0.006006100/  0.000858014/  0.000000000/  0.002001800     238044/      34006/          0/      49469
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.491456500/  0.070208071/  0.000000000/  0.156147900     303524/      43360/          0/      60442
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.004003200/  0.000571886/  0.000000000/  0.001001200     134548/      19221/          0/      33844
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.003007100/  0.000429586/  0.000000000/  0.001005300      49997/       7142/          0/      10000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=31152)
(result1=31152)
(result3=31152)
(result4=31152)
(result5=31152)
(result6=31152)
(result8=31152)
(result9=31152)
(result10=31152)
(result11=31095)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
    (data10_def=00000000)
    (data11_def=00000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=01244C10)
    (data1_def=01244C10)
    (data2_def=01244C10)
    (data3_def=01244C10)
    (data4_def=01244C10)
    (data5_def=01244C10)
    (data8_def=01244C10)
    (data9_def=01244C10)
    (data10_def=01244C10)
    (data11_def=01244C10)
  linearSearch(*array_shuffle1, search_predicate);
    (data=01244C10)
    (data1=01244C10)
    (data2=01244C10)
    (data3=01244C10)
    (data4=01244C10)
    (data5=01244C10)
    (data8=01244C10)
    (data9=01244C10)
    (data10=01244C10)
    (data11=01244C10)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=01244C10)
    (data1_val=01244C10)
    (data2_val=01244C10)
    (data3_val=01244C10)
    (data4_val=01244C10)
    (data5_val=01244C10)
    (data8_val=01244C10)
    (data9_val=01244C10)
    (data10_val=01244C10)
    (data11_val=01244C10)
target=0, linearSearch=[0, 2342]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=012223E0)
    (data1_def=012223E0)
    (data2_def=012223E0)
    (data3_def=012223E0)
    (data4_def=012223E0)
    (data5_def=012223E0)
    (data8_def=012223E0)
    (data9_def=012223E0)
    (data10_def=012223E0)
    (data11_def=012223E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=012223E0)
    (data1=012223E0)
    (data2=012223E0)
    (data3=012223E0)
    (data4=012223E0)
    (data5=012223E0)
    (data8=012223E0)
    (data9=012223E0)
    (data10=012223E0)
    (data11=012223E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=012223E0)
    (data1_val=012223E0)
    (data2_val=012223E0)
    (data3_val=012223E0)
    (data4_val=012223E0)
    (data5_val=012223E0)
    (data8_val=012223E0)
    (data9_val=012223E0)
    (data10_val=012223E0)
    (data11_val=012223E0)
target=2, linearSearch=[2, 575]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=0122AE50)
    (data1_def=0122AE50)
    (data2_def=0122AE50)
    (data3_def=0122AE50)
    (data4_def=0122AE50)
    (data5_def=0122AE50)
    (data8_def=0122AE50)
    (data9_def=0122AE50)
    (data10_def=0122AE50)
    (data11_def=0122AE50)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0122AE50)
    (data1=0122AE50)
    (data2=0122AE50)
    (data3=0122AE50)
    (data4=0122AE50)
    (data5=0122AE50)
    (data8=0122AE50)
    (data9=0122AE50)
    (data10=0122AE50)
    (data11=0122AE50)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0122AE50)
    (data1_val=0122AE50)
    (data2_val=0122AE50)
    (data3_val=0122AE50)
    (data4_val=0122AE50)
    (data5_val=0122AE50)
    (data8_val=0122AE50)
    (data9_val=0122AE50)
    (data10_val=0122AE50)
    (data11_val=0122AE50)
target=6, linearSearch=[6, 1018]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=012421E0)
    (data1_def=012421E0)
    (data2_def=012421E0)
    (data3_def=012421E0)
    (data4_def=012421E0)
    (data5_def=012421E0)
    (data8_def=012421E0)
    (data9_def=012421E0)
    (data10_def=012421E0)
    (data11_def=012421E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=012421E0)
    (data1=012421E0)
    (data2=012421E0)
    (data3=012421E0)
    (data4=012421E0)
    (data5=012421E0)
    (data8=012421E0)
    (data9=012421E0)
    (data10=012421E0)
    (data11=012421E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=012421E0)
    (data1_val=012421E0)
    (data2_val=012421E0)
    (data3_val=012421E0)
    (data4_val=012421E0)
    (data5_val=012421E0)
    (data8_val=012421E0)
    (data9_val=012421E0)
    (data10_val=012421E0)
    (data11_val=012421E0)
target=14, linearSearch=[14, 2207]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=01235620)
    (data1_def=01235620)
    (data2_def=01235620)
    (data3_def=01235620)
    (data4_def=01235620)
    (data5_def=01235620)
    (data8_def=01235620)
    (data9_def=01235620)
    (data10_def=01235620)
    (data11_def=01235620)
  linearSearch(*array_shuffle1, search_predicate);
    (data=01235620)
    (data1=01235620)
    (data2=01235620)
    (data3=01235620)
    (data4=01235620)
    (data5=01235620)
    (data8=01235620)
    (data9=01235620)
    (data10=01235620)
    (data11=01235620)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=01235620)
    (data1_val=01235620)
    (data2_val=01235620)
    (data3_val=01235620)
    (data4_val=01235620)
    (data5_val=01235620)
    (data8_val=01235620)
    (data9_val=01235620)
    (data10_val=01235620)
    (data11_val=01235620)
target=30, linearSearch=[30, 1555]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=0122A2C0)
    (data1_def=0122A2C0)
    (data2_def=0122A2C0)
    (data3_def=0122A2C0)
    (data4_def=0122A2C0)
    (data5_def=0122A2C0)
    (data8_def=0122A2C0)
    (data9_def=0122A2C0)
    (data10_def=0122A2C0)
    (data11_def=0122A2C0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0122A2C0)
    (data1=0122A2C0)
    (data2=0122A2C0)
    (data3=0122A2C0)
    (data4=0122A2C0)
    (data5=0122A2C0)
    (data8=0122A2C0)
    (data9=0122A2C0)
    (data10=0122A2C0)
    (data11=0122A2C0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0122A2C0)
    (data1_val=0122A2C0)
    (data2_val=0122A2C0)
    (data3_val=0122A2C0)
    (data4_val=0122A2C0)
    (data5_val=0122A2C0)
    (data8_val=0122A2C0)
    (data9_val=0122A2C0)
    (data10_val=0122A2C0)
    (data11_val=0122A2C0)
target=62, linearSearch=[62, 981]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=01230300)
    (data1_def=01230300)
    (data2_def=01230300)
    (data3_def=01230300)
    (data4_def=01230300)
    (data5_def=01230300)
    (data8_def=01230300)
    (data9_def=01230300)
    (data10_def=01230300)
    (data11_def=01230300)
  linearSearch(*array_shuffle1, search_predicate);
    (data=01230300)
    (data1=01230300)
    (data2=01230300)
    (data3=01230300)
    (data4=01230300)
    (data5=01230300)
    (data8=01230300)
    (data9=01230300)
    (data10=01230300)
    (data11=01230300)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=01230300)
    (data1_val=01230300)
    (data2_val=01230300)
    (data3_val=01230300)
    (data4_val=01230300)
    (data5_val=01230300)
    (data8_val=01230300)
    (data9_val=01230300)
    (data10_val=01230300)
    (data11_val=01230300)
target=126, linearSearch=[126, 1289]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=012B6540)
    (data1_def=012B6540)
    (data2_def=012B6540)
    (data3_def=012B6540)
    (data4_def=012B6540)
    (data5_def=012B6540)
    (data8_def=012B6540)
    (data9_def=012B6540)
    (data10_def=012B6540)
    (data11_def=012B6540)
  linearSearch(*array_shuffle1, search_predicate);
    (data=012B6540)
    (data1=012B6540)
    (data2=012B6540)
    (data3=012B6540)
    (data4=012B6540)
    (data5=012B6540)
    (data8=012B6540)
    (data9=012B6540)
    (data10=012B6540)
    (data11=012B6540)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=012B6540)
    (data1_val=012B6540)
    (data2_val=012B6540)
    (data3_val=012B6540)
    (data4_val=012B6540)
    (data5_val=012B6540)
    (data8_val=012B6540)
    (data9_val=012B6540)
    (data10_val=012B6540)
    (data11_val=012B6540)
target=254, linearSearch=[254, 8157]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
   (data10_def=00000000)
    (data11_def=00000000)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=01217030)
    (data1_def=01217030)
    (data2_def=01217030)
    (data3_def=01217030)
    (data4_def=01217030)
    (data5_def=01217030)
    (data8_def=01217030)
    (data9_def=01217030)
   (data10_def=01217030)
    (data11_def=01217030)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=01217030)
    (data1=01217030)
    (data2=01217030)
    (data3=01217030)
    (data4=01217030)
    (data5=01217030)
    (data8=01217030)
    (data9=01217030)
    (data10=01217030)
    (data11=01217030)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=01217030)
    (data1_val=01217030)
    (data2_val=01217030)
    (data3_val=01217030)
    (data4_val=01217030)
    (data5_val=01217030)
    (data8_val=01217030)
    (data9_val=01217030)
    (data10_val=01217030)
    (data11_val=01217030)
target=0, binarySearch=[0, 2342]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=01217210)
    (data1_def=01217210)
    (data2_def=01217210)
    (data3_def=01217210)
    (data4_def=01217210)
    (data5_def=01217210)
    (data8_def=01217210)
    (data9_def=01217210)
   (data10_def=01217210)
    (data11_def=01217210)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=01217210)
    (data1=01217210)
    (data2=01217210)
    (data3=01217210)
    (data4=01217210)
    (data5=01217210)
    (data8=01217210)
    (data9=01217210)
    (data10=01217210)
    (data11=01217210)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=01217210)
    (data1_val=01217210)
    (data2_val=01217210)
    (data3_val=01217210)
    (data4_val=01217210)
    (data5_val=01217210)
    (data8_val=01217210)
    (data9_val=01217210)
    (data10_val=01217210)
    (data11_val=01217210)
target=2, binarySearch=[2, 6831]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=012175D0)
    (data1_def=012175D0)
    (data2_def=012175D0)
    (data3_def=012175D0)
    (data4_def=012175D0)
    (data5_def=012175D0)
    (data8_def=012175D0)
    (data9_def=012175D0)
   (data10_def=012175D0)
    (data11_def=012175D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=012175D0)
    (data1=012175D0)
    (data2=012175D0)
    (data3=012175D0)
    (data4=012175D0)
    (data5=012175D0)
    (data8=012175D0)
    (data9=012175D0)
    (data10=012175D0)
    (data11=012175D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=012175D0)
    (data1_val=012175D0)
    (data2_val=012175D0)
    (data3_val=012175D0)
    (data4_val=012175D0)
    (data5_val=012175D0)
    (data8_val=012175D0)
    (data9_val=012175D0)
    (data10_val=012175D0)
    (data11_val=012175D0)
target=6, binarySearch=[6, 1018]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=01217D50)
    (data1_def=01217D50)
    (data2_def=01217D50)
    (data3_def=01217D50)
    (data4_def=01217D50)
    (data5_def=01217D50)
    (data8_def=01217D50)
    (data9_def=01217D50)
   (data10_def=01217D50)
    (data11_def=01217D50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=01217D50)
    (data1=01217D50)
    (data2=01217D50)
    (data3=01217D50)
    (data4=01217D50)
    (data5=01217D50)
    (data8=01217D50)
    (data9=01217D50)
    (data10=01217D50)
    (data11=01217D50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=01217D50)
    (data1_val=01217D50)
    (data2_val=01217D50)
    (data3_val=01217D50)
    (data4_val=01217D50)
    (data5_val=01217D50)
    (data8_val=01217D50)
    (data9_val=01217D50)
    (data10_val=01217D50)
    (data11_val=01217D50)
target=14, binarySearch=[14, 4706]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=01218C50)
    (data1_def=01218C50)
    (data2_def=01218C50)
    (data3_def=01218C50)
    (data4_def=01218C50)
    (data5_def=01218C50)
    (data8_def=01218C50)
    (data9_def=01218C50)
   (data10_def=01218C50)
    (data11_def=01218C50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=01218C50)
    (data1=01218C50)
    (data2=01218C50)
    (data3=01218C50)
    (data4=01218C50)
    (data5=01218C50)
    (data8=01218C50)
    (data9=01218C50)
    (data10=01218C50)
    (data11=01218C50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=01218C50)
    (data1_val=01218C50)
    (data2_val=01218C50)
    (data3_val=01218C50)
    (data4_val=01218C50)
    (data5_val=01218C50)
    (data8_val=01218C50)
    (data9_val=01218C50)
    (data10_val=01218C50)
    (data11_val=01218C50)
target=30, binarySearch=[30, 5065]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=0121AA50)
    (data1_def=0121AA50)
    (data2_def=0121AA50)
    (data3_def=0121AA50)
    (data4_def=0121AA50)
    (data5_def=0121AA50)
    (data8_def=0121AA50)
    (data9_def=0121AA50)
   (data10_def=0121AA50)
    (data11_def=0121AA50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0121AA50)
    (data1=0121AA50)
    (data2=0121AA50)
    (data3=0121AA50)
    (data4=0121AA50)
    (data5=0121AA50)
    (data8=0121AA50)
    (data9=0121AA50)
    (data10=0121AA50)
    (data11=0121AA50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0121AA50)
    (data1_val=0121AA50)
    (data2_val=0121AA50)
    (data3_val=0121AA50)
    (data4_val=0121AA50)
    (data5_val=0121AA50)
    (data8_val=0121AA50)
    (data9_val=0121AA50)
    (data10_val=0121AA50)
    (data11_val=0121AA50)
target=62, binarySearch=[62, 9221]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=0121E650)
    (data1_def=0121E650)
    (data2_def=0121E650)
    (data3_def=0121E650)
    (data4_def=0121E650)
    (data5_def=0121E650)
    (data8_def=0121E650)
    (data9_def=0121E650)
   (data10_def=0121E650)
    (data11_def=0121E650)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0121E650)
    (data1=0121E650)
    (data2=0121E650)
    (data3=0121E650)
    (data4=0121E650)
    (data5=0121E650)
    (data8=0121E650)
    (data9=0121E650)
    (data10=0121E650)
    (data11=0121E650)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0121E650)
    (data1_val=0121E650)
    (data2_val=0121E650)
    (data3_val=0121E650)
    (data4_val=0121E650)
    (data5_val=0121E650)
    (data8_val=0121E650)
    (data9_val=0121E650)
    (data10_val=0121E650)
    (data11_val=0121E650)
target=126, binarySearch=[126, 1289]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=01225E50)
    (data1_def=01225E50)
    (data2_def=01225E50)
    (data3_def=01225E50)
    (data4_def=01225E50)
    (data5_def=01225E50)
    (data8_def=01225E50)
    (data9_def=01225E50)
   (data10_def=01225E50)
    (data11_def=01225E50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=01225E50)
    (data1=01225E50)
    (data2=01225E50)
    (data3=01225E50)
    (data4=01225E50)
    (data5=01225E50)
    (data8=01225E50)
    (data9=01225E50)
    (data10=01225E50)
    (data11=01225E50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=01225E50)
    (data1_val=01225E50)
    (data2_val=01225E50)
    (data3_val=01225E50)
    (data4_val=01225E50)
    (data5_val=01225E50)
    (data8_val=01225E50)
    (data9_val=01225E50)
    (data10_val=01225E50)
    (data11_val=01225E50)
target=254, binarySearch=[254, 8763]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=6.349038600 sec.
