============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=4951 / record(s)=10000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=5002 / record(s)=10000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=4984 / record(s)=10000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=10000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=3333 / record(s)=10000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=10000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=4976 / record(s)=10000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.003002300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003004100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.003004700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.003002600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.015015800 sec.
* Average time     = 0.002145114 sec.
* Min time         = 0.001000000 sec.
* Max time         = 0.003004700 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.007007600 sec.
* Average time     = 0.001001086 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002002900 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001002700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002002000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.006006800 sec.
* Average time     = 0.000858114 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002002000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001400 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.006006200 sec.
* Average time     = 0.000858029 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001500 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001007300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000994500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.003002600 sec.
* Average time     = 0.000428943 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001007300 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001800 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002002000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002003200 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001002400 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000998200 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001002400 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.009010300 sec.
* Average time     = 0.001287186 sec.
* Min time         = 0.000998200 sec.
* Max time         = 0.002003200 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.237227500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.236223800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.234222600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.293278400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.070066600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.279266000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 1.350284900 sec.
* Average time     = 0.192897843 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.293278400 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.184176000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.199188900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.181174800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.327310000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.328314400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 1.220164100 sec.
* Average time     = 0.174309157 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.328314400 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.136127900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.140133700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.132125500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.194184500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.068064800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.176167700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.846804100 sec.
* Average time     = 0.120972014 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.194184500 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.006005600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1922616 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.005004700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1902755 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.005005000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1895908 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=494802 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.003002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1474414 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=514605 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.004004100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1903279 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.026024900 sec.
* Average time     = 0.003717843 sec.
* Min time         = 0.001000900 sec.
* Max time         = 0.006005600 sec.
* Total Swapped    =  10108379 count(s)
* Average  Swapped =   1444054 count(s)
* Min Swapped      =    494802 count(s)
* Max Swapped      =   1922616 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57500 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57587 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57584 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=18345 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=7303 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=58823 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.009008600 sec.
* Average time     = 0.001286943 sec.
* Min time         = 0.001000600 sec.
* Max time         = 0.002002100 sec.
* Total Swapped    =    257142 count(s)
* Average  Swapped =     36734 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     58823 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.191183000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.124118500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.122120800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.265252500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.193185000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 0.896861000 sec.
* Average time     = 0.128123000 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.265252500 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33719 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33677 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001002600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33444 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000998900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=36402 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.006003800 sec.
* Average time     = 0.000857686 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001002600 sec.
* Total Swapped    =    152242 count(s)
* Average  Swapped =     21748 count(s)
* Min Swapped      =      3333 count(s)
* Max Swapped      =     36402 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.124118500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.123117300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9995 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.123116400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.124117300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.123118200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.124118800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.124117300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9989 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.865823800 sec.
* Average time     = 0.123689114 sec.
* Min time         = 0.123116400 sec.
* Max time         = 0.124118800 sec.
* Total Swapped    =     48300 count(s)
* Average  Swapped =      6900 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129635 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129583 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129778 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=218680 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=116627 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.002001500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=213143 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=123006 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.009008800 sec.
* Average time     = 0.001286971 sec.
* Min time         = 0.001000900 sec.
* Max time         = 0.002001800 sec.
* Total Swapped    =   1060452 count(s)
* Average  Swapped =    151493 count(s)
* Min Swapped      =    116627 count(s)
* Max Swapped      =    218680 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.127119400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9985 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.119113200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9987 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.118112600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9983 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.256245800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.209199400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9994 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.830791300 sec.
* Average time     = 0.118684471 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.256245800 sec.
* Total Swapped    =     59947 count(s)
* Average  Swapped =      8563 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48473 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48925 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48799 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=37222 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001003500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=5156 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000999100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49469 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.005007200 sec.
* Average time     = 0.000715314 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001003500 sec.
* Total Swapped    =    238044 count(s)
* Average  Swapped =     34006 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     49469 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.075070700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58291 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.074071000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58193 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.075072100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58188 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.158151600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=60442 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.143134900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58404 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.525500300 sec.
* Average time     = 0.075071471 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.158151600 sec.
* Total Swapped    =    303524 count(s)
* Average  Swapped =     43360 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     60442 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31152 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31250 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31256 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=6022 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1024 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33844 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.003003200 sec.
* Average time     = 0.000429029 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =    134548 count(s)
* Average  Swapped =     19221 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     33844 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9996 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9998 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.003002900 sec.
* Average time     = 0.000428986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =     49997 count(s)
* Average  Swapped =      7142 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     10000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 10000 Count(s)
Total Array size   = 800000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.015015800/  0.002145114/  0.001000000/  0.003004700
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.007007600/  0.001001086/  0.000000000/  0.002002900
- std::sort(inline-func):   0.006006800/  0.000858114/  0.000000000/  0.002002000
- std::sort(functor):       0.006006200/  0.000858029/  0.000000000/  0.001001500
- std::sort(lambda):        0.003002600/  0.000428943/  0.000000000/  0.001007300
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.009010300/  0.001287186/  0.000998200/  0.002003200
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           1.350284900/  0.192897843/  0.000000000/  0.293278400  162016591/   23145227/          0/   49985001
- Shaker sort<S>:           1.220164100/  0.174309157/  0.000000000/  0.328314400  162016591/   23145227/          0/   49985001
- Odd-Even sort<S>:         0.846804100/  0.120972014/  0.000000000/  0.194184500  162016591/   23145227/          0/   49985001
- Shear sort:               0.026024900/  0.003717843/  0.001000900/  0.006005600   10108379/    1444054/     494802/    1922616
- Comb sort:                0.009008600/  0.001286943/  0.001000600/  0.002002100     257142/      36734/          0/      58823
- Gnome sort<S>:            0.896861000/  0.128123000/  0.000000000/  0.265252500  162016591/   23145227/          0/   49985001
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.006003800/  0.000857686/  0.000000000/  0.001002600     152242/      21748/       3333/      36402
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.865823800/  0.123689114/  0.123116400/  0.124118800      48300/       6900/          0/       9995
- Heap sort:                0.009008800/  0.001286971/  0.001000900/  0.002001800    1060452/     151493/     116627/     218680
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.830791300/  0.118684471/  0.000000000/  0.256245800      59947/       8563/          0/       9999
- Shell sort:               0.005007200/  0.000715314/  0.000000000/  0.001003500     238044/      34006/          0/      49469
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.525500300/  0.075071471/  0.000000000/  0.158151600     303524/      43360/          0/      60442
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.003003200/  0.000429029/  0.000000000/  0.001001200     134548/      19221/          0/      33844
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.003002900/  0.000428986/  0.000000000/  0.001001200      49997/       7142/          0/      10000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=31152)
(result1=31152)
(result3=31152)
(result4=31152)
(result5=31152)
(result6=31152)
(result8=31152)
(result9=31152)
(result10=31152)
(result11=31095)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
    (data10_def=00000000)
    (data11_def=00000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=0279DC10)
    (data1_def=0279DC10)
    (data2_def=0279DC10)
    (data3_def=0279DC10)
    (data4_def=0279DC10)
    (data5_def=0279DC10)
    (data8_def=0279DC10)
    (data9_def=0279DC10)
    (data10_def=0279DC10)
    (data11_def=0279DC10)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0279DC10)
    (data1=0279DC10)
    (data2=0279DC10)
    (data3=0279DC10)
    (data4=0279DC10)
    (data5=0279DC10)
    (data8=0279DC10)
    (data9=0279DC10)
    (data10=0279DC10)
    (data11=0279DC10)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0279DC10)
    (data1_val=0279DC10)
    (data2_val=0279DC10)
    (data3_val=0279DC10)
    (data4_val=0279DC10)
    (data5_val=0279DC10)
    (data8_val=0279DC10)
    (data9_val=0279DC10)
    (data10_val=0279DC10)
    (data11_val=0279DC10)
target=0, linearSearch=[0, 2342]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=0277B3E0)
    (data1_def=0277B3E0)
    (data2_def=0277B3E0)
    (data3_def=0277B3E0)
    (data4_def=0277B3E0)
    (data5_def=0277B3E0)
    (data8_def=0277B3E0)
    (data9_def=0277B3E0)
    (data10_def=0277B3E0)
    (data11_def=0277B3E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0277B3E0)
    (data1=0277B3E0)
    (data2=0277B3E0)
    (data3=0277B3E0)
    (data4=0277B3E0)
    (data5=0277B3E0)
    (data8=0277B3E0)
    (data9=0277B3E0)
    (data10=0277B3E0)
    (data11=0277B3E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0277B3E0)
    (data1_val=0277B3E0)
    (data2_val=0277B3E0)
    (data3_val=0277B3E0)
    (data4_val=0277B3E0)
    (data5_val=0277B3E0)
    (data8_val=0277B3E0)
    (data9_val=0277B3E0)
    (data10_val=0277B3E0)
    (data11_val=0277B3E0)
target=2, linearSearch=[2, 575]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=02783E50)
    (data1_def=02783E50)
    (data2_def=02783E50)
    (data3_def=02783E50)
    (data4_def=02783E50)
    (data5_def=02783E50)
    (data8_def=02783E50)
    (data9_def=02783E50)
    (data10_def=02783E50)
    (data11_def=02783E50)
  linearSearch(*array_shuffle1, search_predicate);
    (data=02783E50)
    (data1=02783E50)
    (data2=02783E50)
    (data3=02783E50)
    (data4=02783E50)
    (data5=02783E50)
    (data8=02783E50)
    (data9=02783E50)
    (data10=02783E50)
    (data11=02783E50)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=02783E50)
    (data1_val=02783E50)
    (data2_val=02783E50)
    (data3_val=02783E50)
    (data4_val=02783E50)
    (data5_val=02783E50)
    (data8_val=02783E50)
    (data9_val=02783E50)
    (data10_val=02783E50)
    (data11_val=02783E50)
target=6, linearSearch=[6, 1018]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=0279B1E0)
    (data1_def=0279B1E0)
    (data2_def=0279B1E0)
    (data3_def=0279B1E0)
    (data4_def=0279B1E0)
    (data5_def=0279B1E0)
    (data8_def=0279B1E0)
    (data9_def=0279B1E0)
    (data10_def=0279B1E0)
    (data11_def=0279B1E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0279B1E0)
    (data1=0279B1E0)
    (data2=0279B1E0)
    (data3=0279B1E0)
    (data4=0279B1E0)
    (data5=0279B1E0)
    (data8=0279B1E0)
    (data9=0279B1E0)
    (data10=0279B1E0)
    (data11=0279B1E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0279B1E0)
    (data1_val=0279B1E0)
    (data2_val=0279B1E0)
    (data3_val=0279B1E0)
    (data4_val=0279B1E0)
    (data5_val=0279B1E0)
    (data8_val=0279B1E0)
    (data9_val=0279B1E0)
    (data10_val=0279B1E0)
    (data11_val=0279B1E0)
target=14, linearSearch=[14, 2207]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=0278E620)
    (data1_def=0278E620)
    (data2_def=0278E620)
    (data3_def=0278E620)
    (data4_def=0278E620)
    (data5_def=0278E620)
    (data8_def=0278E620)
    (data9_def=0278E620)
    (data10_def=0278E620)
    (data11_def=0278E620)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0278E620)
    (data1=0278E620)
    (data2=0278E620)
    (data3=0278E620)
    (data4=0278E620)
    (data5=0278E620)
    (data8=0278E620)
    (data9=0278E620)
    (data10=0278E620)
    (data11=0278E620)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0278E620)
    (data1_val=0278E620)
    (data2_val=0278E620)
    (data3_val=0278E620)
    (data4_val=0278E620)
    (data5_val=0278E620)
    (data8_val=0278E620)
    (data9_val=0278E620)
    (data10_val=0278E620)
    (data11_val=0278E620)
target=30, linearSearch=[30, 1555]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=027832C0)
    (data1_def=027832C0)
    (data2_def=027832C0)
    (data3_def=027832C0)
    (data4_def=027832C0)
    (data5_def=027832C0)
    (data8_def=027832C0)
    (data9_def=027832C0)
    (data10_def=027832C0)
    (data11_def=027832C0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=027832C0)
    (data1=027832C0)
    (data2=027832C0)
    (data3=027832C0)
    (data4=027832C0)
    (data5=027832C0)
    (data8=027832C0)
    (data9=027832C0)
    (data10=027832C0)
    (data11=027832C0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=027832C0)
    (data1_val=027832C0)
    (data2_val=027832C0)
    (data3_val=027832C0)
    (data4_val=027832C0)
    (data5_val=027832C0)
    (data8_val=027832C0)
    (data9_val=027832C0)
    (data10_val=027832C0)
    (data11_val=027832C0)
target=62, linearSearch=[62, 981]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=02789300)
    (data1_def=02789300)
    (data2_def=02789300)
    (data3_def=02789300)
    (data4_def=02789300)
    (data5_def=02789300)
    (data8_def=02789300)
    (data9_def=02789300)
    (data10_def=02789300)
    (data11_def=02789300)
  linearSearch(*array_shuffle1, search_predicate);
    (data=02789300)
    (data1=02789300)
    (data2=02789300)
    (data3=02789300)
    (data4=02789300)
    (data5=02789300)
    (data8=02789300)
    (data9=02789300)
    (data10=02789300)
    (data11=02789300)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=02789300)
    (data1_val=02789300)
    (data2_val=02789300)
    (data3_val=02789300)
    (data4_val=02789300)
    (data5_val=02789300)
    (data8_val=02789300)
    (data9_val=02789300)
    (data10_val=02789300)
    (data11_val=02789300)
target=126, linearSearch=[126, 1289]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=0280F540)
    (data1_def=0280F540)
    (data2_def=0280F540)
    (data3_def=0280F540)
    (data4_def=0280F540)
    (data5_def=0280F540)
    (data8_def=0280F540)
    (data9_def=0280F540)
    (data10_def=0280F540)
    (data11_def=0280F540)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0280F540)
    (data1=0280F540)
    (data2=0280F540)
    (data3=0280F540)
    (data4=0280F540)
    (data5=0280F540)
    (data8=0280F540)
    (data9=0280F540)
    (data10=0280F540)
    (data11=0280F540)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0280F540)
    (data1_val=0280F540)
    (data2_val=0280F540)
    (data3_val=0280F540)
    (data4_val=0280F540)
    (data5_val=0280F540)
    (data8_val=0280F540)
    (data9_val=0280F540)
    (data10_val=0280F540)
    (data11_val=0280F540)
target=254, linearSearch=[254, 8157]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
   (data10_def=00000000)
    (data11_def=00000000)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=02770030)
    (data1_def=02770030)
    (data2_def=02770030)
    (data3_def=02770030)
    (data4_def=02770030)
    (data5_def=02770030)
    (data8_def=02770030)
    (data9_def=02770030)
   (data10_def=02770030)
    (data11_def=02770030)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=02770030)
    (data1=02770030)
    (data2=02770030)
    (data3=02770030)
    (data4=02770030)
    (data5=02770030)
    (data8=02770030)
    (data9=02770030)
    (data10=02770030)
    (data11=02770030)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=02770030)
    (data1_val=02770030)
    (data2_val=02770030)
    (data3_val=02770030)
    (data4_val=02770030)
    (data5_val=02770030)
    (data8_val=02770030)
    (data9_val=02770030)
    (data10_val=02770030)
    (data11_val=02770030)
target=0, binarySearch=[0, 2342]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=02770210)
    (data1_def=02770210)
    (data2_def=02770210)
    (data3_def=02770210)
    (data4_def=02770210)
    (data5_def=02770210)
    (data8_def=02770210)
    (data9_def=02770210)
   (data10_def=02770210)
    (data11_def=02770210)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=02770210)
    (data1=02770210)
    (data2=02770210)
    (data3=02770210)
    (data4=02770210)
    (data5=02770210)
    (data8=02770210)
    (data9=02770210)
    (data10=02770210)
    (data11=02770210)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=02770210)
    (data1_val=02770210)
    (data2_val=02770210)
    (data3_val=02770210)
    (data4_val=02770210)
    (data5_val=02770210)
    (data8_val=02770210)
    (data9_val=02770210)
    (data10_val=02770210)
    (data11_val=02770210)
target=2, binarySearch=[2, 6831]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=027705D0)
    (data1_def=027705D0)
    (data2_def=027705D0)
    (data3_def=027705D0)
    (data4_def=027705D0)
    (data5_def=027705D0)
    (data8_def=027705D0)
    (data9_def=027705D0)
   (data10_def=027705D0)
    (data11_def=027705D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=027705D0)
    (data1=027705D0)
    (data2=027705D0)
    (data3=027705D0)
    (data4=027705D0)
    (data5=027705D0)
    (data8=027705D0)
    (data9=027705D0)
    (data10=027705D0)
    (data11=027705D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=027705D0)
    (data1_val=027705D0)
    (data2_val=027705D0)
    (data3_val=027705D0)
    (data4_val=027705D0)
    (data5_val=027705D0)
    (data8_val=027705D0)
    (data9_val=027705D0)
    (data10_val=027705D0)
    (data11_val=027705D0)
target=6, binarySearch=[6, 1018]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=02770D50)
    (data1_def=02770D50)
    (data2_def=02770D50)
    (data3_def=02770D50)
    (data4_def=02770D50)
    (data5_def=02770D50)
    (data8_def=02770D50)
    (data9_def=02770D50)
   (data10_def=02770D50)
    (data11_def=02770D50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=02770D50)
    (data1=02770D50)
    (data2=02770D50)
    (data3=02770D50)
    (data4=02770D50)
    (data5=02770D50)
    (data8=02770D50)
    (data9=02770D50)
    (data10=02770D50)
    (data11=02770D50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=02770D50)
    (data1_val=02770D50)
    (data2_val=02770D50)
    (data3_val=02770D50)
    (data4_val=02770D50)
    (data5_val=02770D50)
    (data8_val=02770D50)
    (data9_val=02770D50)
    (data10_val=02770D50)
    (data11_val=02770D50)
target=14, binarySearch=[14, 4706]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=02771C50)
    (data1_def=02771C50)
    (data2_def=02771C50)
    (data3_def=02771C50)
    (data4_def=02771C50)
    (data5_def=02771C50)
    (data8_def=02771C50)
    (data9_def=02771C50)
   (data10_def=02771C50)
    (data11_def=02771C50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=02771C50)
    (data1=02771C50)
    (data2=02771C50)
    (data3=02771C50)
    (data4=02771C50)
    (data5=02771C50)
    (data8=02771C50)
    (data9=02771C50)
    (data10=02771C50)
    (data11=02771C50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=02771C50)
    (data1_val=02771C50)
    (data2_val=02771C50)
    (data3_val=02771C50)
    (data4_val=02771C50)
    (data5_val=02771C50)
    (data8_val=02771C50)
    (data9_val=02771C50)
    (data10_val=02771C50)
    (data11_val=02771C50)
target=30, binarySearch=[30, 5065]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=02773A50)
    (data1_def=02773A50)
    (data2_def=02773A50)
    (data3_def=02773A50)
    (data4_def=02773A50)
    (data5_def=02773A50)
    (data8_def=02773A50)
    (data9_def=02773A50)
   (data10_def=02773A50)
    (data11_def=02773A50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=02773A50)
    (data1=02773A50)
    (data2=02773A50)
    (data3=02773A50)
    (data4=02773A50)
    (data5=02773A50)
    (data8=02773A50)
    (data9=02773A50)
    (data10=02773A50)
    (data11=02773A50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=02773A50)
    (data1_val=02773A50)
    (data2_val=02773A50)
    (data3_val=02773A50)
    (data4_val=02773A50)
    (data5_val=02773A50)
    (data8_val=02773A50)
    (data9_val=02773A50)
    (data10_val=02773A50)
    (data11_val=02773A50)
target=62, binarySearch=[62, 9221]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=02777650)
    (data1_def=02777650)
    (data2_def=02777650)
    (data3_def=02777650)
    (data4_def=02777650)
    (data5_def=02777650)
    (data8_def=02777650)
    (data9_def=02777650)
   (data10_def=02777650)
    (data11_def=02777650)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=02777650)
    (data1=02777650)
    (data2=02777650)
    (data3=02777650)
    (data4=02777650)
    (data5=02777650)
    (data8=02777650)
    (data9=02777650)
    (data10=02777650)
    (data11=02777650)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=02777650)
    (data1_val=02777650)
    (data2_val=02777650)
    (data3_val=02777650)
    (data4_val=02777650)
    (data5_val=02777650)
    (data8_val=02777650)
    (data9_val=02777650)
    (data10_val=02777650)
    (data11_val=02777650)
target=126, binarySearch=[126, 1289]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=0277EE50)
    (data1_def=0277EE50)
    (data2_def=0277EE50)
    (data3_def=0277EE50)
    (data4_def=0277EE50)
    (data5_def=0277EE50)
    (data8_def=0277EE50)
    (data9_def=0277EE50)
   (data10_def=0277EE50)
    (data11_def=0277EE50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0277EE50)
    (data1=0277EE50)
    (data2=0277EE50)
    (data3=0277EE50)
    (data4=0277EE50)
    (data5=0277EE50)
    (data8=0277EE50)
    (data9=0277EE50)
    (data10=0277EE50)
    (data11=0277EE50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0277EE50)
    (data1_val=0277EE50)
    (data2_val=0277EE50)
    (data3_val=0277EE50)
    (data4_val=0277EE50)
    (data5_val=0277EE50)
    (data8_val=0277EE50)
    (data9_val=0277EE50)
    (data10_val=0277EE50)
    (data11_val=0277EE50)
target=254, binarySearch=[254, 8763]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=6.700382600 sec.
