============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=4951 / record(s)=10000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=5002 / record(s)=10000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=4984 / record(s)=10000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=10000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=3333 / record(s)=10000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=10000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=4976 / record(s)=10000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.003002700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001008500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000993900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.003002600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.014012600 sec.
* Average time     = 0.002001800 sec.
* Min time         = 0.000993900 sec.
* Max time         = 0.003002900 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002001400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.006005600 sec.
* Average time     = 0.000857943 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002001400 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.007007100 sec.
* Average time     = 0.001001014 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002001700 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.004004100 sec.
* Average time     = 0.000572014 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.004003800 sec.
* Average time     = 0.000571971 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001100 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002002000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.010009700 sec.
* Average time     = 0.001429957 sec.
* Min time         = 0.001000900 sec.
* Max time         = 0.002002000 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.254242000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.242230900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.268254600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.274255500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.067064000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.273260800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 1.379307800 sec.
* Average time     = 0.197043971 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.274255500 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.195185100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.185177200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.210200100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.312295700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.241230300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 1.144088400 sec.
* Average time     = 0.163441200 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.312295700 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.130123500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.131124700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.130124100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.195186000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.060057500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.157149700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.803765500 sec.
* Average time     = 0.114823643 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.195186000 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.005004700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1892312 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.005004700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1873730 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.005005000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1860168 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=485134 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.003002600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1465201 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=485527 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.005004700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1882044 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.025023500 sec.
* Average time     = 0.003574786 sec.
* Min time         = 0.001000900 sec.
* Max time         = 0.005005000 sec.
* Total Swapped    =   9944116 count(s)
* Average  Swapped =   1420588 count(s)
* Min Swapped      =    485134 count(s)
* Max Swapped      =   1892312 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57500 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57587 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57584 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=18345 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=7303 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=58823 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.008007200 sec.
* Average time     = 0.001143886 sec.
* Min time         = 0.001000600 sec.
* Max time         = 0.002001700 sec.
* Total Swapped    =    257142 count(s)
* Average  Swapped =     36734 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     58823 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.167160200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.123116500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.128122300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.258247300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.193183700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 0.869830000 sec.
* Average time     = 0.124261429 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.258247300 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33719 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33677 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33444 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=36402 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.006006700 sec.
* Average time     = 0.000858100 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001700 sec.
* Total Swapped    =    152242 count(s)
* Average  Swapped =     21748 count(s)
* Min Swapped      =      3333 count(s)
* Max Swapped      =     36402 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.124117900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.125118600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9995 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.124118200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.124119100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.123116500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.124119400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.124118200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9989 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.868827900 sec.
* Average time     = 0.124118271 sec.
* Min time         = 0.123116500 sec.
* Max time         = 0.125118600 sec.
* Total Swapped    =     48300 count(s)
* Average  Swapped =      6900 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129635 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129583 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001002000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129778 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=218680 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=116627 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=213143 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=123006 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.009008500 sec.
* Average time     = 0.001286929 sec.
* Min time         = 0.001000600 sec.
* Max time         = 0.002001700 sec.
* Total Swapped    =   1060452 count(s)
* Average  Swapped =    151493 count(s)
* Min Swapped      =    116627 count(s)
* Max Swapped      =    218680 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.117110600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9985 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.117112700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9987 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.119114400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9983 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.253240500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.191184000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9994 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.798762200 sec.
* Average time     = 0.114108886 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.253240500 sec.
* Total Swapped    =     59947 count(s)
* Average  Swapped =      8563 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48473 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48925 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48799 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=37222 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=5156 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49469 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.005004400 sec.
* Average time     = 0.000714914 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =    238044 count(s)
* Average  Swapped =     34006 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     49469 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.075071600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58291 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.073067800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58193 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.072068600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58188 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.159153100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=60442 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.120114500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58404 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.499475600 sec.
* Average time     = 0.071353657 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.159153100 sec.
* Total Swapped    =    303524 count(s)
* Average  Swapped =     43360 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     60442 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31152 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31250 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31256 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=6022 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1024 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33844 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.004003200 sec.
* Average time     = 0.000571886 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001100 sec.
* Total Swapped    =    134548 count(s)
* Average  Swapped =     19221 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     33844 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9996 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9998 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.001001200 sec.
* Average time     = 0.000143029 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =     49997 count(s)
* Average  Swapped =      7142 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     10000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 10000 Count(s)
Total Array size   = 800000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.014012600/  0.002001800/  0.000993900/  0.003002900
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.006005600/  0.000857943/  0.000000000/  0.002001400
- std::sort(inline-func):   0.007007100/  0.001001014/  0.000000000/  0.002001700
- std::sort(functor):       0.004004100/  0.000572014/  0.000000000/  0.001001200
- std::sort(lambda):        0.004003800/  0.000571971/  0.000000000/  0.001001100
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.010009700/  0.001429957/  0.001000900/  0.002002000
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           1.379307800/  0.197043971/  0.000000000/  0.274255500  162016591/   23145227/          0/   49985001
- Shaker sort<S>:           1.144088400/  0.163441200/  0.000000000/  0.312295700  162016591/   23145227/          0/   49985001
- Odd-Even sort<S>:         0.803765500/  0.114823643/  0.000000000/  0.195186000  162016591/   23145227/          0/   49985001
- Shear sort:               0.025023500/  0.003574786/  0.001000900/  0.005005000    9944116/    1420588/     485134/    1892312
- Comb sort:                0.008007200/  0.001143886/  0.001000600/  0.002001700     257142/      36734/          0/      58823
- Gnome sort<S>:            0.869830000/  0.124261429/  0.000000000/  0.258247300  162016591/   23145227/          0/   49985001
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.006006700/  0.000858100/  0.000000000/  0.001001700     152242/      21748/       3333/      36402
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.868827900/  0.124118271/  0.123116500/  0.125118600      48300/       6900/          0/       9995
- Heap sort:                0.009008500/  0.001286929/  0.001000600/  0.002001700    1060452/     151493/     116627/     218680
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.798762200/  0.114108886/  0.000000000/  0.253240500      59947/       8563/          0/       9999
- Shell sort:               0.005004400/  0.000714914/  0.000000000/  0.001001200     238044/      34006/          0/      49469
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.499475600/  0.071353657/  0.000000000/  0.159153100     303524/      43360/          0/      60442
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.004003200/  0.000571886/  0.000000000/  0.001001100     134548/      19221/          0/      33844
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.001001200/  0.000143029/  0.000000000/  0.001001200      49997/       7142/          0/      10000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=31152)
(result1=31152)
(result3=31152)
(result4=31152)
(result5=31152)
(result6=31152)
(result8=31152)
(result9=31152)
(result10=31152)
(result11=31095)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
    (data10_def=00000000)
    (data11_def=00000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=003CCC10)
    (data1_def=003CCC10)
    (data2_def=003CCC10)
    (data3_def=003CCC10)
    (data4_def=003CCC10)
    (data5_def=003CCC10)
    (data8_def=003CCC10)
    (data9_def=003CCC10)
    (data10_def=003CCC10)
    (data11_def=003CCC10)
  linearSearch(*array_shuffle1, search_predicate);
    (data=003CCC10)
    (data1=003CCC10)
    (data2=003CCC10)
    (data3=003CCC10)
    (data4=003CCC10)
    (data5=003CCC10)
    (data8=003CCC10)
    (data9=003CCC10)
    (data10=003CCC10)
    (data11=003CCC10)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=003CCC10)
    (data1_val=003CCC10)
    (data2_val=003CCC10)
    (data3_val=003CCC10)
    (data4_val=003CCC10)
    (data5_val=003CCC10)
    (data8_val=003CCC10)
    (data9_val=003CCC10)
    (data10_val=003CCC10)
    (data11_val=003CCC10)
target=0, linearSearch=[0, 2342]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=003AA3E0)
    (data1_def=003AA3E0)
    (data2_def=003AA3E0)
    (data3_def=003AA3E0)
    (data4_def=003AA3E0)
    (data5_def=003AA3E0)
    (data8_def=003AA3E0)
    (data9_def=003AA3E0)
    (data10_def=003AA3E0)
    (data11_def=003AA3E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=003AA3E0)
    (data1=003AA3E0)
    (data2=003AA3E0)
    (data3=003AA3E0)
    (data4=003AA3E0)
    (data5=003AA3E0)
    (data8=003AA3E0)
    (data9=003AA3E0)
    (data10=003AA3E0)
    (data11=003AA3E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=003AA3E0)
    (data1_val=003AA3E0)
    (data2_val=003AA3E0)
    (data3_val=003AA3E0)
    (data4_val=003AA3E0)
    (data5_val=003AA3E0)
    (data8_val=003AA3E0)
    (data9_val=003AA3E0)
    (data10_val=003AA3E0)
    (data11_val=003AA3E0)
target=2, linearSearch=[2, 575]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=003B2E50)
    (data1_def=003B2E50)
    (data2_def=003B2E50)
    (data3_def=003B2E50)
    (data4_def=003B2E50)
    (data5_def=003B2E50)
    (data8_def=003B2E50)
    (data9_def=003B2E50)
    (data10_def=003B2E50)
    (data11_def=003B2E50)
  linearSearch(*array_shuffle1, search_predicate);
    (data=003B2E50)
    (data1=003B2E50)
    (data2=003B2E50)
    (data3=003B2E50)
    (data4=003B2E50)
    (data5=003B2E50)
    (data8=003B2E50)
    (data9=003B2E50)
    (data10=003B2E50)
    (data11=003B2E50)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=003B2E50)
    (data1_val=003B2E50)
    (data2_val=003B2E50)
    (data3_val=003B2E50)
    (data4_val=003B2E50)
    (data5_val=003B2E50)
    (data8_val=003B2E50)
    (data9_val=003B2E50)
    (data10_val=003B2E50)
    (data11_val=003B2E50)
target=6, linearSearch=[6, 1018]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=003CA1E0)
    (data1_def=003CA1E0)
    (data2_def=003CA1E0)
    (data3_def=003CA1E0)
    (data4_def=003CA1E0)
    (data5_def=003CA1E0)
    (data8_def=003CA1E0)
    (data9_def=003CA1E0)
    (data10_def=003CA1E0)
    (data11_def=003CA1E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=003CA1E0)
    (data1=003CA1E0)
    (data2=003CA1E0)
    (data3=003CA1E0)
    (data4=003CA1E0)
    (data5=003CA1E0)
    (data8=003CA1E0)
    (data9=003CA1E0)
    (data10=003CA1E0)
    (data11=003CA1E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=003CA1E0)
    (data1_val=003CA1E0)
    (data2_val=003CA1E0)
    (data3_val=003CA1E0)
    (data4_val=003CA1E0)
    (data5_val=003CA1E0)
    (data8_val=003CA1E0)
    (data9_val=003CA1E0)
    (data10_val=003CA1E0)
    (data11_val=003CA1E0)
target=14, linearSearch=[14, 2207]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=003BD620)
    (data1_def=003BD620)
    (data2_def=003BD620)
    (data3_def=003BD620)
    (data4_def=003BD620)
    (data5_def=003BD620)
    (data8_def=003BD620)
    (data9_def=003BD620)
    (data10_def=003BD620)
    (data11_def=003BD620)
  linearSearch(*array_shuffle1, search_predicate);
    (data=003BD620)
    (data1=003BD620)
    (data2=003BD620)
    (data3=003BD620)
    (data4=003BD620)
    (data5=003BD620)
    (data8=003BD620)
    (data9=003BD620)
    (data10=003BD620)
    (data11=003BD620)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=003BD620)
    (data1_val=003BD620)
    (data2_val=003BD620)
    (data3_val=003BD620)
    (data4_val=003BD620)
    (data5_val=003BD620)
    (data8_val=003BD620)
    (data9_val=003BD620)
    (data10_val=003BD620)
    (data11_val=003BD620)
target=30, linearSearch=[30, 1555]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=003B22C0)
    (data1_def=003B22C0)
    (data2_def=003B22C0)
    (data3_def=003B22C0)
    (data4_def=003B22C0)
    (data5_def=003B22C0)
    (data8_def=003B22C0)
    (data9_def=003B22C0)
    (data10_def=003B22C0)
    (data11_def=003B22C0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=003B22C0)
    (data1=003B22C0)
    (data2=003B22C0)
    (data3=003B22C0)
    (data4=003B22C0)
    (data5=003B22C0)
    (data8=003B22C0)
    (data9=003B22C0)
    (data10=003B22C0)
    (data11=003B22C0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=003B22C0)
    (data1_val=003B22C0)
    (data2_val=003B22C0)
    (data3_val=003B22C0)
    (data4_val=003B22C0)
    (data5_val=003B22C0)
    (data8_val=003B22C0)
    (data9_val=003B22C0)
    (data10_val=003B22C0)
    (data11_val=003B22C0)
target=62, linearSearch=[62, 981]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=003B8300)
    (data1_def=003B8300)
    (data2_def=003B8300)
    (data3_def=003B8300)
    (data4_def=003B8300)
    (data5_def=003B8300)
    (data8_def=003B8300)
    (data9_def=003B8300)
    (data10_def=003B8300)
    (data11_def=003B8300)
  linearSearch(*array_shuffle1, search_predicate);
    (data=003B8300)
    (data1=003B8300)
    (data2=003B8300)
    (data3=003B8300)
    (data4=003B8300)
    (data5=003B8300)
    (data8=003B8300)
    (data9=003B8300)
    (data10=003B8300)
    (data11=003B8300)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=003B8300)
    (data1_val=003B8300)
    (data2_val=003B8300)
    (data3_val=003B8300)
    (data4_val=003B8300)
    (data5_val=003B8300)
    (data8_val=003B8300)
    (data9_val=003B8300)
    (data10_val=003B8300)
    (data11_val=003B8300)
target=126, linearSearch=[126, 1289]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=0043E540)
    (data1_def=0043E540)
    (data2_def=0043E540)
    (data3_def=0043E540)
    (data4_def=0043E540)
    (data5_def=0043E540)
    (data8_def=0043E540)
    (data9_def=0043E540)
    (data10_def=0043E540)
    (data11_def=0043E540)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0043E540)
    (data1=0043E540)
    (data2=0043E540)
    (data3=0043E540)
    (data4=0043E540)
    (data5=0043E540)
    (data8=0043E540)
    (data9=0043E540)
    (data10=0043E540)
    (data11=0043E540)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0043E540)
    (data1_val=0043E540)
    (data2_val=0043E540)
    (data3_val=0043E540)
    (data4_val=0043E540)
    (data5_val=0043E540)
    (data8_val=0043E540)
    (data9_val=0043E540)
    (data10_val=0043E540)
    (data11_val=0043E540)
target=254, linearSearch=[254, 8157]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
   (data10_def=00000000)
    (data11_def=00000000)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=0039F030)
    (data1_def=0039F030)
    (data2_def=0039F030)
    (data3_def=0039F030)
    (data4_def=0039F030)
    (data5_def=0039F030)
    (data8_def=0039F030)
    (data9_def=0039F030)
   (data10_def=0039F030)
    (data11_def=0039F030)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0039F030)
    (data1=0039F030)
    (data2=0039F030)
    (data3=0039F030)
    (data4=0039F030)
    (data5=0039F030)
    (data8=0039F030)
    (data9=0039F030)
    (data10=0039F030)
    (data11=0039F030)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0039F030)
    (data1_val=0039F030)
    (data2_val=0039F030)
    (data3_val=0039F030)
    (data4_val=0039F030)
    (data5_val=0039F030)
    (data8_val=0039F030)
    (data9_val=0039F030)
    (data10_val=0039F030)
    (data11_val=0039F030)
target=0, binarySearch=[0, 2342]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=0039F210)
    (data1_def=0039F210)
    (data2_def=0039F210)
    (data3_def=0039F210)
    (data4_def=0039F210)
    (data5_def=0039F210)
    (data8_def=0039F210)
    (data9_def=0039F210)
   (data10_def=0039F210)
    (data11_def=0039F210)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0039F210)
    (data1=0039F210)
    (data2=0039F210)
    (data3=0039F210)
    (data4=0039F210)
    (data5=0039F210)
    (data8=0039F210)
    (data9=0039F210)
    (data10=0039F210)
    (data11=0039F210)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0039F210)
    (data1_val=0039F210)
    (data2_val=0039F210)
    (data3_val=0039F210)
    (data4_val=0039F210)
    (data5_val=0039F210)
    (data8_val=0039F210)
    (data9_val=0039F210)
    (data10_val=0039F210)
    (data11_val=0039F210)
target=2, binarySearch=[2, 6831]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=0039F5D0)
    (data1_def=0039F5D0)
    (data2_def=0039F5D0)
    (data3_def=0039F5D0)
    (data4_def=0039F5D0)
    (data5_def=0039F5D0)
    (data8_def=0039F5D0)
    (data9_def=0039F5D0)
   (data10_def=0039F5D0)
    (data11_def=0039F5D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0039F5D0)
    (data1=0039F5D0)
    (data2=0039F5D0)
    (data3=0039F5D0)
    (data4=0039F5D0)
    (data5=0039F5D0)
    (data8=0039F5D0)
    (data9=0039F5D0)
    (data10=0039F5D0)
    (data11=0039F5D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0039F5D0)
    (data1_val=0039F5D0)
    (data2_val=0039F5D0)
    (data3_val=0039F5D0)
    (data4_val=0039F5D0)
    (data5_val=0039F5D0)
    (data8_val=0039F5D0)
    (data9_val=0039F5D0)
    (data10_val=0039F5D0)
    (data11_val=0039F5D0)
target=6, binarySearch=[6, 1018]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=0039FD50)
    (data1_def=0039FD50)
    (data2_def=0039FD50)
    (data3_def=0039FD50)
    (data4_def=0039FD50)
    (data5_def=0039FD50)
    (data8_def=0039FD50)
    (data9_def=0039FD50)
   (data10_def=0039FD50)
    (data11_def=0039FD50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0039FD50)
    (data1=0039FD50)
    (data2=0039FD50)
    (data3=0039FD50)
    (data4=0039FD50)
    (data5=0039FD50)
    (data8=0039FD50)
    (data9=0039FD50)
    (data10=0039FD50)
    (data11=0039FD50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0039FD50)
    (data1_val=0039FD50)
    (data2_val=0039FD50)
    (data3_val=0039FD50)
    (data4_val=0039FD50)
    (data5_val=0039FD50)
    (data8_val=0039FD50)
    (data9_val=0039FD50)
    (data10_val=0039FD50)
    (data11_val=0039FD50)
target=14, binarySearch=[14, 4706]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=003A0C50)
    (data1_def=003A0C50)
    (data2_def=003A0C50)
    (data3_def=003A0C50)
    (data4_def=003A0C50)
    (data5_def=003A0C50)
    (data8_def=003A0C50)
    (data9_def=003A0C50)
   (data10_def=003A0C50)
    (data11_def=003A0C50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=003A0C50)
    (data1=003A0C50)
    (data2=003A0C50)
    (data3=003A0C50)
    (data4=003A0C50)
    (data5=003A0C50)
    (data8=003A0C50)
    (data9=003A0C50)
    (data10=003A0C50)
    (data11=003A0C50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=003A0C50)
    (data1_val=003A0C50)
    (data2_val=003A0C50)
    (data3_val=003A0C50)
    (data4_val=003A0C50)
    (data5_val=003A0C50)
    (data8_val=003A0C50)
    (data9_val=003A0C50)
    (data10_val=003A0C50)
    (data11_val=003A0C50)
target=30, binarySearch=[30, 5065]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=003A2A50)
    (data1_def=003A2A50)
    (data2_def=003A2A50)
    (data3_def=003A2A50)
    (data4_def=003A2A50)
    (data5_def=003A2A50)
    (data8_def=003A2A50)
    (data9_def=003A2A50)
   (data10_def=003A2A50)
    (data11_def=003A2A50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=003A2A50)
    (data1=003A2A50)
    (data2=003A2A50)
    (data3=003A2A50)
    (data4=003A2A50)
    (data5=003A2A50)
    (data8=003A2A50)
    (data9=003A2A50)
    (data10=003A2A50)
    (data11=003A2A50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=003A2A50)
    (data1_val=003A2A50)
    (data2_val=003A2A50)
    (data3_val=003A2A50)
    (data4_val=003A2A50)
    (data5_val=003A2A50)
    (data8_val=003A2A50)
    (data9_val=003A2A50)
    (data10_val=003A2A50)
    (data11_val=003A2A50)
target=62, binarySearch=[62, 9221]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=003A6650)
    (data1_def=003A6650)
    (data2_def=003A6650)
    (data3_def=003A6650)
    (data4_def=003A6650)
    (data5_def=003A6650)
    (data8_def=003A6650)
    (data9_def=003A6650)
   (data10_def=003A6650)
    (data11_def=003A6650)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=003A6650)
    (data1=003A6650)
    (data2=003A6650)
    (data3=003A6650)
    (data4=003A6650)
    (data5=003A6650)
    (data8=003A6650)
    (data9=003A6650)
    (data10=003A6650)
    (data11=003A6650)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=003A6650)
    (data1_val=003A6650)
    (data2_val=003A6650)
    (data3_val=003A6650)
    (data4_val=003A6650)
    (data5_val=003A6650)
    (data8_val=003A6650)
    (data9_val=003A6650)
    (data10_val=003A6650)
    (data11_val=003A6650)
target=126, binarySearch=[126, 1289]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=003ADE50)
    (data1_def=003ADE50)
    (data2_def=003ADE50)
    (data3_def=003ADE50)
    (data4_def=003ADE50)
    (data5_def=003ADE50)
    (data8_def=003ADE50)
    (data9_def=003ADE50)
   (data10_def=003ADE50)
    (data11_def=003ADE50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=003ADE50)
    (data1=003ADE50)
    (data2=003ADE50)
    (data3=003ADE50)
    (data4=003ADE50)
    (data5=003ADE50)
    (data8=003ADE50)
    (data9=003ADE50)
    (data10=003ADE50)
    (data11=003ADE50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=003ADE50)
    (data1_val=003ADE50)
    (data2_val=003ADE50)
    (data3_val=003ADE50)
    (data4_val=003ADE50)
    (data5_val=003ADE50)
    (data8_val=003ADE50)
    (data9_val=003ADE50)
    (data10_val=003ADE50)
    (data11_val=003ADE50)
target=254, binarySearch=[254, 8763]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=6.519208800 sec.
