============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=4951 / record(s)=10000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=5002 / record(s)=10000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=4984 / record(s)=10000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=10000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=3333 / record(s)=10000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=10000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=4976 / record(s)=10000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.003002600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003002700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.003002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.003002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.012011100 sec.
* Average time     = 0.001715871 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.003002900 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002002000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.007006200 sec.
* Average time     = 0.001000886 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002002000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.006005900 sec.
* Average time     = 0.000857986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002001800 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.005004600 sec.
* Average time     = 0.000714943 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.003003300 sec.
* Average time     = 0.000429043 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002001500 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001008500 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001994700 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.010009400 sec.
* Average time     = 0.001429914 sec.
* Min time         = 0.001000900 sec.
* Max time         = 0.002001800 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.274262500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.242230000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.263250300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.273261600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.067063900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.257245800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 1.377314100 sec.
* Average time     = 0.196759157 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.274262500 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.190181000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.191182300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.246233800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.258245600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.236224400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 1.122067100 sec.
* Average time     = 0.160295300 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.258245600 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.128121300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.134127500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.131124800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.196186600 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.063060100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.164156200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.816776500 sec.
* Average time     = 0.116682357 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.196186600 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.005004700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1892312 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.005004700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1873730 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.004003500 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1860168 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=485134 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.003002900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1465201 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=485527 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.005004700 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1882044 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.024022300 sec.
* Average time     = 0.003431757 sec.
* Min time         = 0.001000900 sec.
* Max time         = 0.005004700 sec.
* Total Swapped    =   9944116 count(s)
* Average  Swapped =   1420588 count(s)
* Min Swapped      =    485134 count(s)
* Max Swapped      =   1892312 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002002000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57500 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57587 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=57584 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=18345 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=7303 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=58823 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.008007300 sec.
* Average time     = 0.001143900 sec.
* Min time         = 0.001000600 sec.
* Max time         = 0.002002000 sec.
* Total Swapped    =    257142 count(s)
* Average  Swapped =     36734 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     58823 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.174166700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=25018590 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.122115400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24895289 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.122116000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=24704876 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.256244400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=49985001 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=19995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.226215900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=37392840 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 0.901859600 sec.
* Average time     = 0.128837086 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.256244400 sec.
* Total Swapped    = 162016591 count(s)
* Average  Swapped =  23145227 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =  49985001 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33719 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33677 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33444 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=3334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=36402 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.003002400 sec.
* Average time     = 0.000428914 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =    152242 count(s)
* Average  Swapped =     21748 count(s)
* Min Swapped      =      3333 count(s)
* Max Swapped      =     36402 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.124119300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.123116400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9995 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.123116400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9990 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.124117500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.123118300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=8333 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.123121000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.123113400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=9989 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.863822300 sec.
* Average time     = 0.123403186 sec.
* Min time         = 0.123113400 sec.
* Max time         = 0.124119300 sec.
* Total Swapped    =     48300 count(s)
* Average  Swapped =      6900 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129635 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129583 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=129778 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=218680 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001002100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=116627 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.002000800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=213143 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=123006 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.008006500 sec.
* Average time     = 0.001143786 sec.
* Min time         = 0.001000000 sec.
* Max time         = 0.002000800 sec.
* Total Swapped    =   1060452 count(s)
* Average  Swapped =    151493 count(s)
* Min Swapped      =    116627 count(s)
* Max Swapped      =    218680 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.116108700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9985 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.116111900 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9987 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.115110200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9983 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.250238200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.201188100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9994 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.798757100 sec.
* Average time     = 0.114108157 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.250238200 sec.
* Total Swapped    =     59947 count(s)
* Average  Swapped =      8563 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      9999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48473 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48925 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002010200 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=48799 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000992400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=37222 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=5156 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=49469 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.006005600 sec.
* Average time     = 0.000857943 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002010200 sec.
* Total Swapped    =    238044 count(s)
* Average  Swapped =     34006 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     49469 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.074071500 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58291 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.074070300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58193 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.096091400 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58188 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.158149200 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=60442 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.134130100 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=58404 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.537513600 sec.
* Average time     = 0.076787657 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.158149200 sec.
* Total Swapped    =    303524 count(s)
* Average  Swapped =     43360 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     60442 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31152 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001002100 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31250 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000999400 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=31256 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=6022 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001800 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=1024 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=10000]
Array is NOT STABLE.
[swapped=33844 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.005004500 sec.
* Average time     = 0.000714929 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001002100 sec.
* Total Swapped    =    134548 count(s)
* Average  Swapped =     19221 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     33844 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001002300 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9996 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9998 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=10000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001700 sec.
Array is ordered. [record(s)=10000]
Array is stable.
[swapped=9999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.002004000 sec.
* Average time     = 0.000286286 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001002300 sec.
* Total Swapped    =     49997 count(s)
* Average  Swapped =      7142 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =     10000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 10000 Count(s)
Total Array size   = 800000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.012011100/  0.001715871/  0.000000000/  0.003002900
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.007006200/  0.001000886/  0.000000000/  0.002002000
- std::sort(inline-func):   0.006005900/  0.000857986/  0.000000000/  0.002001800
- std::sort(functor):       0.005004600/  0.000714943/  0.000000000/  0.001001200
- std::sort(lambda):        0.003003300/  0.000429043/  0.000000000/  0.001001200
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.010009400/  0.001429914/  0.001000900/  0.002001800
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           1.377314100/  0.196759157/  0.000000000/  0.274262500  162016591/   23145227/          0/   49985001
- Shaker sort<S>:           1.122067100/  0.160295300/  0.000000000/  0.258245600  162016591/   23145227/          0/   49985001
- Odd-Even sort<S>:         0.816776500/  0.116682357/  0.000000000/  0.196186600  162016591/   23145227/          0/   49985001
- Shear sort:               0.024022300/  0.003431757/  0.001000900/  0.005004700    9944116/    1420588/     485134/    1892312
- Comb sort:                0.008007300/  0.001143900/  0.001000600/  0.002002000     257142/      36734/          0/      58823
- Gnome sort<S>:            0.901859600/  0.128837086/  0.000000000/  0.256244400  162016591/   23145227/          0/   49985001
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.003002400/  0.000428914/  0.000000000/  0.001001200     152242/      21748/       3333/      36402
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.863822300/  0.123403186/  0.123113400/  0.124119300      48300/       6900/          0/       9995
- Heap sort:                0.008006500/  0.001143786/  0.001000000/  0.002000800    1060452/     151493/     116627/     218680
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.798757100/  0.114108157/  0.000000000/  0.250238200      59947/       8563/          0/       9999
- Shell sort:               0.006005600/  0.000857943/  0.000000000/  0.002010200     238044/      34006/          0/      49469
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.537513600/  0.076787657/  0.000000000/  0.158149200     303524/      43360/          0/      60442
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.005004500/  0.000714929/  0.000000000/  0.001002100     134548/      19221/          0/      33844
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.002004000/  0.000286286/  0.000000000/  0.001002300      49997/       7142/          0/      10000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=31152)
(result1=31152)
(result3=31152)
(result4=31152)
(result5=31152)
(result6=31152)
(result8=31152)
(result9=31152)
(result10=31152)
(result11=31095)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
    (data10_def=00000000)
    (data11_def=00000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=02AADC10)
    (data1_def=02AADC10)
    (data2_def=02AADC10)
    (data3_def=02AADC10)
    (data4_def=02AADC10)
    (data5_def=02AADC10)
    (data8_def=02AADC10)
    (data9_def=02AADC10)
    (data10_def=02AADC10)
    (data11_def=02AADC10)
  linearSearch(*array_shuffle1, search_predicate);
    (data=02AADC10)
    (data1=02AADC10)
    (data2=02AADC10)
    (data3=02AADC10)
    (data4=02AADC10)
    (data5=02AADC10)
    (data8=02AADC10)
    (data9=02AADC10)
    (data10=02AADC10)
    (data11=02AADC10)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=02AADC10)
    (data1_val=02AADC10)
    (data2_val=02AADC10)
    (data3_val=02AADC10)
    (data4_val=02AADC10)
    (data5_val=02AADC10)
    (data8_val=02AADC10)
    (data9_val=02AADC10)
    (data10_val=02AADC10)
    (data11_val=02AADC10)
target=0, linearSearch=[0, 2342]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=02A8B3E0)
    (data1_def=02A8B3E0)
    (data2_def=02A8B3E0)
    (data3_def=02A8B3E0)
    (data4_def=02A8B3E0)
    (data5_def=02A8B3E0)
    (data8_def=02A8B3E0)
    (data9_def=02A8B3E0)
    (data10_def=02A8B3E0)
    (data11_def=02A8B3E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=02A8B3E0)
    (data1=02A8B3E0)
    (data2=02A8B3E0)
    (data3=02A8B3E0)
    (data4=02A8B3E0)
    (data5=02A8B3E0)
    (data8=02A8B3E0)
    (data9=02A8B3E0)
    (data10=02A8B3E0)
    (data11=02A8B3E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=02A8B3E0)
    (data1_val=02A8B3E0)
    (data2_val=02A8B3E0)
    (data3_val=02A8B3E0)
    (data4_val=02A8B3E0)
    (data5_val=02A8B3E0)
    (data8_val=02A8B3E0)
    (data9_val=02A8B3E0)
    (data10_val=02A8B3E0)
    (data11_val=02A8B3E0)
target=2, linearSearch=[2, 575]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=02A93E50)
    (data1_def=02A93E50)
    (data2_def=02A93E50)
    (data3_def=02A93E50)
    (data4_def=02A93E50)
    (data5_def=02A93E50)
    (data8_def=02A93E50)
    (data9_def=02A93E50)
    (data10_def=02A93E50)
    (data11_def=02A93E50)
  linearSearch(*array_shuffle1, search_predicate);
    (data=02A93E50)
    (data1=02A93E50)
    (data2=02A93E50)
    (data3=02A93E50)
    (data4=02A93E50)
    (data5=02A93E50)
    (data8=02A93E50)
    (data9=02A93E50)
    (data10=02A93E50)
    (data11=02A93E50)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=02A93E50)
    (data1_val=02A93E50)
    (data2_val=02A93E50)
    (data3_val=02A93E50)
    (data4_val=02A93E50)
    (data5_val=02A93E50)
    (data8_val=02A93E50)
    (data9_val=02A93E50)
    (data10_val=02A93E50)
    (data11_val=02A93E50)
target=6, linearSearch=[6, 1018]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=02AAB1E0)
    (data1_def=02AAB1E0)
    (data2_def=02AAB1E0)
    (data3_def=02AAB1E0)
    (data4_def=02AAB1E0)
    (data5_def=02AAB1E0)
    (data8_def=02AAB1E0)
    (data9_def=02AAB1E0)
    (data10_def=02AAB1E0)
    (data11_def=02AAB1E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=02AAB1E0)
    (data1=02AAB1E0)
    (data2=02AAB1E0)
    (data3=02AAB1E0)
    (data4=02AAB1E0)
    (data5=02AAB1E0)
    (data8=02AAB1E0)
    (data9=02AAB1E0)
    (data10=02AAB1E0)
    (data11=02AAB1E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=02AAB1E0)
    (data1_val=02AAB1E0)
    (data2_val=02AAB1E0)
    (data3_val=02AAB1E0)
    (data4_val=02AAB1E0)
    (data5_val=02AAB1E0)
    (data8_val=02AAB1E0)
    (data9_val=02AAB1E0)
    (data10_val=02AAB1E0)
    (data11_val=02AAB1E0)
target=14, linearSearch=[14, 2207]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=02A9E620)
    (data1_def=02A9E620)
    (data2_def=02A9E620)
    (data3_def=02A9E620)
    (data4_def=02A9E620)
    (data5_def=02A9E620)
    (data8_def=02A9E620)
    (data9_def=02A9E620)
    (data10_def=02A9E620)
    (data11_def=02A9E620)
  linearSearch(*array_shuffle1, search_predicate);
    (data=02A9E620)
    (data1=02A9E620)
    (data2=02A9E620)
    (data3=02A9E620)
    (data4=02A9E620)
    (data5=02A9E620)
    (data8=02A9E620)
    (data9=02A9E620)
    (data10=02A9E620)
    (data11=02A9E620)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=02A9E620)
    (data1_val=02A9E620)
    (data2_val=02A9E620)
    (data3_val=02A9E620)
    (data4_val=02A9E620)
    (data5_val=02A9E620)
    (data8_val=02A9E620)
    (data9_val=02A9E620)
    (data10_val=02A9E620)
    (data11_val=02A9E620)
target=30, linearSearch=[30, 1555]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=02A932C0)
    (data1_def=02A932C0)
    (data2_def=02A932C0)
    (data3_def=02A932C0)
    (data4_def=02A932C0)
    (data5_def=02A932C0)
    (data8_def=02A932C0)
    (data9_def=02A932C0)
    (data10_def=02A932C0)
    (data11_def=02A932C0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=02A932C0)
    (data1=02A932C0)
    (data2=02A932C0)
    (data3=02A932C0)
    (data4=02A932C0)
    (data5=02A932C0)
    (data8=02A932C0)
    (data9=02A932C0)
    (data10=02A932C0)
    (data11=02A932C0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=02A932C0)
    (data1_val=02A932C0)
    (data2_val=02A932C0)
    (data3_val=02A932C0)
    (data4_val=02A932C0)
    (data5_val=02A932C0)
    (data8_val=02A932C0)
    (data9_val=02A932C0)
    (data10_val=02A932C0)
    (data11_val=02A932C0)
target=62, linearSearch=[62, 981]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=02A99300)
    (data1_def=02A99300)
    (data2_def=02A99300)
    (data3_def=02A99300)
    (data4_def=02A99300)
    (data5_def=02A99300)
    (data8_def=02A99300)
    (data9_def=02A99300)
    (data10_def=02A99300)
    (data11_def=02A99300)
  linearSearch(*array_shuffle1, search_predicate);
    (data=02A99300)
    (data1=02A99300)
    (data2=02A99300)
    (data3=02A99300)
    (data4=02A99300)
    (data5=02A99300)
    (data8=02A99300)
    (data9=02A99300)
    (data10=02A99300)
    (data11=02A99300)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=02A99300)
    (data1_val=02A99300)
    (data2_val=02A99300)
    (data3_val=02A99300)
    (data4_val=02A99300)
    (data5_val=02A99300)
    (data8_val=02A99300)
    (data9_val=02A99300)
    (data10_val=02A99300)
    (data11_val=02A99300)
target=126, linearSearch=[126, 1289]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=02B1F540)
    (data1_def=02B1F540)
    (data2_def=02B1F540)
    (data3_def=02B1F540)
    (data4_def=02B1F540)
    (data5_def=02B1F540)
    (data8_def=02B1F540)
    (data9_def=02B1F540)
    (data10_def=02B1F540)
    (data11_def=02B1F540)
  linearSearch(*array_shuffle1, search_predicate);
    (data=02B1F540)
    (data1=02B1F540)
    (data2=02B1F540)
    (data3=02B1F540)
    (data4=02B1F540)
    (data5=02B1F540)
    (data8=02B1F540)
    (data9=02B1F540)
    (data10=02B1F540)
    (data11=02B1F540)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=02B1F540)
    (data1_val=02B1F540)
    (data2_val=02B1F540)
    (data3_val=02B1F540)
    (data4_val=02B1F540)
    (data5_val=02B1F540)
    (data8_val=02B1F540)
    (data9_val=02B1F540)
    (data10_val=02B1F540)
    (data11_val=02B1F540)
target=254, linearSearch=[254, 8157]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
   (data10_def=00000000)
    (data11_def=00000000)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=02A80030)
    (data1_def=02A80030)
    (data2_def=02A80030)
    (data3_def=02A80030)
    (data4_def=02A80030)
    (data5_def=02A80030)
    (data8_def=02A80030)
    (data9_def=02A80030)
   (data10_def=02A80030)
    (data11_def=02A80030)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=02A80030)
    (data1=02A80030)
    (data2=02A80030)
    (data3=02A80030)
    (data4=02A80030)
    (data5=02A80030)
    (data8=02A80030)
    (data9=02A80030)
    (data10=02A80030)
    (data11=02A80030)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=02A80030)
    (data1_val=02A80030)
    (data2_val=02A80030)
    (data3_val=02A80030)
    (data4_val=02A80030)
    (data5_val=02A80030)
    (data8_val=02A80030)
    (data9_val=02A80030)
    (data10_val=02A80030)
    (data11_val=02A80030)
target=0, binarySearch=[0, 2342]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=02A80210)
    (data1_def=02A80210)
    (data2_def=02A80210)
    (data3_def=02A80210)
    (data4_def=02A80210)
    (data5_def=02A80210)
    (data8_def=02A80210)
    (data9_def=02A80210)
   (data10_def=02A80210)
    (data11_def=02A80210)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=02A80210)
    (data1=02A80210)
    (data2=02A80210)
    (data3=02A80210)
    (data4=02A80210)
    (data5=02A80210)
    (data8=02A80210)
    (data9=02A80210)
    (data10=02A80210)
    (data11=02A80210)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=02A80210)
    (data1_val=02A80210)
    (data2_val=02A80210)
    (data3_val=02A80210)
    (data4_val=02A80210)
    (data5_val=02A80210)
    (data8_val=02A80210)
    (data9_val=02A80210)
    (data10_val=02A80210)
    (data11_val=02A80210)
target=2, binarySearch=[2, 6831]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=02A805D0)
    (data1_def=02A805D0)
    (data2_def=02A805D0)
    (data3_def=02A805D0)
    (data4_def=02A805D0)
    (data5_def=02A805D0)
    (data8_def=02A805D0)
    (data9_def=02A805D0)
   (data10_def=02A805D0)
    (data11_def=02A805D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=02A805D0)
    (data1=02A805D0)
    (data2=02A805D0)
    (data3=02A805D0)
    (data4=02A805D0)
    (data5=02A805D0)
    (data8=02A805D0)
    (data9=02A805D0)
    (data10=02A805D0)
    (data11=02A805D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=02A805D0)
    (data1_val=02A805D0)
    (data2_val=02A805D0)
    (data3_val=02A805D0)
    (data4_val=02A805D0)
    (data5_val=02A805D0)
    (data8_val=02A805D0)
    (data9_val=02A805D0)
    (data10_val=02A805D0)
    (data11_val=02A805D0)
target=6, binarySearch=[6, 1018]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=02A80D50)
    (data1_def=02A80D50)
    (data2_def=02A80D50)
    (data3_def=02A80D50)
    (data4_def=02A80D50)
    (data5_def=02A80D50)
    (data8_def=02A80D50)
    (data9_def=02A80D50)
   (data10_def=02A80D50)
    (data11_def=02A80D50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=02A80D50)
    (data1=02A80D50)
    (data2=02A80D50)
    (data3=02A80D50)
    (data4=02A80D50)
    (data5=02A80D50)
    (data8=02A80D50)
    (data9=02A80D50)
    (data10=02A80D50)
    (data11=02A80D50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=02A80D50)
    (data1_val=02A80D50)
    (data2_val=02A80D50)
    (data3_val=02A80D50)
    (data4_val=02A80D50)
    (data5_val=02A80D50)
    (data8_val=02A80D50)
    (data9_val=02A80D50)
    (data10_val=02A80D50)
    (data11_val=02A80D50)
target=14, binarySearch=[14, 4706]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=02A81C50)
    (data1_def=02A81C50)
    (data2_def=02A81C50)
    (data3_def=02A81C50)
    (data4_def=02A81C50)
    (data5_def=02A81C50)
    (data8_def=02A81C50)
    (data9_def=02A81C50)
   (data10_def=02A81C50)
    (data11_def=02A81C50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=02A81C50)
    (data1=02A81C50)
    (data2=02A81C50)
    (data3=02A81C50)
    (data4=02A81C50)
    (data5=02A81C50)
    (data8=02A81C50)
    (data9=02A81C50)
    (data10=02A81C50)
    (data11=02A81C50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=02A81C50)
    (data1_val=02A81C50)
    (data2_val=02A81C50)
    (data3_val=02A81C50)
    (data4_val=02A81C50)
    (data5_val=02A81C50)
    (data8_val=02A81C50)
    (data9_val=02A81C50)
    (data10_val=02A81C50)
    (data11_val=02A81C50)
target=30, binarySearch=[30, 5065]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=02A83A50)
    (data1_def=02A83A50)
    (data2_def=02A83A50)
    (data3_def=02A83A50)
    (data4_def=02A83A50)
    (data5_def=02A83A50)
    (data8_def=02A83A50)
    (data9_def=02A83A50)
   (data10_def=02A83A50)
    (data11_def=02A83A50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=02A83A50)
    (data1=02A83A50)
    (data2=02A83A50)
    (data3=02A83A50)
    (data4=02A83A50)
    (data5=02A83A50)
    (data8=02A83A50)
    (data9=02A83A50)
    (data10=02A83A50)
    (data11=02A83A50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=02A83A50)
    (data1_val=02A83A50)
    (data2_val=02A83A50)
    (data3_val=02A83A50)
    (data4_val=02A83A50)
    (data5_val=02A83A50)
    (data8_val=02A83A50)
    (data9_val=02A83A50)
    (data10_val=02A83A50)
    (data11_val=02A83A50)
target=62, binarySearch=[62, 9221]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=02A87650)
    (data1_def=02A87650)
    (data2_def=02A87650)
    (data3_def=02A87650)
    (data4_def=02A87650)
    (data5_def=02A87650)
    (data8_def=02A87650)
    (data9_def=02A87650)
   (data10_def=02A87650)
    (data11_def=02A87650)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=02A87650)
    (data1=02A87650)
    (data2=02A87650)
    (data3=02A87650)
    (data4=02A87650)
    (data5=02A87650)
    (data8=02A87650)
    (data9=02A87650)
    (data10=02A87650)
    (data11=02A87650)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=02A87650)
    (data1_val=02A87650)
    (data2_val=02A87650)
    (data3_val=02A87650)
    (data4_val=02A87650)
    (data5_val=02A87650)
    (data8_val=02A87650)
    (data9_val=02A87650)
    (data10_val=02A87650)
    (data11_val=02A87650)
target=126, binarySearch=[126, 1289]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=02A8EE50)
    (data1_def=02A8EE50)
    (data2_def=02A8EE50)
    (data3_def=02A8EE50)
    (data4_def=02A8EE50)
    (data5_def=02A8EE50)
    (data8_def=02A8EE50)
    (data9_def=02A8EE50)
   (data10_def=02A8EE50)
    (data11_def=02A8EE50)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=02A8EE50)
    (data1=02A8EE50)
    (data2=02A8EE50)
    (data3=02A8EE50)
    (data4=02A8EE50)
    (data5=02A8EE50)
    (data8=02A8EE50)
    (data9=02A8EE50)
    (data10=02A8EE50)
    (data11=02A8EE50)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=02A8EE50)
    (data1_val=02A8EE50)
    (data2_val=02A8EE50)
    (data3_val=02A8EE50)
    (data4_val=02A8EE50)
    (data5_val=02A8EE50)
    (data8_val=02A8EE50)
    (data9_val=02A8EE50)
    (data10_val=02A8EE50)
    (data11_val=02A8EE50)
target=254, binarySearch=[254, 8763]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=6.577260600 sec.
