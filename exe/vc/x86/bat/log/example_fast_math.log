--------------------------------------------------------------------------------
[ Test for fast operation (basic) ]
[direct  ] 0.77441 + 0.796422 - 0.85759 * 0.92213 / 0.80138 = 0.58401
[dummy   ] 0.77441 + 0.796422 - 0.85759 * 0.92213 / 0.80138 = 0.58401
[normal  ] 0.77441 + 0.796422 - 0.85759 * 0.92213 / 0.80138 = 0.58401
[sse     ] 0.77441 + 0.796422 - 0.85759 * 0.92213 / 0.80138 = 0.58401
[fast    ] 0.77441 + 0.796422 - 0.85759 * 0.92213 / 0.80138 = 0.58401
[semifast] 0.77441 + 0.796422 - 0.85759 * 0.92213 / 0.80138 = 0.58401
[fastest ] 0.77441 + 0.796422 - 0.85759 * 0.92213 / 0.80138 = 0.58405

--------------------------------------------------------------------------------
[ Test for fast operation ]

10.f + 1.f                  = 11.000 (11.000000000)
dummyA_f(10.f) + 1.f    = 11.000 (11.000000000)
normA_f(10.f) + 1.f   = 11.000 (11.000000000)
sseA_f(10.f) + 1.f      = 11.000 (11.000000000)
fastA_f(10.f) + 1.f     = 11.000 (11.000000000)
semiA_f(10.f) + 1.f = 11.000 (11.000000000)
fastestA_f(10.f) + 1.f  = 11.000 (11.000000000)
dummyA_d(lvalue_d) + rvalue_d    = 11.000 (11.000000000)
normA_d(lvalue_d) + rvalue_d   = 11.000 (11.000000000)
sseA_d(lvalue_d) + rvalue_d      = 11.000 (11.000000000)
fastA_d(lvalue_d) + rvalue_d     = 11.000 (11.000000000)
semiA_d(lvalue_d) + rvalue_d = 11.000 (11.000000000)
fastestA_d(lvalue_d) + rvalue_d  = 11.000 (11.000000000)

10.f + 2.f                  = 12.000 (12.000000000)
dummyA_f(10.f) + 2.f    = 12.000 (12.000000000)
normA_f(10.f) + 2.f   = 12.000 (12.000000000)
sseA_f(10.f) + 2.f      = 12.000 (12.000000000)
fastA_f(10.f) + 2.f     = 12.000 (12.000000000)
semiA_f(10.f) + 2.f = 12.000 (12.000000000)
fastestA_f(10.f) + 2.f  = 12.000 (12.000000000)
dummyA_d(lvalue_d) + rvalue_d    = 12.000 (12.000000000)
normA_d(lvalue_d) + rvalue_d   = 12.000 (12.000000000)
sseA_d(lvalue_d) + rvalue_d      = 12.000 (12.000000000)
fastA_d(lvalue_d) + rvalue_d     = 12.000 (12.000000000)
semiA_d(lvalue_d) + rvalue_d = 12.000 (12.000000000)
fastestA_d(lvalue_d) + rvalue_d  = 12.000 (12.000000000)

10.f + 3.f                  = 13.000 (13.000000000)
dummyA_f(10.f) + 3.f    = 13.000 (13.000000000)
normA_f(10.f) + 3.f   = 13.000 (13.000000000)
sseA_f(10.f) + 3.f      = 13.000 (13.000000000)
fastA_f(10.f) + 3.f     = 13.000 (13.000000000)
semiA_f(10.f) + 3.f = 13.000 (13.000000000)
fastestA_f(10.f) + 3.f  = 13.000 (13.000000000)
dummyA_d(lvalue_d) + rvalue_d    = 13.000 (13.000000000)
normA_d(lvalue_d) + rvalue_d   = 13.000 (13.000000000)
sseA_d(lvalue_d) + rvalue_d      = 13.000 (13.000000000)
fastA_d(lvalue_d) + rvalue_d     = 13.000 (13.000000000)
semiA_d(lvalue_d) + rvalue_d = 13.000 (13.000000000)
fastestA_d(lvalue_d) + rvalue_d  = 13.000 (13.000000000)

10.f + 4.f                  = 14.000 (14.000000000)
dummyA_f(10.f) + 4.f    = 14.000 (14.000000000)
normA_f(10.f) + 4.f   = 14.000 (14.000000000)
sseA_f(10.f) + 4.f      = 14.000 (14.000000000)
fastA_f(10.f) + 4.f     = 14.000 (14.000000000)
semiA_f(10.f) + 4.f = 14.000 (14.000000000)
fastestA_f(10.f) + 4.f  = 14.000 (14.000000000)
dummyA_d(lvalue_d) + rvalue_d    = 14.000 (14.000000000)
normA_d(lvalue_d) + rvalue_d   = 14.000 (14.000000000)
sseA_d(lvalue_d) + rvalue_d      = 14.000 (14.000000000)
fastA_d(lvalue_d) + rvalue_d     = 14.000 (14.000000000)
semiA_d(lvalue_d) + rvalue_d = 14.000 (14.000000000)
fastestA_d(lvalue_d) + rvalue_d  = 14.000 (14.000000000)

10.f + 5.f                  = 15.000 (15.000000000)
dummyA_f(10.f) + 5.f    = 15.000 (15.000000000)
normA_f(10.f) + 5.f   = 15.000 (15.000000000)
sseA_f(10.f) + 5.f      = 15.000 (15.000000000)
fastA_f(10.f) + 5.f     = 15.000 (15.000000000)
semiA_f(10.f) + 5.f = 15.000 (15.000000000)
fastestA_f(10.f) + 5.f  = 15.000 (15.000000000)
dummyA_d(lvalue_d) + rvalue_d    = 15.000 (15.000000000)
normA_d(lvalue_d) + rvalue_d   = 15.000 (15.000000000)
sseA_d(lvalue_d) + rvalue_d      = 15.000 (15.000000000)
fastA_d(lvalue_d) + rvalue_d     = 15.000 (15.000000000)
semiA_d(lvalue_d) + rvalue_d = 15.000 (15.000000000)
fastestA_d(lvalue_d) + rvalue_d  = 15.000 (15.000000000)

10.f + 10.f                  = 20.000 (20.000000000)
dummyA_f(10.f) + 10.f    = 20.000 (20.000000000)
normA_f(10.f) + 10.f   = 20.000 (20.000000000)
sseA_f(10.f) + 10.f      = 20.000 (20.000000000)
fastA_f(10.f) + 10.f     = 20.000 (20.000000000)
semiA_f(10.f) + 10.f = 20.000 (20.000000000)
fastestA_f(10.f) + 10.f  = 20.000 (20.000000000)
dummyA_d(lvalue_d) + rvalue_d    = 20.000 (20.000000000)
normA_d(lvalue_d) + rvalue_d   = 20.000 (20.000000000)
sseA_d(lvalue_d) + rvalue_d      = 20.000 (20.000000000)
fastA_d(lvalue_d) + rvalue_d     = 20.000 (20.000000000)
semiA_d(lvalue_d) + rvalue_d = 20.000 (20.000000000)
fastestA_d(lvalue_d) + rvalue_d  = 20.000 (20.000000000)

10.f + 100.f                  = 110.000 (110.000000000)
dummyA_f(10.f) + 100.f    = 110.000 (110.000000000)
normA_f(10.f) + 100.f   = 110.000 (110.000000000)
sseA_f(10.f) + 100.f      = 110.000 (110.000000000)
fastA_f(10.f) + 100.f     = 110.000 (110.000000000)
semiA_f(10.f) + 100.f = 110.000 (110.000000000)
fastestA_f(10.f) + 100.f  = 110.000 (110.000000000)
dummyA_d(lvalue_d) + rvalue_d    = 110.000 (110.000000000)
normA_d(lvalue_d) + rvalue_d   = 110.000 (110.000000000)
sseA_d(lvalue_d) + rvalue_d      = 110.000 (110.000000000)
fastA_d(lvalue_d) + rvalue_d     = 110.000 (110.000000000)
semiA_d(lvalue_d) + rvalue_d = 110.000 (110.000000000)
fastestA_d(lvalue_d) + rvalue_d  = 110.000 (110.000000000)

10.f + 1000.f                  = 1010.000 (1010.000000000)
dummyA_f(10.f) + 1000.f    = 1010.000 (1010.000000000)
normA_f(10.f) + 1000.f   = 1010.000 (1010.000000000)
sseA_f(10.f) + 1000.f      = 1010.000 (1010.000000000)
fastA_f(10.f) + 1000.f     = 1010.000 (1010.000000000)
semiA_f(10.f) + 1000.f = 1010.000 (1010.000000000)
fastestA_f(10.f) + 1000.f  = 1010.000 (1010.000000000)
dummyA_d(lvalue_d) + rvalue_d    = 1010.000 (1010.000000000)
normA_d(lvalue_d) + rvalue_d   = 1010.000 (1010.000000000)
sseA_d(lvalue_d) + rvalue_d      = 1010.000 (1010.000000000)
fastA_d(lvalue_d) + rvalue_d     = 1010.000 (1010.000000000)
semiA_d(lvalue_d) + rvalue_d = 1010.000 (1010.000000000)
fastestA_d(lvalue_d) + rvalue_d  = 1010.000 (1010.000000000)

10.f + 10000.f                  = 10010.000 (10010.000000000)
dummyA_f(10.f) + 10000.f    = 10010.000 (10010.000000000)
normA_f(10.f) + 10000.f   = 10010.000 (10010.000000000)
sseA_f(10.f) + 10000.f      = 10010.000 (10010.000000000)
fastA_f(10.f) + 10000.f     = 10010.000 (10010.000000000)
semiA_f(10.f) + 10000.f = 10010.000 (10010.000000000)
fastestA_f(10.f) + 10000.f  = 10010.000 (10010.000000000)
dummyA_d(lvalue_d) + rvalue_d    = 10010.000 (10010.000000000)
normA_d(lvalue_d) + rvalue_d   = 10010.000 (10010.000000000)
sseA_d(lvalue_d) + rvalue_d      = 10010.000 (10010.000000000)
fastA_d(lvalue_d) + rvalue_d     = 10010.000 (10010.000000000)
semiA_d(lvalue_d) + rvalue_d = 10010.000 (10010.000000000)
fastestA_d(lvalue_d) + rvalue_d  = 10010.000 (10010.000000000)

10.f + 100000.f                  = 100010.000 (100010.000000000)
dummyA_f(10.f) + 100000.f    = 100010.000 (100010.000000000)
normA_f(10.f) + 100000.f   = 100010.000 (100010.000000000)
sseA_f(10.f) + 100000.f      = 100010.000 (100010.000000000)
fastA_f(10.f) + 100000.f     = 100010.000 (100010.000000000)
semiA_f(10.f) + 100000.f = 100010.000 (100010.000000000)
fastestA_f(10.f) + 100000.f  = 100010.000 (100010.000000000)
dummyA_d(lvalue_d) + rvalue_d    = 100010.000 (100010.000000000)
normA_d(lvalue_d) + rvalue_d   = 100010.000 (100010.000000000)
sseA_d(lvalue_d) + rvalue_d      = 100010.000 (100010.000000000)
fastA_d(lvalue_d) + rvalue_d     = 100010.000 (100010.000000000)
semiA_d(lvalue_d) + rvalue_d = 100010.000 (100010.000000000)
fastestA_d(lvalue_d) + rvalue_d  = 100010.000 (100010.000000000)

10.f + 1000000.f                  = 1000010.000 (1000010.000000000)
dummyA_f(10.f) + 1000000.f    = 1000010.000 (1000010.000000000)
normA_f(10.f) + 1000000.f   = 1000010.000 (1000010.000000000)
sseA_f(10.f) + 1000000.f      = 1000010.000 (1000010.000000000)
fastA_f(10.f) + 1000000.f     = 1000010.000 (1000010.000000000)
semiA_f(10.f) + 1000000.f = 1000010.000 (1000010.000000000)
fastestA_f(10.f) + 1000000.f  = 1000010.000 (1000010.000000000)
dummyA_d(lvalue_d) + rvalue_d    = 1000010.000 (1000010.000000000)
normA_d(lvalue_d) + rvalue_d   = 1000010.000 (1000010.000000000)
sseA_d(lvalue_d) + rvalue_d      = 1000010.000 (1000010.000000000)
fastA_d(lvalue_d) + rvalue_d     = 1000010.000 (1000010.000000000)
semiA_d(lvalue_d) + rvalue_d = 1000010.000 (1000010.000000000)
fastestA_d(lvalue_d) + rvalue_d  = 1000010.000 (1000010.000000000)

10.f - 1.f                  = 9.000 (9.000000000)
dummyA_f(10.f) - 1.f    = 9.000 (9.000000000)
normA_f(10.f) - 1.f   = 9.000 (9.000000000)
sseA_f(10.f) - 1.f      = 9.000 (9.000000000)
fastA_f(10.f) - 1.f     = 9.000 (9.000000000)
semiA_f(10.f) - 1.f = 9.000 (9.000000000)
fastestA_f(10.f) - 1.f  = 9.000 (9.000000000)
dummyA_d(lvalue_d) - rvalue_d    = 9.000 (9.000000000)
normA_d(lvalue_d) - rvalue_d   = 9.000 (9.000000000)
sseA_d(lvalue_d) - rvalue_d      = 9.000 (9.000000000)
fastA_d(lvalue_d) - rvalue_d     = 9.000 (9.000000000)
semiA_d(lvalue_d) - rvalue_d = 9.000 (9.000000000)
fastestA_d(lvalue_d) - rvalue_d  = 9.000 (9.000000000)

10.f - 2.f                  = 8.000 (8.000000000)
dummyA_f(10.f) - 2.f    = 8.000 (8.000000000)
normA_f(10.f) - 2.f   = 8.000 (8.000000000)
sseA_f(10.f) - 2.f      = 8.000 (8.000000000)
fastA_f(10.f) - 2.f     = 8.000 (8.000000000)
semiA_f(10.f) - 2.f = 8.000 (8.000000000)
fastestA_f(10.f) - 2.f  = 8.000 (8.000000000)
dummyA_d(lvalue_d) - rvalue_d    = 8.000 (8.000000000)
normA_d(lvalue_d) - rvalue_d   = 8.000 (8.000000000)
sseA_d(lvalue_d) - rvalue_d      = 8.000 (8.000000000)
fastA_d(lvalue_d) - rvalue_d     = 8.000 (8.000000000)
semiA_d(lvalue_d) - rvalue_d = 8.000 (8.000000000)
fastestA_d(lvalue_d) - rvalue_d  = 8.000 (8.000000000)

10.f - 3.f                  = 7.000 (7.000000000)
dummyA_f(10.f) - 3.f    = 7.000 (7.000000000)
normA_f(10.f) - 3.f   = 7.000 (7.000000000)
sseA_f(10.f) - 3.f      = 7.000 (7.000000000)
fastA_f(10.f) - 3.f     = 7.000 (7.000000000)
semiA_f(10.f) - 3.f = 7.000 (7.000000000)
fastestA_f(10.f) - 3.f  = 7.000 (7.000000000)
dummyA_d(lvalue_d) - rvalue_d    = 7.000 (7.000000000)
normA_d(lvalue_d) - rvalue_d   = 7.000 (7.000000000)
sseA_d(lvalue_d) - rvalue_d      = 7.000 (7.000000000)
fastA_d(lvalue_d) - rvalue_d     = 7.000 (7.000000000)
semiA_d(lvalue_d) - rvalue_d = 7.000 (7.000000000)
fastestA_d(lvalue_d) - rvalue_d  = 7.000 (7.000000000)

10.f - 4.f                  = 6.000 (6.000000000)
dummyA_f(10.f) - 4.f    = 6.000 (6.000000000)
normA_f(10.f) - 4.f   = 6.000 (6.000000000)
sseA_f(10.f) - 4.f      = 6.000 (6.000000000)
fastA_f(10.f) - 4.f     = 6.000 (6.000000000)
semiA_f(10.f) - 4.f = 6.000 (6.000000000)
fastestA_f(10.f) - 4.f  = 6.000 (6.000000000)
dummyA_d(lvalue_d) - rvalue_d    = 6.000 (6.000000000)
normA_d(lvalue_d) - rvalue_d   = 6.000 (6.000000000)
sseA_d(lvalue_d) - rvalue_d      = 6.000 (6.000000000)
fastA_d(lvalue_d) - rvalue_d     = 6.000 (6.000000000)
semiA_d(lvalue_d) - rvalue_d = 6.000 (6.000000000)
fastestA_d(lvalue_d) - rvalue_d  = 6.000 (6.000000000)

10.f - 5.f                  = 5.000 (5.000000000)
dummyA_f(10.f) - 5.f    = 5.000 (5.000000000)
normA_f(10.f) - 5.f   = 5.000 (5.000000000)
sseA_f(10.f) - 5.f      = 5.000 (5.000000000)
fastA_f(10.f) - 5.f     = 5.000 (5.000000000)
semiA_f(10.f) - 5.f = 5.000 (5.000000000)
fastestA_f(10.f) - 5.f  = 5.000 (5.000000000)
dummyA_d(lvalue_d) - rvalue_d    = 5.000 (5.000000000)
normA_d(lvalue_d) - rvalue_d   = 5.000 (5.000000000)
sseA_d(lvalue_d) - rvalue_d      = 5.000 (5.000000000)
fastA_d(lvalue_d) - rvalue_d     = 5.000 (5.000000000)
semiA_d(lvalue_d) - rvalue_d = 5.000 (5.000000000)
fastestA_d(lvalue_d) - rvalue_d  = 5.000 (5.000000000)

10.f - 10.f                  = 0.000 (0.000000000)
dummyA_f(10.f) - 10.f    = 0.000 (0.000000000)
normA_f(10.f) - 10.f   = 0.000 (0.000000000)
sseA_f(10.f) - 10.f      = 0.000 (0.000000000)
fastA_f(10.f) - 10.f     = 0.000 (0.000000000)
semiA_f(10.f) - 10.f = 0.000 (0.000000000)
fastestA_f(10.f) - 10.f  = 0.000 (0.000000000)
dummyA_d(lvalue_d) - rvalue_d    = 0.000 (0.000000000)
normA_d(lvalue_d) - rvalue_d   = 0.000 (0.000000000)
sseA_d(lvalue_d) - rvalue_d      = 0.000 (0.000000000)
fastA_d(lvalue_d) - rvalue_d     = 0.000 (0.000000000)
semiA_d(lvalue_d) - rvalue_d = 0.000 (0.000000000)
fastestA_d(lvalue_d) - rvalue_d  = 0.000 (0.000000000)

10.f - 100.f                  = -90.000 (-90.000000000)
dummyA_f(10.f) - 100.f    = -90.000 (-90.000000000)
normA_f(10.f) - 100.f   = -90.000 (-90.000000000)
sseA_f(10.f) - 100.f      = -90.000 (-90.000000000)
fastA_f(10.f) - 100.f     = -90.000 (-90.000000000)
semiA_f(10.f) - 100.f = -90.000 (-90.000000000)
fastestA_f(10.f) - 100.f  = -90.000 (-90.000000000)
dummyA_d(lvalue_d) - rvalue_d    = -90.000 (-90.000000000)
normA_d(lvalue_d) - rvalue_d   = -90.000 (-90.000000000)
sseA_d(lvalue_d) - rvalue_d      = -90.000 (-90.000000000)
fastA_d(lvalue_d) - rvalue_d     = -90.000 (-90.000000000)
semiA_d(lvalue_d) - rvalue_d = -90.000 (-90.000000000)
fastestA_d(lvalue_d) - rvalue_d  = -90.000 (-90.000000000)

10.f - 1000.f                  = -990.000 (-990.000000000)
dummyA_f(10.f) - 1000.f    = -990.000 (-990.000000000)
normA_f(10.f) - 1000.f   = -990.000 (-990.000000000)
sseA_f(10.f) - 1000.f      = -990.000 (-990.000000000)
fastA_f(10.f) - 1000.f     = -990.000 (-990.000000000)
semiA_f(10.f) - 1000.f = -990.000 (-990.000000000)
fastestA_f(10.f) - 1000.f  = -990.000 (-990.000000000)
dummyA_d(lvalue_d) - rvalue_d    = -990.000 (-990.000000000)
normA_d(lvalue_d) - rvalue_d   = -990.000 (-990.000000000)
sseA_d(lvalue_d) - rvalue_d      = -990.000 (-990.000000000)
fastA_d(lvalue_d) - rvalue_d     = -990.000 (-990.000000000)
semiA_d(lvalue_d) - rvalue_d = -990.000 (-990.000000000)
fastestA_d(lvalue_d) - rvalue_d  = -990.000 (-990.000000000)

10.f - 10000.f                  = -9990.000 (-9990.000000000)
dummyA_f(10.f) - 10000.f    = -9990.000 (-9990.000000000)
normA_f(10.f) - 10000.f   = -9990.000 (-9990.000000000)
sseA_f(10.f) - 10000.f      = -9990.000 (-9990.000000000)
fastA_f(10.f) - 10000.f     = -9990.000 (-9990.000000000)
semiA_f(10.f) - 10000.f = -9990.000 (-9990.000000000)
fastestA_f(10.f) - 10000.f  = -9990.000 (-9990.000000000)
dummyA_d(lvalue_d) - rvalue_d    = -9990.000 (-9990.000000000)
normA_d(lvalue_d) - rvalue_d   = -9990.000 (-9990.000000000)
sseA_d(lvalue_d) - rvalue_d      = -9990.000 (-9990.000000000)
fastA_d(lvalue_d) - rvalue_d     = -9990.000 (-9990.000000000)
semiA_d(lvalue_d) - rvalue_d = -9990.000 (-9990.000000000)
fastestA_d(lvalue_d) - rvalue_d  = -9990.000 (-9990.000000000)

10.f - 100000.f                  = -99990.000 (-99990.000000000)
dummyA_f(10.f) - 100000.f    = -99990.000 (-99990.000000000)
normA_f(10.f) - 100000.f   = -99990.000 (-99990.000000000)
sseA_f(10.f) - 100000.f      = -99990.000 (-99990.000000000)
fastA_f(10.f) - 100000.f     = -99990.000 (-99990.000000000)
semiA_f(10.f) - 100000.f = -99990.000 (-99990.000000000)
fastestA_f(10.f) - 100000.f  = -99990.000 (-99990.000000000)
dummyA_d(lvalue_d) - rvalue_d    = -99990.000 (-99990.000000000)
normA_d(lvalue_d) - rvalue_d   = -99990.000 (-99990.000000000)
sseA_d(lvalue_d) - rvalue_d      = -99990.000 (-99990.000000000)
fastA_d(lvalue_d) - rvalue_d     = -99990.000 (-99990.000000000)
semiA_d(lvalue_d) - rvalue_d = -99990.000 (-99990.000000000)
fastestA_d(lvalue_d) - rvalue_d  = -99990.000 (-99990.000000000)

10.f - 1000000.f                  = -999990.000 (-999990.000000000)
dummyA_f(10.f) - 1000000.f    = -999990.000 (-999990.000000000)
normA_f(10.f) - 1000000.f   = -999990.000 (-999990.000000000)
sseA_f(10.f) - 1000000.f      = -999990.000 (-999990.000000000)
fastA_f(10.f) - 1000000.f     = -999990.000 (-999990.000000000)
semiA_f(10.f) - 1000000.f = -999990.000 (-999990.000000000)
fastestA_f(10.f) - 1000000.f  = -999990.000 (-999990.000000000)
dummyA_d(lvalue_d) - rvalue_d    = -999990.000 (-999990.000000000)
normA_d(lvalue_d) - rvalue_d   = -999990.000 (-999990.000000000)
sseA_d(lvalue_d) - rvalue_d      = -999990.000 (-999990.000000000)
fastA_d(lvalue_d) - rvalue_d     = -999990.000 (-999990.000000000)
semiA_d(lvalue_d) - rvalue_d = -999990.000 (-999990.000000000)
fastestA_d(lvalue_d) - rvalue_d  = -999990.000 (-999990.000000000)

10.f * 1.f                  = 10.000 (10.000000000)
dummyA_f(10.f) * 1.f    = 10.000 (10.000000000)
normA_f(10.f) * 1.f   = 10.000 (10.000000000)
sseA_f(10.f) * 1.f      = 10.000 (10.000000000)
fastA_f(10.f) * 1.f     = 10.000 (10.000000000)
semiA_f(10.f) * 1.f = 10.000 (10.000000000)
fastestA_f(10.f) * 1.f  = 10.000 (10.000000000)
dummyA_d(lvalue_d) * rvalue_d    = 10.000 (10.000000000)
normA_d(lvalue_d) * rvalue_d   = 10.000 (10.000000000)
sseA_d(lvalue_d) * rvalue_d      = 10.000 (10.000000000)
fastA_d(lvalue_d) * rvalue_d     = 10.000 (10.000000000)
semiA_d(lvalue_d) * rvalue_d = 10.000 (10.000000000)
fastestA_d(lvalue_d) * rvalue_d  = 10.000 (10.000000000)

10.f * 2.f                  = 20.000 (20.000000000)
dummyA_f(10.f) * 2.f    = 20.000 (20.000000000)
normA_f(10.f) * 2.f   = 20.000 (20.000000000)
sseA_f(10.f) * 2.f      = 20.000 (20.000000000)
fastA_f(10.f) * 2.f     = 20.000 (20.000000000)
semiA_f(10.f) * 2.f = 20.000 (20.000000000)
fastestA_f(10.f) * 2.f  = 20.000 (20.000000000)
dummyA_d(lvalue_d) * rvalue_d    = 20.000 (20.000000000)
normA_d(lvalue_d) * rvalue_d   = 20.000 (20.000000000)
sseA_d(lvalue_d) * rvalue_d      = 20.000 (20.000000000)
fastA_d(lvalue_d) * rvalue_d     = 20.000 (20.000000000)
semiA_d(lvalue_d) * rvalue_d = 20.000 (20.000000000)
fastestA_d(lvalue_d) * rvalue_d  = 20.000 (20.000000000)

10.f * 3.f                  = 30.000 (30.000000000)
dummyA_f(10.f) * 3.f    = 30.000 (30.000000000)
normA_f(10.f) * 3.f   = 30.000 (30.000000000)
sseA_f(10.f) * 3.f      = 30.000 (30.000000000)
fastA_f(10.f) * 3.f     = 30.000 (30.000000000)
semiA_f(10.f) * 3.f = 30.000 (30.000000000)
fastestA_f(10.f) * 3.f  = 30.000 (30.000000000)
dummyA_d(lvalue_d) * rvalue_d    = 30.000 (30.000000000)
normA_d(lvalue_d) * rvalue_d   = 30.000 (30.000000000)
sseA_d(lvalue_d) * rvalue_d      = 30.000 (30.000000000)
fastA_d(lvalue_d) * rvalue_d     = 30.000 (30.000000000)
semiA_d(lvalue_d) * rvalue_d = 30.000 (30.000000000)
fastestA_d(lvalue_d) * rvalue_d  = 30.000 (30.000000000)

10.f * 4.f                  = 40.000 (40.000000000)
dummyA_f(10.f) * 4.f    = 40.000 (40.000000000)
normA_f(10.f) * 4.f   = 40.000 (40.000000000)
sseA_f(10.f) * 4.f      = 40.000 (40.000000000)
fastA_f(10.f) * 4.f     = 40.000 (40.000000000)
semiA_f(10.f) * 4.f = 40.000 (40.000000000)
fastestA_f(10.f) * 4.f  = 40.000 (40.000000000)
dummyA_d(lvalue_d) * rvalue_d    = 40.000 (40.000000000)
normA_d(lvalue_d) * rvalue_d   = 40.000 (40.000000000)
sseA_d(lvalue_d) * rvalue_d      = 40.000 (40.000000000)
fastA_d(lvalue_d) * rvalue_d     = 40.000 (40.000000000)
semiA_d(lvalue_d) * rvalue_d = 40.000 (40.000000000)
fastestA_d(lvalue_d) * rvalue_d  = 40.000 (40.000000000)

10.f * 5.f                  = 50.000 (50.000000000)
dummyA_f(10.f) * 5.f    = 50.000 (50.000000000)
normA_f(10.f) * 5.f   = 50.000 (50.000000000)
sseA_f(10.f) * 5.f      = 50.000 (50.000000000)
fastA_f(10.f) * 5.f     = 50.000 (50.000000000)
semiA_f(10.f) * 5.f = 50.000 (50.000000000)
fastestA_f(10.f) * 5.f  = 50.000 (50.000000000)
dummyA_d(lvalue_d) * rvalue_d    = 50.000 (50.000000000)
normA_d(lvalue_d) * rvalue_d   = 50.000 (50.000000000)
sseA_d(lvalue_d) * rvalue_d      = 50.000 (50.000000000)
fastA_d(lvalue_d) * rvalue_d     = 50.000 (50.000000000)
semiA_d(lvalue_d) * rvalue_d = 50.000 (50.000000000)
fastestA_d(lvalue_d) * rvalue_d  = 50.000 (50.000000000)

10.f * 10.f                  = 100.000 (100.000000000)
dummyA_f(10.f) * 10.f    = 100.000 (100.000000000)
normA_f(10.f) * 10.f   = 100.000 (100.000000000)
sseA_f(10.f) * 10.f      = 100.000 (100.000000000)
fastA_f(10.f) * 10.f     = 100.000 (100.000000000)
semiA_f(10.f) * 10.f = 100.000 (100.000000000)
fastestA_f(10.f) * 10.f  = 100.000 (100.000000000)
dummyA_d(lvalue_d) * rvalue_d    = 100.000 (100.000000000)
normA_d(lvalue_d) * rvalue_d   = 100.000 (100.000000000)
sseA_d(lvalue_d) * rvalue_d      = 100.000 (100.000000000)
fastA_d(lvalue_d) * rvalue_d     = 100.000 (100.000000000)
semiA_d(lvalue_d) * rvalue_d = 100.000 (100.000000000)
fastestA_d(lvalue_d) * rvalue_d  = 100.000 (100.000000000)

10.f * 100.f                  = 1000.000 (1000.000000000)
dummyA_f(10.f) * 100.f    = 1000.000 (1000.000000000)
normA_f(10.f) * 100.f   = 1000.000 (1000.000000000)
sseA_f(10.f) * 100.f      = 1000.000 (1000.000000000)
fastA_f(10.f) * 100.f     = 1000.000 (1000.000000000)
semiA_f(10.f) * 100.f = 1000.000 (1000.000000000)
fastestA_f(10.f) * 100.f  = 1000.000 (1000.000000000)
dummyA_d(lvalue_d) * rvalue_d    = 1000.000 (1000.000000000)
normA_d(lvalue_d) * rvalue_d   = 1000.000 (1000.000000000)
sseA_d(lvalue_d) * rvalue_d      = 1000.000 (1000.000000000)
fastA_d(lvalue_d) * rvalue_d     = 1000.000 (1000.000000000)
semiA_d(lvalue_d) * rvalue_d = 1000.000 (1000.000000000)
fastestA_d(lvalue_d) * rvalue_d  = 1000.000 (1000.000000000)

10.f * 1000.f                  = 10000.000 (10000.000000000)
dummyA_f(10.f) * 1000.f    = 10000.000 (10000.000000000)
normA_f(10.f) * 1000.f   = 10000.000 (10000.000000000)
sseA_f(10.f) * 1000.f      = 10000.000 (10000.000000000)
fastA_f(10.f) * 1000.f     = 10000.000 (10000.000000000)
semiA_f(10.f) * 1000.f = 10000.000 (10000.000000000)
fastestA_f(10.f) * 1000.f  = 10000.000 (10000.000000000)
dummyA_d(lvalue_d) * rvalue_d    = 10000.000 (10000.000000000)
normA_d(lvalue_d) * rvalue_d   = 10000.000 (10000.000000000)
sseA_d(lvalue_d) * rvalue_d      = 10000.000 (10000.000000000)
fastA_d(lvalue_d) * rvalue_d     = 10000.000 (10000.000000000)
semiA_d(lvalue_d) * rvalue_d = 10000.000 (10000.000000000)
fastestA_d(lvalue_d) * rvalue_d  = 10000.000 (10000.000000000)

10.f * 10000.f                  = 100000.000 (100000.000000000)
dummyA_f(10.f) * 10000.f    = 100000.000 (100000.000000000)
normA_f(10.f) * 10000.f   = 100000.000 (100000.000000000)
sseA_f(10.f) * 10000.f      = 100000.000 (100000.000000000)
fastA_f(10.f) * 10000.f     = 100000.000 (100000.000000000)
semiA_f(10.f) * 10000.f = 100000.000 (100000.000000000)
fastestA_f(10.f) * 10000.f  = 100000.000 (100000.000000000)
dummyA_d(lvalue_d) * rvalue_d    = 100000.000 (100000.000000000)
normA_d(lvalue_d) * rvalue_d   = 100000.000 (100000.000000000)
sseA_d(lvalue_d) * rvalue_d      = 100000.000 (100000.000000000)
fastA_d(lvalue_d) * rvalue_d     = 100000.000 (100000.000000000)
semiA_d(lvalue_d) * rvalue_d = 100000.000 (100000.000000000)
fastestA_d(lvalue_d) * rvalue_d  = 100000.000 (100000.000000000)

10.f * 100000.f                  = 1000000.000 (1000000.000000000)
dummyA_f(10.f) * 100000.f    = 1000000.000 (1000000.000000000)
normA_f(10.f) * 100000.f   = 1000000.000 (1000000.000000000)
sseA_f(10.f) * 100000.f      = 1000000.000 (1000000.000000000)
fastA_f(10.f) * 100000.f     = 1000000.000 (1000000.000000000)
semiA_f(10.f) * 100000.f = 1000000.000 (1000000.000000000)
fastestA_f(10.f) * 100000.f  = 1000000.000 (1000000.000000000)
dummyA_d(lvalue_d) * rvalue_d    = 1000000.000 (1000000.000000000)
normA_d(lvalue_d) * rvalue_d   = 1000000.000 (1000000.000000000)
sseA_d(lvalue_d) * rvalue_d      = 1000000.000 (1000000.000000000)
fastA_d(lvalue_d) * rvalue_d     = 1000000.000 (1000000.000000000)
semiA_d(lvalue_d) * rvalue_d = 1000000.000 (1000000.000000000)
fastestA_d(lvalue_d) * rvalue_d  = 1000000.000 (1000000.000000000)

10.f * 1000000.f                  = 10000000.000 (10000000.000000000)
dummyA_f(10.f) * 1000000.f    = 10000000.000 (10000000.000000000)
normA_f(10.f) * 1000000.f   = 10000000.000 (10000000.000000000)
sseA_f(10.f) * 1000000.f      = 10000000.000 (10000000.000000000)
fastA_f(10.f) * 1000000.f     = 10000000.000 (10000000.000000000)
semiA_f(10.f) * 1000000.f = 10000000.000 (10000000.000000000)
fastestA_f(10.f) * 1000000.f  = 10000000.000 (10000000.000000000)
dummyA_d(lvalue_d) * rvalue_d    = 10000000.000 (10000000.000000000)
normA_d(lvalue_d) * rvalue_d   = 10000000.000 (10000000.000000000)
sseA_d(lvalue_d) * rvalue_d      = 10000000.000 (10000000.000000000)
fastA_d(lvalue_d) * rvalue_d     = 10000000.000 (10000000.000000000)
semiA_d(lvalue_d) * rvalue_d = 10000000.000 (10000000.000000000)
fastestA_d(lvalue_d) * rvalue_d  = 10000000.000 (10000000.000000000)

10.f / 1.f                  = 10.000 (10.000000000)
dummyA_f(10.f) / 1.f    = 10.000 (10.000000000)
normA_f(10.f) / 1.f   = 10.000 (10.000000000)
sseA_f(10.f) / 1.f      = 10.000 (10.000000000)
fastA_f(10.f) / 1.f     = 10.000 (9.999999046)
semiA_f(10.f) / 1.f = 10.000 (9.999999046)
fastestA_f(10.f) / 1.f  = 9.998 (9.997558594)
dummyA_d(lvalue_d) / rvalue_d    = 10.000 (10.000000000)
normA_d(lvalue_d) / rvalue_d   = 10.000 (10.000000000)
sseA_d(lvalue_d) / rvalue_d      = 10.000 (10.000000000)
fastA_d(lvalue_d) / rvalue_d     = 10.000 (10.000000000)
semiA_d(lvalue_d) / rvalue_d = 10.000 (10.000000000)
fastestA_d(lvalue_d) / rvalue_d  = 10.000 (10.000000000)

10.f / 2.f                  = 5.000 (5.000000000)
dummyA_f(10.f) / 2.f    = 5.000 (5.000000000)
normA_f(10.f) / 2.f   = 5.000 (5.000000000)
sseA_f(10.f) / 2.f      = 5.000 (5.000000000)
fastA_f(10.f) / 2.f     = 5.000 (4.999999523)
semiA_f(10.f) / 2.f = 5.000 (4.999999523)
fastestA_f(10.f) / 2.f  = 4.999 (4.998779297)
dummyA_d(lvalue_d) / rvalue_d    = 5.000 (5.000000000)
normA_d(lvalue_d) / rvalue_d   = 5.000 (5.000000000)
sseA_d(lvalue_d) / rvalue_d      = 5.000 (5.000000000)
fastA_d(lvalue_d) / rvalue_d     = 5.000 (5.000000000)
semiA_d(lvalue_d) / rvalue_d = 5.000 (5.000000000)
fastestA_d(lvalue_d) / rvalue_d  = 5.000 (5.000000000)

10.f / 3.f                  = 3.333 (3.333333254)
dummyA_f(10.f) / 3.f    = 3.333 (3.333333254)
normA_f(10.f) / 3.f   = 3.333 (3.333333254)
sseA_f(10.f) / 3.f      = 3.333 (3.333333254)
fastA_f(10.f) / 3.f     = 3.333 (3.333333015)
semiA_f(10.f) / 3.f = 3.333 (3.333333015)
fastestA_f(10.f) / 3.f  = 3.333 (3.332519531)
dummyA_d(lvalue_d) / rvalue_d    = 3.333 (3.333333333)
normA_d(lvalue_d) / rvalue_d   = 3.333 (3.333333333)
sseA_d(lvalue_d) / rvalue_d      = 3.333 (3.333333333)
fastA_d(lvalue_d) / rvalue_d     = 3.333 (3.333333333)
semiA_d(lvalue_d) / rvalue_d = 3.333 (3.333333333)
fastestA_d(lvalue_d) / rvalue_d  = 3.333 (3.333333333)

10.f / 4.f                  = 2.500 (2.500000000)
dummyA_f(10.f) / 4.f    = 2.500 (2.500000000)
normA_f(10.f) / 4.f   = 2.500 (2.500000000)
sseA_f(10.f) / 4.f      = 2.500 (2.500000000)
fastA_f(10.f) / 4.f     = 2.500 (2.499999762)
semiA_f(10.f) / 4.f = 2.500 (2.499999762)
fastestA_f(10.f) / 4.f  = 2.499 (2.499389648)
dummyA_d(lvalue_d) / rvalue_d    = 2.500 (2.500000000)
normA_d(lvalue_d) / rvalue_d   = 2.500 (2.500000000)
sseA_d(lvalue_d) / rvalue_d      = 2.500 (2.500000000)
fastA_d(lvalue_d) / rvalue_d     = 2.500 (2.500000000)
semiA_d(lvalue_d) / rvalue_d = 2.500 (2.500000000)
fastestA_d(lvalue_d) / rvalue_d  = 2.500 (2.500000000)

10.f / 5.f                  = 2.000 (2.000000000)
dummyA_f(10.f) / 5.f    = 2.000 (2.000000000)
normA_f(10.f) / 5.f   = 2.000 (2.000000000)
sseA_f(10.f) / 5.f      = 2.000 (2.000000000)
fastA_f(10.f) / 5.f     = 2.000 (1.999999881)
semiA_f(10.f) / 5.f = 2.000 (1.999999881)
fastestA_f(10.f) / 5.f  = 2.000 (1.999511719)
dummyA_d(lvalue_d) / rvalue_d    = 2.000 (2.000000000)
normA_d(lvalue_d) / rvalue_d   = 2.000 (2.000000000)
sseA_d(lvalue_d) / rvalue_d      = 2.000 (2.000000000)
fastA_d(lvalue_d) / rvalue_d     = 2.000 (2.000000000)
semiA_d(lvalue_d) / rvalue_d = 2.000 (2.000000000)
fastestA_d(lvalue_d) / rvalue_d  = 2.000 (2.000000000)

10.f / 10.f                  = 1.000 (1.000000000)
dummyA_f(10.f) / 10.f    = 1.000 (1.000000000)
normA_f(10.f) / 10.f   = 1.000 (1.000000000)
sseA_f(10.f) / 10.f      = 1.000 (1.000000000)
fastA_f(10.f) / 10.f     = 1.000 (0.999999940)
semiA_f(10.f) / 10.f = 1.000 (0.999999940)
fastestA_f(10.f) / 10.f  = 1.000 (0.999755859)
dummyA_d(lvalue_d) / rvalue_d    = 1.000 (1.000000000)
normA_d(lvalue_d) / rvalue_d   = 1.000 (1.000000000)
sseA_d(lvalue_d) / rvalue_d      = 1.000 (1.000000000)
fastA_d(lvalue_d) / rvalue_d     = 1.000 (1.000000000)
semiA_d(lvalue_d) / rvalue_d = 1.000 (1.000000000)
fastestA_d(lvalue_d) / rvalue_d  = 1.000 (1.000000000)

10.f / 100.f                  = 0.100 (0.100000001)
dummyA_f(10.f) / 100.f    = 0.100 (0.100000001)
normA_f(10.f) / 100.f   = 0.100 (0.100000001)
sseA_f(10.f) / 100.f      = 0.100 (0.100000001)
fastA_f(10.f) / 100.f     = 0.100 (0.099999994)
semiA_f(10.f) / 100.f = 0.100 (0.099999994)
fastestA_f(10.f) / 100.f  = 0.100 (0.099983215)
dummyA_d(lvalue_d) / rvalue_d    = 0.100 (0.100000000)
normA_d(lvalue_d) / rvalue_d   = 0.100 (0.100000000)
sseA_d(lvalue_d) / rvalue_d      = 0.100 (0.100000000)
fastA_d(lvalue_d) / rvalue_d     = 0.100 (0.100000000)
semiA_d(lvalue_d) / rvalue_d = 0.100 (0.100000000)
fastestA_d(lvalue_d) / rvalue_d  = 0.100 (0.100000000)

10.f / 1000.f                  = 0.010 (0.010000000)
dummyA_f(10.f) / 1000.f    = 0.010 (0.010000000)
normA_f(10.f) / 1000.f   = 0.010 (0.010000000)
sseA_f(10.f) / 1000.f      = 0.010 (0.010000000)
fastA_f(10.f) / 1000.f     = 0.010 (0.010000001)
semiA_f(10.f) / 1000.f = 0.010 (0.010000001)
fastestA_f(10.f) / 1000.f  = 0.010 (0.009999275)
dummyA_d(lvalue_d) / rvalue_d    = 0.010 (0.010000000)
normA_d(lvalue_d) / rvalue_d   = 0.010 (0.010000000)
sseA_d(lvalue_d) / rvalue_d      = 0.010 (0.010000000)
fastA_d(lvalue_d) / rvalue_d     = 0.010 (0.010000000)
semiA_d(lvalue_d) / rvalue_d = 0.010 (0.010000000)
fastestA_d(lvalue_d) / rvalue_d  = 0.010 (0.010000000)

10.f / 10000.f                  = 0.001 (0.001000000)
dummyA_f(10.f) / 10000.f    = 0.001 (0.001000000)
normA_f(10.f) / 10000.f   = 0.001 (0.001000000)
sseA_f(10.f) / 10000.f      = 0.001 (0.001000000)
fastA_f(10.f) / 10000.f     = 0.001 (0.001000000)
semiA_f(10.f) / 10000.f = 0.001 (0.001000000)
fastestA_f(10.f) / 10000.f  = 0.001 (0.000999868)
dummyA_d(lvalue_d) / rvalue_d    = 0.001 (0.001000000)
normA_d(lvalue_d) / rvalue_d   = 0.001 (0.001000000)
sseA_d(lvalue_d) / rvalue_d      = 0.001 (0.001000000)
fastA_d(lvalue_d) / rvalue_d     = 0.001 (0.001000000)
semiA_d(lvalue_d) / rvalue_d = 0.001 (0.001000000)
fastestA_d(lvalue_d) / rvalue_d  = 0.001 (0.001000000)

10.f / 100000.f                  = 0.000 (0.000100000)
dummyA_f(10.f) / 100000.f    = 0.000 (0.000100000)
normA_f(10.f) / 100000.f   = 0.000 (0.000100000)
sseA_f(10.f) / 100000.f      = 0.000 (0.000100000)
fastA_f(10.f) / 100000.f     = 0.000 (0.000100000)
semiA_f(10.f) / 100000.f = 0.000 (0.000100000)
fastestA_f(10.f) / 100000.f  = 0.000 (0.000099987)
dummyA_d(lvalue_d) / rvalue_d    = 0.000 (0.000100000)
normA_d(lvalue_d) / rvalue_d   = 0.000 (0.000100000)
sseA_d(lvalue_d) / rvalue_d      = 0.000 (0.000100000)
fastA_d(lvalue_d) / rvalue_d     = 0.000 (0.000100000)
semiA_d(lvalue_d) / rvalue_d = 0.000 (0.000100000)
fastestA_d(lvalue_d) / rvalue_d  = 0.000 (0.000100000)

10.f / 1000000.f                  = 0.000 (0.000010000)
dummyA_f(10.f) / 1000000.f    = 0.000 (0.000010000)
normA_f(10.f) / 1000000.f   = 0.000 (0.000010000)
sseA_f(10.f) / 1000000.f      = 0.000 (0.000010000)
fastA_f(10.f) / 1000000.f     = 0.000 (0.000010000)
semiA_f(10.f) / 1000000.f = 0.000 (0.000010000)
fastestA_f(10.f) / 1000000.f  = 0.000 (0.000010000)
dummyA_d(lvalue_d) / rvalue_d    = 0.000 (0.000010000)
normA_d(lvalue_d) / rvalue_d   = 0.000 (0.000010000)
sseA_d(lvalue_d) / rvalue_d      = 0.000 (0.000010000)
fastA_d(lvalue_d) / rvalue_d     = 0.000 (0.000010000)
semiA_d(lvalue_d) / rvalue_d = 0.000 (0.000010000)
fastestA_d(lvalue_d) / rvalue_d  = 0.000 (0.000010000)

--------------------------------------------------------------------------------
[ Test for fast sqr ]

std::sqrt(1.f)              = 1.000 (1.000000000)
sqr(dummyA_f(1.f))     = 1.000 (1.000000000)
sqr(normA_f(1.f))    = 1.000 (1.000000000)
sqr(sseA_f(1.f))       = 1.000 (1.000000000)
sqr(fastA_f(1.f))      = 1.000 (0.999999940)
sqr(semiA_f(1.f))  = 1.000 (0.999999940)
sqr(fastestA_f(1.f))   = 1.000 (0.999755859)
sqr(dummyA_d(value_d))     = 1.000 (1.000000000)
sqr(normA_d(value_d))    = 1.000 (1.000000000)
sqr(sseA_d(value_d))       = 1.000 (1.000000000)
sqr(fastA_d(value_d))      = 1.000 (1.000000000)
sqr(semiA_d(value_d))  = 1.000 (1.000000000)
sqr(fastestA_d(value_d))   = 1.000 (1.000000000)

std::sqrt(2.f)              = 1.414 (1.414213538)
sqr(dummyA_f(2.f))     = 1.414 (1.414213538)
sqr(normA_f(2.f))    = 1.414 (1.414213538)
sqr(sseA_f(2.f))       = 1.414 (1.414213538)
sqr(fastA_f(2.f))      = 1.414 (1.414213419)
sqr(semiA_f(2.f))  = 1.414 (1.414213538)
sqr(fastestA_f(2.f))   = 1.414 (1.413818359)
sqr(dummyA_d(value_d))     = 1.414 (1.414213562)
sqr(normA_d(value_d))    = 1.414 (1.414213562)
sqr(sseA_d(value_d))       = 1.414 (1.414213562)
sqr(fastA_d(value_d))      = 1.414 (1.414213562)
sqr(semiA_d(value_d))  = 1.414 (1.414213562)
sqr(fastestA_d(value_d))   = 1.414 (1.414213562)

std::sqrt(3.f)              = 1.732 (1.732050776)
sqr(dummyA_f(3.f))     = 1.732 (1.732050776)
sqr(normA_f(3.f))    = 1.732 (1.732050776)
sqr(sseA_f(3.f))       = 1.732 (1.732050776)
sqr(fastA_f(3.f))      = 1.732 (1.732050776)
sqr(semiA_f(3.f))  = 1.732 (1.732050776)
sqr(fastestA_f(3.f))   = 1.732 (1.731811523)
sqr(dummyA_d(value_d))     = 1.732 (1.732050808)
sqr(normA_d(value_d))    = 1.732 (1.732050808)
sqr(sseA_d(value_d))       = 1.732 (1.732050808)
sqr(fastA_d(value_d))      = 1.732 (1.732050808)
sqr(semiA_d(value_d))  = 1.732 (1.732050808)
sqr(fastestA_d(value_d))   = 1.732 (1.732050808)

std::sqrt(4.f)              = 2.000 (2.000000000)
sqr(dummyA_f(4.f))     = 2.000 (2.000000000)
sqr(normA_f(4.f))    = 2.000 (2.000000000)
sqr(sseA_f(4.f))       = 2.000 (2.000000000)
sqr(fastA_f(4.f))      = 2.000 (1.999999881)
sqr(semiA_f(4.f))  = 2.000 (1.999999881)
sqr(fastestA_f(4.f))   = 2.000 (1.999511719)
sqr(dummyA_d(value_d))     = 2.000 (2.000000000)
sqr(normA_d(value_d))    = 2.000 (2.000000000)
sqr(sseA_d(value_d))       = 2.000 (2.000000000)
sqr(fastA_d(value_d))      = 2.000 (2.000000000)
sqr(semiA_d(value_d))  = 2.000 (2.000000000)
sqr(fastestA_d(value_d))   = 2.000 (2.000000000)

std::sqrt(5.f)              = 2.236 (2.236068010)
sqr(dummyA_f(5.f))     = 2.236 (2.236068010)
sqr(normA_f(5.f))    = 2.236 (2.236068010)
sqr(sseA_f(5.f))       = 2.236 (2.236068010)
sqr(fastA_f(5.f))      = 2.236 (2.236068010)
sqr(semiA_f(5.f))  = 2.236 (2.236068010)
sqr(fastestA_f(5.f))   = 2.236 (2.235717773)
sqr(dummyA_d(value_d))     = 2.236 (2.236067977)
sqr(normA_d(value_d))    = 2.236 (2.236067977)
sqr(sseA_d(value_d))       = 2.236 (2.236067977)
sqr(fastA_d(value_d))      = 2.236 (2.236067977)
sqr(semiA_d(value_d))  = 2.236 (2.236067977)
sqr(fastestA_d(value_d))   = 2.236 (2.236067977)

std::sqrt(10.f)              = 3.162 (3.162277699)
sqr(dummyA_f(10.f))     = 3.162 (3.162277699)
sqr(normA_f(10.f))    = 3.162 (3.162277699)
sqr(sseA_f(10.f))       = 3.162 (3.162277699)
sqr(fastA_f(10.f))      = 3.162 (3.162277699)
sqr(semiA_f(10.f))  = 3.162 (3.162277699)
sqr(fastestA_f(10.f))   = 3.162 (3.161621094)
sqr(dummyA_d(value_d))     = 3.162 (3.162277660)
sqr(normA_d(value_d))    = 3.162 (3.162277660)
sqr(sseA_d(value_d))       = 3.162 (3.162277660)
sqr(fastA_d(value_d))      = 3.162 (3.162277660)
sqr(semiA_d(value_d))  = 3.162 (3.162277660)
sqr(fastestA_d(value_d))   = 3.162 (3.162277660)

std::sqrt(100.f)              = 10.000 (10.000000000)
sqr(dummyA_f(100.f))     = 10.000 (10.000000000)
sqr(normA_f(100.f))    = 10.000 (10.000000000)
sqr(sseA_f(100.f))       = 10.000 (10.000000000)
sqr(fastA_f(100.f))      = 10.000 (10.000000000)
sqr(semiA_f(100.f))  = 10.000 (9.999999046)
sqr(fastestA_f(100.f))   = 9.999 (9.999084473)
sqr(dummyA_d(value_d))     = 10.000 (10.000000000)
sqr(normA_d(value_d))    = 10.000 (10.000000000)
sqr(sseA_d(value_d))       = 10.000 (10.000000000)
sqr(fastA_d(value_d))      = 10.000 (10.000000000)
sqr(semiA_d(value_d))  = 10.000 (10.000000000)
sqr(fastestA_d(value_d))   = 10.000 (10.000000000)

std::sqrt(1000.f)              = 31.623 (31.622776031)
sqr(dummyA_f(1000.f))     = 31.623 (31.622776031)
sqr(normA_f(1000.f))    = 31.623 (31.622776031)
sqr(sseA_f(1000.f))       = 31.623 (31.622776031)
sqr(fastA_f(1000.f))      = 31.623 (31.622774124)
sqr(semiA_f(1000.f))  = 31.623 (31.622774124)
sqr(fastestA_f(1000.f))   = 31.616 (31.616210938)
sqr(dummyA_d(value_d))     = 31.623 (31.622776602)
sqr(normA_d(value_d))    = 31.623 (31.622776602)
sqr(sseA_d(value_d))       = 31.623 (31.622776602)
sqr(fastA_d(value_d))      = 31.623 (31.622776602)
sqr(semiA_d(value_d))  = 31.623 (31.622776602)
sqr(fastestA_d(value_d))   = 31.623 (31.622776602)

std::sqrt(10000.f)              = 100.000 (100.000000000)
sqr(dummyA_f(10000.f))     = 100.000 (100.000000000)
sqr(normA_f(10000.f))    = 100.000 (100.000000000)
sqr(sseA_f(10000.f))       = 100.000 (100.000000000)
sqr(fastA_f(10000.f))      = 100.000 (100.000000000)
sqr(semiA_f(10000.f))  = 100.000 (100.000000000)
sqr(fastestA_f(10000.f))   = 99.983 (99.983215332)
sqr(dummyA_d(value_d))     = 100.000 (100.000000000)
sqr(normA_d(value_d))    = 100.000 (100.000000000)
sqr(sseA_d(value_d))       = 100.000 (100.000000000)
sqr(fastA_d(value_d))      = 100.000 (100.000000000)
sqr(semiA_d(value_d))  = 100.000 (100.000000000)
sqr(fastestA_d(value_d))   = 100.000 (100.000000000)

std::sqrt(100000.f)              = 316.228 (316.227752686)
sqr(dummyA_f(100000.f))     = 316.228 (316.227752686)
sqr(normA_f(100000.f))    = 316.228 (316.227752686)
sqr(sseA_f(100000.f))       = 316.228 (316.227752686)
sqr(fastA_f(100000.f))      = 316.228 (316.227752686)
sqr(semiA_f(100000.f))  = 316.228 (316.227752686)
sqr(fastestA_f(100000.f))   = 316.238 (316.238403320)
sqr(dummyA_d(value_d))     = 316.228 (316.227766017)
sqr(normA_d(value_d))    = 316.228 (316.227766017)
sqr(sseA_d(value_d))       = 316.228 (316.227766017)
sqr(fastA_d(value_d))      = 316.228 (316.227766017)
sqr(semiA_d(value_d))  = 316.228 (316.227766017)
sqr(fastestA_d(value_d))   = 316.228 (316.227766017)

std::sqrt(1000000.f)              = 1000.000 (1000.000000000)
sqr(dummyA_f(1000000.f))     = 1000.000 (1000.000000000)
sqr(normA_f(1000000.f))    = 1000.000 (1000.000000000)
sqr(sseA_f(1000000.f))       = 1000.000 (1000.000000000)
sqr(fastA_f(1000000.f))      = 1000.000 (1000.000061035)
sqr(semiA_f(1000000.f))  = 1000.000 (999.999938965)
sqr(fastestA_f(1000000.f))   = 999.927 (999.927490234)
sqr(dummyA_d(value_d))     = 1000.000 (1000.000000000)
sqr(normA_d(value_d))    = 1000.000 (1000.000000000)
sqr(sseA_d(value_d))       = 1000.000 (1000.000000000)
sqr(fastA_d(value_d))      = 1000.000 (1000.000000000)
sqr(semiA_d(value_d))  = 1000.000 (1000.000000000)
sqr(fastestA_d(value_d))   = 1000.000 (1000.000000000)

--------------------------------------------------------------------------------
[ Test for vector operation ]

- 2D vector -
vec2_1=[1.00000][2.00000]
vec2_2=[3.00000][4.00000]
norm(vec2_1)                             = 2.23607
normSq(vec2_1)                           = 5.00000
merge(vec2_result, vec2_1, vec2_2)       = [4.00000][6.00000]
difference(vec2_result, vec2_1, vec2_2)  = [-2.00000][-2.00000]
length(vec2_1, vec2_2)                   = 2.82843
lengthSq(vec2_1, vec2_2)                 = 8.00000
normalize(vec2_result, vec2_1)           = [0.44721][0.89443]
mul(vec2_result, vec2_1, 10.f)           = [10.00000][20.00000]
forward(vec2_result, vec2_1, 10.f)       = [5.47214][10.94427]
dot(vec2_1, vec2_2)                      = 11.00000
normalizedDot(vec2_1, vec2_2)            = 0.98387
norm(fastA_2f(vec2_1))                                                 = 2.23607
normSq(fastA_2f(vec2_1))                                               = 5.00000
fastA_2f vec2_result = merge(fastA_2f(vec2_1), fastA_2f(vec2_2))       = [4.00000][6.00000]
fastA_2f vec2_result = difference(fastA_2f(vec2_1), fastA_2f(vec2_2))  = [-2.00000][-2.00000]
length(fastA_2f(vec2_1), fastA_2f(vec2_2))                             = 2.82843
lengthSq(fastA_2f(vec2_1), fastA_2f(vec2_2))                           = 8.00000
fastA_2f vec2_result = normalize(fastA_2f(vec2_1))                     = [0.44721][0.89443]
fastA_2f vec2_result = mul(fastA_2f(vec2_1), 10.f)                     = [10.00000][20.00000]
fastA_2f vec2_result = forward(fastA_2f(vec2_1), 10.f)                 = [5.47214][10.94427]
dot(fastA_2f(vec2_1), fastA_2f(vec2_2))                                = 11.00000
normalizedDot(fastA_2f(vec2_1), fastA_2f(vec2_2))                      = 0.98387
norm(fastestA_2f(vec2_1))                                                       = 2.23607
normSq(fastestA_2f(vec2_1))                                                     = 5.00000
fastestA_2f vec2_result = merge(fastestA_2f(vec2_1), fastestA_2f(vec2_2))       = [4.00000][6.00000]
fastestA_2f vec2_result = difference(fastestA_2f(vec2_1), fastestA_2f(vec2_2))  = [-2.00000][-2.00000]
length(fastestA_2f(vec2_1), fastestA_2f(vec2_2))                                = 2.82843
lengthSq(fastestA_2f(vec2_1), fastestA_2f(vec2_2))                              = 8.00000
fastestA_2f vec2_result = normalize(fastestA_2f(vec2_1))                        = [0.44721][0.89443]
fastestA_2f vec2_result = mul(fastestA_2f(vec2_1), 10.f)                        = [10.00000][20.00000]
fastestA_2f vec2_result = forward(fastestA_2f(vec2_1), 10.f)                    = [5.47214][10.94427]
dot(fastestA_2f(vec2_1), fastestA_2f(vec2_2))                                   = 11.00000
normalizedDot(fastestA_2f(vec2_1), fastestA_2f(vec2_2))                         = 0.98387
norm(semiA_2f(vec2_1))                                                 = 2.23607
normSq(semiA_2f(vec2_1))                                               = 5.00000
semiA_2f vec2_result = merge(semiA_2f(vec2_1), semiA_2f(vec2_2))       = [4.00000][6.00000]
semiA_2f vec2_result = difference(semiA_2f(vec2_1), semiA_2f(vec2_2))  = [-2.00000][-2.00000]
length(semiA_2f(vec2_1), semiA_2f(vec2_2))                             = 2.82843
lengthSq(semiA_2f(vec2_1), semiA_2f(vec2_2))                           = 8.00000
semiA_2f vec2_result = normalize(semiA_2f(vec2_1))                     = [0.44721][0.89443]
semiA_2f vec2_result = mul(semiA_2f(vec2_1), 10.f)                     = [10.00000][20.00000]
semiA_2f vec2_result = forward(semiA_2f(vec2_1), 10.f)                 = [5.47214][10.94427]
dot(semiA_2f(vec2_1), semiA_2f(vec2_2))                                = 11.00000
normalizedDot(semiA_2f(vec2_1), semiA_2f(vec2_2))                      = 0.98387
norm(sseA_2f(vec2_1))                                               = 2.23607
normSq(sseA_2f(vec2_1))                                             = 5.00000
sseA_2f vec2_result = merge(sseA_2f(vec2_1), sseA_2f(vec2_2))       = [4.00000][6.00000]
sseA_2f vec2_result = difference(sseA_2f(vec2_1), sseA_2f(vec2_2))  = [-2.00000][-2.00000]
length(sseA_2f(vec2_1), sseA_2f(vec2_2))                            = 2.82843
lengthSq(sseA_2f(vec2_1), sseA_2f(vec2_2))                          = 8.00000
sseA_2f vec2_result = normalize(sseA_2f(vec2_1))                    = [0.44721][0.89443]
sseA_2f vec2_result = mul(sseA_2f(vec2_1), 10.f)                    = [10.00000][20.00000]
sseA_2f vec2_result = forward(sseA_2f(vec2_1), 10.f)                = [5.47214][10.94427]
dot(sseA_2f(vec2_1), sseA_2f(vec2_2))                               = 11.00000
normalizedDot(sseA_2f(vec2_1), sseA_2f(vec2_2))                     = 0.98387
norm(normA_2f(vec2_1))                                                 = 2.23607
normSq(normA_2f(vec2_1))                                               = 5.00000
normA_2f vec2_result = merge(normA_2f(vec2_1), normA_2f(vec2_2))       = [4.00000][6.00000]
normA_2f vec2_result = difference(normA_2f(vec2_1), normA_2f(vec2_2))  = [-2.00000][-2.00000]
length(normA_2f(vec2_1), normA_2f(vec2_2))                             = 2.82843
lengthSq(normA_2f(vec2_1), normA_2f(vec2_2))                           = 8.00000
normA_2f vec2_result = normalize(normA_2f(vec2_1))                     = [0.44721][0.89443]
normA_2f vec2_result = mul(normA_2f(vec2_1), 10.f)                     = [10.00000][20.00000]
normA_2f vec2_result = forward(normA_2f(vec2_1), 10.f)                 = [5.47214][10.94427]
dot(normA_2f(vec2_1), normA_2f(vec2_2))                                = 11.00000
normalizedDot(normA_2f(vec2_1), normA_2f(vec2_2))                      = 0.98387
norm(dummyA_2f(vec2_1))                                        = 2.23607
normSq(dummyA_2f(vec2_1))                                      = 5.00000
merge(vec2_result, dummyA_2f(vec2_1), dummyA_2f(vec2_2))       = [4.00000][6.00000]
difference(vec2_result, dummyA_2f(vec2_1), dummyA_2f(vec2_2))  = [-2.00000][-2.00000]
length(dummyA_2f(vec2_1), dummyA_2f(vec2_2))                   = 2.82843
lengthSq(dummyA_2f(vec2_1), dummyA_2f(vec2_2))                 = 8.00000
normalize(vec2_result, dummyA_2f(vec2_1))                      = [0.44721][0.89443]
mul(vec2_result, dummyA_2f(vec2_1), 10.f)                      = [10.00000][20.00000]
forward(vec2_result, dummyA_2f(vec2_1), 10.f)                  = [5.47214][10.94427]
dot(dummyA_2f(vec2_1), dummyA_2f(vec2_2))                      = 11.00000
normalizedDot(dummyA_2f(vec2_1), dummyA_2f(vec2_2))            = 0.98387

- 3D vector -
vec3_1=[1.00000][2.00000][3.00000]
vec3_2=[4.00000][5.00000][6.00000]
norm(vec3_1)                             = 3.74166
normSq(vec3_1)                           = 14.00000
merge(vec3_result, vec3_1, vec3_2)       = [5.00000][7.00000][9.00000]
difference(vec3_result, vec3_1, vec3_2)  = [-3.00000][-3.00000][-3.00000]
length(vec3_1, vec3_2)                   = 5.19615
lengthSq(vec3_1, vec3_2)                 = 27.00000
normalize(vec3_result, vec3_1)           = [0.26726][0.53452][0.80178]
mul(vec3_result, vec3_1, 10.f)           = [10.00000][20.00000][30.00000]
forward(vec3_result, vec3_1, 10.f)       = [3.67261][7.34522][11.01784]
dot(vec3_1, vec3_2)                      = 32.00000
normalizedDot(vec3_1, vec3_2)            = 0.97463
cross(vec3_result, vec3_1, vec3_2)       = [-3.00000][6.00000][-3.00000]
norm(fastA_3f(vec3_1))                                                 = 3.74166
normSq(fastA_3f(vec3_1))                                               = 14.00000
fastA_3f vec3_result = merge(fastA_3f(vec3_1), fastA_3f(vec3_2))       = [5.00000][7.00000][9.00000]
fastA_3f vec3_result = difference(fastA_3f(vec3_1), fastA_3f(vec3_2))  = [-3.00000][-3.00000][-3.00000]
length(fastA_3f(vec3_1), fastA_3f(vec3_2))                             = 5.19615
lengthSq(fastA_3f(vec3_1), fastA_3f(vec3_2))                           = 27.00000
fastA_3f vec3_result = normalize(fastA_3f(vec3_1))                     = [0.26726][0.53452][0.80178]
fastA_3f vec3_result = mul(fastA_3f(vec3_1), 10.f)                     = [10.00000][20.00000][30.00000]
fastA_3f vec3_result = forward(fastA_3f(vec3_1), 10.f)                 = [3.67261][7.34522][11.01784]
dot(fastA_3f(vec3_1), fastA_3f(vec3_2))                                = 32.00000
normalizedDot(fastA_3f(vec3_1), fastA_3f(vec3_2))                      = 0.97463
fastA_3f vec3_result = cross(fastA_3f(vec3_1), fastA_3f(vec3_2))       = [-3.00000][6.00000][-3.00000]
norm(fastestA_3f(vec3_1))                                                       = 3.74166
normSq(fastestA_3f(vec3_1))                                                     = 14.00000
fastestA_3f vec3_result = merge(fastestA_3f(vec3_1), fastestA_3f(vec3_2))       = [5.00000][7.00000][9.00000]
fastestA_3f vec3_result = difference(fastestA_3f(vec3_1), fastestA_3f(vec3_2))  = [-3.00000][-3.00000][-3.00000]
length(fastestA_3f(vec3_1), fastestA_3f(vec3_2))                                = 5.19615
lengthSq(fastestA_3f(vec3_1), fastestA_3f(vec3_2))                              = 27.00000
fastestA_3f vec3_result = normalize(fastestA_3f(vec3_1))                        = [0.26726][0.53452][0.80178]
fastestA_3f vec3_result = mul(fastestA_3f(vec3_1), 10.f)                        = [10.00000][20.00000][30.00000]
fastestA_3f vec3_result = forward(fastestA_3f(vec3_1), 10.f)                    = [3.67261][7.34522][11.01784]
dot(fastestA_3f(vec3_1), fastestA_3f(vec3_2))                                   = 32.00000
normalizedDot(fastestA_3f(vec3_1), fastestA_3f(vec3_2))                         = 0.97463
fastestA_3f vec3_result = cross(fastestA_3f(vec3_1), fastestA_3f(vec3_2))       = [-3.00000][6.00000][-3.00000]
norm(semiA_3f(vec3_1))                                                 = 3.74166
normSq(semiA_3f(vec3_1))                                               = 14.00000
semiA_3f vec3_result = merge(semiA_3f(vec3_1), semiA_3f(vec3_2))       = [5.00000][7.00000][9.00000]
semiA_3f vec3_result = difference(semiA_3f(vec3_1), semiA_3f(vec3_2))  = [-3.00000][-3.00000][-3.00000]
length(semiA_3f(vec3_1), semiA_3f(vec3_2))                             = 5.19615
lengthSq(semiA_3f(vec3_1), semiA_3f(vec3_2))                           = 27.00000
semiA_3f vec3_result = normalize(semiA_3f(vec3_1))                     = [0.26726][0.53452][0.80178]
semiA_3f vec3_result = mul(semiA_3f(vec3_1), 10.f)                     = [10.00000][20.00000][30.00000]
semiA_3f vec3_result = forward(semiA_3f(vec3_1), 10.f)                 = [3.67261][7.34522][11.01784]
dot(semiA_3f(vec3_1), semiA_3f(vec3_2))                                = 32.00000
normalizedDot(semiA_3f(vec3_1), semiA_3f(vec3_2))                      = 0.97463
semiA_3f vec3_result = cross(semiA_3f(vec3_1), semiA_3f(vec3_2))       = [-3.00000][6.00000][-3.00000]
norm(sseA_3f(vec3_1))                                               = 3.74166
normSq(sseA_3f(vec3_1))                                             = 14.00000
sseA_3f vec3_result = merge(sseA_3f(vec3_1), sseA_3f(vec3_2))       = [5.00000][7.00000][9.00000]
sseA_3f vec3_result = difference(sseA_3f(vec3_1), sseA_3f(vec3_2))  = [-3.00000][-3.00000][-3.00000]
length(sseA_3f(vec3_1), sseA_3f(vec3_2))                            = 5.19615
lengthSq(sseA_3f(vec3_1), sseA_3f(vec3_2))                          = 27.00000
sseA_3f vec3_result = normalize(sseA_3f(vec3_1))                    = [0.26726][0.53452][0.80178]
sseA_3f vec3_result = mul(sseA_3f(vec3_1), 10.f)                    = [10.00000][20.00000][30.00000]
sseA_3f vec3_result = forward(sseA_3f(vec3_1), 10.f)                = [3.67261][7.34522][11.01784]
dot(sseA_3f(vec3_1), sseA_3f(vec3_2))                               = 32.00000
normalizedDot(sseA_3f(vec3_1), sseA_3f(vec3_2))                     = 0.97463
sseA_3f vec3_result = cross(sseA_3f(vec3_1), sseA_3f(vec3_2))       = [-3.00000][6.00000][-3.00000]
norm(normA_3f(vec3_1))                                                 = 3.74166
normSq(normA_3f(vec3_1))                                               = 14.00000
normA_3f vec3_result = merge(normA_3f(vec3_1), normA_3f(vec3_2))       = [5.00000][7.00000][9.00000]
normA_3f vec3_result = difference(normA_3f(vec3_1), normA_3f(vec3_2))  = [-3.00000][-3.00000][-3.00000]
length(normA_3f(vec3_1), normA_3f(vec3_2))                             = 5.19615
lengthSq(normA_3f(vec3_1), normA_3f(vec3_2))                           = 27.00000
normA_3f vec3_result = normalize(normA_3f(vec3_1))                     = [0.26726][0.53452][0.80178]
normA_3f vec3_result = mul(normA_3f(vec3_1), 10.f)                     = [10.00000][20.00000][30.00000]
normA_3f vec3_result = forward(normA_3f(vec3_1), 10.f)                 = [3.67261][7.34522][11.01784]
dot(normA_3f(vec3_1), normA_3f(vec3_2))                                = 32.00000
normalizedDot(normA_3f(vec3_1), normA_3f(vec3_2))                      = 0.97463
normA_3f vec3_result = cross(normA_3f(vec3_1), normA_3f(vec3_2))       = [-3.00000][6.00000][-3.00000]
norm(dummyA_3f(vec3_1))                                        = 3.74166
normSq(dummyA_3f(vec3_1))                                      = 14.00000
merge(vec3_result, dummyA_3f(vec3_1), dummyA_3f(vec3_2))       = [5.00000][7.00000][9.00000]
difference(vec3_result, dummyA_3f(vec3_1), dummyA_3f(vec3_2))  = [-3.00000][-3.00000][-3.00000]
length(dummyA_3f(vec3_1), dummyA_3f(vec3_2))                   = 5.19615
lengthSq(dummyA_3f(vec3_1), dummyA_3f(vec3_2))                 = 27.00000
normalize(vec3_result, dummyA_3f(vec3_1))                      = [0.26726][0.53452][0.80178]
mul(vec3_result, dummyA_3f(vec3_1), 10.f)                      = [10.00000][20.00000][30.00000]
forward(vec3_result, dummyA_3f(vec3_1), 10.f)                  = [3.67261][7.34522][11.01784]
dot(dummyA_3f(vec3_1), dummyA_3f(vec3_2))                      = 32.00000
normalizedDot(dummyA_3f(vec3_1), dummyA_3f(vec3_2))            = 0.97463
cross(vec3_result, dummyA_3f(vec3_1), dummyA_3f(vec3_2))       = [-3.00000][6.00000][-3.00000]

- 4D vector -
vec4_1=[1.00000][2.00000][3.00000]
vec4_2=[4.00000][5.00000][6.00000]
norm(vec4_1)                             = 3.74166
normSq(vec4_1)                           = 14.00000
merge(vec4_result, vec4_1, vec4_2)       = [5.00000][7.00000][9.00000]
difference(vec4_result, vec4_1, vec4_2)  = [-3.00000][-3.00000][-3.00000]
length(vec4_1, vec4_2)                   = 5.19615
lengthSq(vec4_1, vec4_2)                 = 27.00000
normalize(vec4_result, vec4_1)           = [0.26726][0.53452][0.80178]
mul(vec4_result, vec4_1, 10.f)           = [10.00000][20.00000][30.00000]
forward(vec4_result, vec4_1, 10.f)       = [3.67261][7.34522][11.01784]
dot(vec4_1, vec4_2)                      = 32.00000
normalizedDot(vec4_1, vec4_2)            = 0.97463
cross(vec4_result, vec4_1, vec4_2)       = [-3.00000][6.00000][-3.00000]
norm(fastA_4f(vec4_1))                                                 = 3.74166
normSq(fastA_4f(vec4_1))                                               = 14.00000
fastA_4f vec4_result = merge(fastA_4f(vec4_1), fastA_4f(vec4_2))       = [5.00000][7.00000][9.00000]
fastA_4f vec4_result = difference(fastA_4f(vec4_1), fastA_4f(vec4_2))  = [-3.00000][-3.00000][-3.00000]
length(fastA_4f(vec4_1), fastA_4f(vec4_2))                             = 5.19615
lengthSq(fastA_4f(vec4_1), fastA_4f(vec4_2))                           = 27.00000
fastA_4f vec4_result = normalize(fastA_4f(vec4_1))                     = [0.26726][0.53452][0.80178]
fastA_4f vec4_result = mul(fastA_4f(vec4_1), 10.f)                     = [10.00000][20.00000][30.00000]
fastA_4f vec4_result = forward(fastA_4f(vec4_1), 10.f)                 = [3.67261][7.34522][11.01784]
dot(fastA_4f(vec4_1), fastA_4f(vec4_2))                                = 32.00000
normalizedDot(fastA_4f(vec4_1), fastA_4f(vec4_2))                      = 0.97463
fastA_4f vec4_result = cross(fastA_4f(vec4_1), fastA_4f(vec4_2))       = [-3.00000][6.00000][-3.00000]
norm(fastestA_4f(vec4_1))                                                       = 3.74166
normSq(fastestA_4f(vec4_1))                                                     = 14.00000
fastestA_4f vec4_result = merge(fastestA_4f(vec4_1), fastestA_4f(vec4_2))       = [5.00000][7.00000][9.00000]
fastestA_4f vec4_result = difference(fastestA_4f(vec4_1), fastestA_4f(vec4_2))  = [-3.00000][-3.00000][-3.00000]
length(fastestA_4f(vec4_1), fastestA_4f(vec4_2))                                = 5.19615
lengthSq(fastestA_4f(vec4_1), fastestA_4f(vec4_2))                              = 27.00000
fastestA_4f vec4_result = normalize(fastestA_4f(vec4_1))                        = [0.26726][0.53452][0.80178]
fastestA_4f vec4_result = mul(fastestA_4f(vec4_1), 10.f)                        = [10.00000][20.00000][30.00000]
fastestA_4f vec4_result = forward(fastestA_4f(vec4_1), 10.f)                    = [3.67261][7.34522][11.01784]
dot(fastestA_4f(vec4_1), fastestA_4f(vec4_2))                                   = 32.00000
normalizedDot(fastestA_4f(vec4_1), fastestA_4f(vec4_2))                         = 0.97463
fastestA_4f vec4_result = cross(fastestA_4f(vec4_1), fastestA_4f(vec4_2))       = [-3.00000][6.00000][-3.00000]
norm(semiA_4f(vec4_1))                                                 = 3.74166
normSq(semiA_4f(vec4_1))                                               = 14.00000
semiA_4f vec4_result = merge(semiA_4f(vec4_1), semiA_4f(vec4_2))       = [5.00000][7.00000][9.00000]
semiA_4f vec4_result = difference(semiA_4f(vec4_1), semiA_4f(vec4_2))  = [-3.00000][-3.00000][-3.00000]
length(semiA_4f(vec4_1), semiA_4f(vec4_2))                             = 5.19615
lengthSq(semiA_4f(vec4_1), semiA_4f(vec4_2))                           = 27.00000
semiA_4f vec4_result = normalize(semiA_4f(vec4_1))                     = [0.26726][0.53452][0.80178]
semiA_4f vec4_result = mul(semiA_4f(vec4_1), 10.f)                     = [10.00000][20.00000][30.00000]
semiA_4f vec4_result = forward(semiA_4f(vec4_1), 10.f)                 = [3.67261][7.34522][11.01784]
dot(semiA_4f(vec4_1), semiA_4f(vec4_2))                                = 32.00000
normalizedDot(semiA_4f(vec4_1), semiA_4f(vec4_2))                      = 0.97463
semiA_4f vec4_result = cross(semiA_4f(vec4_1), semiA_4f(vec4_2))       = [-3.00000][6.00000][-3.00000]
norm(sseA_4f(vec4_1))                                               = 3.74166
normSq(sseA_4f(vec4_1))                                             = 14.00000
sseA_4f vec4_result = merge(sseA_4f(vec4_1), sseA_4f(vec4_2))       = [5.00000][7.00000][9.00000]
sseA_4f vec4_result = difference(sseA_4f(vec4_1), sseA_4f(vec4_2))  = [-3.00000][-3.00000][-3.00000]
length(sseA_4f(vec4_1), sseA_4f(vec4_2))                            = 5.19615
lengthSq(sseA_4f(vec4_1), sseA_4f(vec4_2))                          = 27.00000
sseA_4f vec4_result = normalize(sseA_4f(vec4_1))                    = [0.26726][0.53452][0.80178]
sseA_4f vec4_result = mul(sseA_4f(vec4_1), 10.f)                    = [10.00000][20.00000][30.00000]
sseA_4f vec4_result = forward(sseA_4f(vec4_1), 10.f)                = [3.67261][7.34522][11.01784]
dot(sseA_4f(vec4_1), sseA_4f(vec4_2))                               = 32.00000
normalizedDot(sseA_4f(vec4_1), sseA_4f(vec4_2))                     = 0.97463
sseA_4f vec4_result = cross(sseA_4f(vec4_1), sseA_4f(vec4_2))       = [-3.00000][6.00000][-3.00000]
norm(normA_4f(vec4_1))                                                 = 3.74166
normSq(normA_4f(vec4_1))                                               = 14.00000
normA_4f vec4_result = merge(normA_4f(vec4_1), normA_4f(vec4_2))       = [5.00000][7.00000][9.00000]
normA_4f vec4_result = difference(normA_4f(vec4_1), normA_4f(vec4_2))  = [-3.00000][-3.00000][-3.00000]
length(normA_4f(vec4_1), normA_4f(vec4_2))                             = 5.19615
lengthSq(normA_4f(vec4_1), normA_4f(vec4_2))                           = 27.00000
normA_4f vec4_result = normalize(normA_4f(vec4_1))                     = [0.26726][0.53452][0.80178]
normA_4f vec4_result = mul(normA_4f(vec4_1), 10.f)                     = [10.00000][20.00000][30.00000]
normA_4f vec4_result = forward(normA_4f(vec4_1), 10.f)                 = [3.67261][7.34522][11.01784]
dot(normA_4f(vec4_1), normA_4f(vec4_2))                                = 32.00000
normalizedDot(normA_4f(vec4_1), normA_4f(vec4_2))                      = 0.97463
normA_4f vec4_result = cross(normA_4f(vec4_1), normA_4f(vec4_2))       = [-3.00000][6.00000][-3.00000]
norm(dummyA_4f(vec4_1))                                        = 3.74166
normSq(dummyA_4f(vec4_1))                                      = 14.00000
merge(vec4_result, dummyA_4f(vec4_1), dummyA_4f(vec4_2))       = [5.00000][7.00000][9.00000]
difference(vec4_result, dummyA_4f(vec4_1), dummyA_4f(vec4_2))  = [-3.00000][-3.00000][-3.00000]
length(dummyA_4f(vec4_1), dummyA_4f(vec4_2))                   = 5.19615
lengthSq(dummyA_4f(vec4_1), dummyA_4f(vec4_2))                 = 27.00000
normalize(vec4_result, dummyA_4f(vec4_1))                      = [0.26726][0.53452][0.80178]
mul(vec4_result, dummyA_4f(vec4_1), 10.f)                      = [10.00000][20.00000][30.00000]
forward(vec4_result, dummyA_4f(vec4_1), 10.f)                  = [3.67261][7.34522][11.01784]
dot(dummyA_4f(vec4_1), dummyA_4f(vec4_2))                      = 32.00000
normalizedDot(dummyA_4f(vec4_1), dummyA_4f(vec4_2))            = 0.97463
cross(vec4_result, dummyA_4f(vec4_1), dummyA_4f(vec4_2))       = [-3.00000][6.00000][-3.00000]

- 2D vector(double) -
vec2d_1=[1.00000][2.00000]
vec2d_2=[3.00000][4.00000]
norm(vec2d_1)                               = 2.23607
normSq(vec2d_1)                             = 5.00000
merge(vec2d_result, vec2d_1, vec2d_2)       = [4.00000][6.00000]
difference(vec2d_result, vec2d_1, vec2d_2)  = [-2.00000][-2.00000]
length(vec2d_1, vec2d_2)                    = 2.82843
lengthSq(vec2d_1, vec2d_2)                  = 8.00000
normalize(vec2d_result, vec2d_1)            = [0.44721][0.89443]
mul(vec2d_result, vec2d_1, 10.)             = [10.00000][20.00000]
forward(vec2d_result, vec2d_1, 10.)         = [5.47214][10.94427]
dot(vec2d_1, vec2d_2)                       = 11.00000
normalizedDot(vec2d_1, vec2d_2)             = 0.98387

- 3D vector (double) -
vec3dd_1=[1.00000][2.00000][3.00000]
vec3dd_2=[4.00000][5.00000][6.00000]
norm(vec3d_1)                               = 3.74166
normSq(vec3d_1)                             = 14.00000
merge(vec3d_result, vec3d_1, vec3d_2)       = [5.00000][7.00000][9.00000]
difference(vec3d_result, vec3d_1, vec3d_2)  = [-3.00000][-3.00000][-3.00000]
length(vec3d_1, vec3d_2)                    = 5.19615
lengthSq(vec3d_1, vec3d_2)                  = 27.00000
normalize(vec3d_result, vec3d_1)            = [0.26726][0.53452][0.80178]
mul(vec3d_result, vec3d_1, 10.)             = [10.00000][20.00000][30.00000]
forward(vec3d_result, vec3d_1, 10.)         = [3.67261][7.34522][11.01784]
dot(vec3d_1, vec3d_2)                       = 32.00000
normalizedDot(vec3d_1, vec3d_2)             = 0.97463
cross(vec3d_result, vec3d_1, vec3d_2)       = [-3.00000][6.00000][-3.00000]

--------------------------------------------------------------------------------
[ Test for matrix operation ]
add:   x3 = { {1.20, 2.20, 3.30, 4.40}, {5.50, 6.60, 7.70, 8.80}, {9.90, 10.10, 11.11, 12.12}, {13.13, 14.14, 15.15, 16.16} }
addLU: x3 = { {1.20, 2.20, 3.30, 4.40}, {5.50, 6.60, 7.70, 8.80}, {9.90, 10.10, 11.11, 12.12}, {13.13, 14.14, 15.15, 16.16} }
sub:   x3 = { {0.80, 1.80, 2.70, 3.60}, {4.50, 5.40, 6.30, 7.20}, {8.10, 9.90, 10.89, 11.88}, {12.87, 13.86, 14.85, 15.84} }
subLU: x3 = { {0.80, 1.80, 2.70, 3.60}, {4.50, 5.40, 6.30, 7.20}, {8.10, 9.90, 10.89, 11.88}, {12.87, 13.86, 14.85, 15.84} }
mul:   x3 = { {10.00, 20.00, 30.00, 40.00}, {50.00, 60.00, 70.00, 80.00}, {90.00, 100.00, 110.00, 120.00}, {130.00, 140.00, 150.00, 160.00} }
mulLU: x3 = { {10.00, 20.00, 30.00, 40.00}, {50.00, 60.00, 70.00, 80.00}, {90.00, 100.00, 110.00, 120.00}, {130.00, 140.00, 150.00, 160.00} }
mul:   x3 = { {4.42, 2.26, 2.63, 3.00}, {11.34, 6.42, 7.67, 8.92}, {18.26, 10.58, 12.71, 14.84}, {25.18, 14.74, 17.75, 20.76} }
mulLU: x3 = { {4.42, 2.26, 2.63, 3.00}, {11.34, 6.42, 7.67, 8.92}, {18.26, 10.58, 12.71, 14.84}, {25.18, 14.74, 17.75, 20.76} }
add:   x3 = { {1.10, 2.20, 3.30}, {4.40, 5.50, 6.60}, {7.70, 8.80, 9.90} }
addLU: x3 = { {1.10, 2.20, 3.30}, {4.40, 5.50, 6.60}, {7.70, 8.80, 9.90} }
sub:   x3 = { {0.90, 1.80, 2.70}, {3.60, 4.50, 5.40}, {6.30, 7.20, 8.10} }
subLU: x3 = { {0.90, 1.80, 2.70}, {3.60, 4.50, 5.40}, {6.30, 7.20, 8.10} }
mul:   x3 = { {10.00, 20.00, 30.00}, {40.00, 50.00, 60.00}, {70.00, 80.00, 90.00} }
mulLU: x3 = { {10.00, 20.00, 30.00}, {40.00, 50.00, 60.00}, {70.00, 80.00, 90.00} }
mul:   x3 = { {3.00, 3.60, 4.20}, {6.60, 8.10, 9.60}, {10.20, 12.60, 15.00} }
mulLU: x3 = { {3.00, 3.60, 4.20}, {6.60, 8.10, 9.60}, {10.20, 12.60, 15.00} }

--------------------------------------------------------------------------------
[ Test for performance of operation : direct:float ] (* 10000000 times repeat)
total = 7200091.000000000 : time=0.320015200 sec
--------------------------------------------------------------------------------
[ Test for performance of operation : dummy:float ] (* 10000000 times repeat)
total = 7200091.000000000 : time=0.286042500 sec
--------------------------------------------------------------------------------
[ Test for performance of operation : normal:float ] (* 10000000 times repeat)
total = 7200091.000000000 : time=0.278991500 sec
--------------------------------------------------------------------------------
[ Test for performance of operation : sse:float ] (* 10000000 times repeat)
total = 7200091.000000000 : time=0.275016700 sec
--------------------------------------------------------------------------------
[ Test for performance of operation : fast:float ] (* 10000000 times repeat)
total = 7200091.000000000 : time=0.292018300 sec
--------------------------------------------------------------------------------
[ Test for performance of operation : semifast:float ] (* 10000000 times repeat)
total = 7200091.000000000 : time=0.306017100 sec
--------------------------------------------------------------------------------
[ Test for performance of operation : fastest:float ] (* 10000000 times repeat)
total = 7200136.000000000 : time=0.289016200 sec
--------------------------------------------------------------------------------
[ Test for performance of operation : direct:dobule ] (* 10000000 times repeat)
total = 7200563.765478109 : time=0.264016400 sec
--------------------------------------------------------------------------------
[ Test for performance of operation : dummy:dobule ] (* 10000000 times repeat)
total = 7200563.765478109 : time=0.263033300 sec
--------------------------------------------------------------------------------
[ Test for performance of operation : normal:double ] (* 10000000 times repeat)
total = 7200563.765478109 : time=0.276998000 sec
--------------------------------------------------------------------------------
[ Test for performance of operation : sse:double ] (* 10000000 times repeat)
total = 7200563.765478109 : time=0.267016100 sec
--------------------------------------------------------------------------------
[ Test for performance of operation : fast:double ] (* 10000000 times repeat)
total = 7200563.765478109 : time=0.265017300 sec
--------------------------------------------------------------------------------
[ Test for performance of operation : semifast:double ] (* 10000000 times repeat)
total = 7200563.765478109 : time=0.280019600 sec
--------------------------------------------------------------------------------
[ Test for performance of operation : fastest:double ] (* 10000000 times repeat)
total = 7200563.765478109 : time=0.264012600 sec
--------------------------------------------------------------------------------
[ Test for performance of sqr : direct:float ] (* 1000000 times repeat)
total = 862325.812500000 : time=0.063003500 sec
--------------------------------------------------------------------------------
[ Test for performance of sqr : dummy:float ] (* 1000000 times repeat)
total = 862325.812500000 : time=0.063001700 sec
--------------------------------------------------------------------------------
[ Test for performance of sqr : normal:float ] (* 1000000 times repeat)
total = 862325.812500000 : time=0.063024300 sec
--------------------------------------------------------------------------------
[ Test for performance of sqr : sse:float ] (* 1000000 times repeat)
total = 862325.812500000 : time=0.006000600 sec
--------------------------------------------------------------------------------
[ Test for performance of sqr : fast:float ] (* 1000000 times repeat)
total = 862325.812500000 : time=0.008000600 sec
--------------------------------------------------------------------------------
[ Test for performance of sqr : semifast:float ] (* 1000000 times repeat)
total = 862325.812500000 : time=0.008996600 sec
--------------------------------------------------------------------------------
[ Test for performance of sqr : fastest:float ] (* 1000000 times repeat)
total = 862323.375000000 : time=0.006004100 sec
--------------------------------------------------------------------------------
[ Test for performance of sqr : direct:dobule ] (* 1000000 times repeat)
total = 861960.898391904 : time=0.059984400 sec
--------------------------------------------------------------------------------
[ Test for performance of sqr : dummy:dobule ] (* 1000000 times repeat)
total = 861960.898391904 : time=0.062004400 sec
--------------------------------------------------------------------------------
[ Test for performance of sqr : normal:double ] (* 1000000 times repeat)
total = 861960.898391904 : time=0.060021300 sec
--------------------------------------------------------------------------------
[ Test for performance of sqr : sse:double ] (* 1000000 times repeat)
total = 861960.898391904 : time=0.004999200 sec
--------------------------------------------------------------------------------
[ Test for performance of sqr : fast:double ] (* 1000000 times repeat)
total = 861960.898391904 : time=0.006001500 sec
--------------------------------------------------------------------------------
[ Test for performance of sqr : semifast:double ] (* 1000000 times repeat)
total = 861960.898391904 : time=0.005999700 sec
--------------------------------------------------------------------------------
[ Test for performance of sqr : fastest:double ] (* 1000000 times repeat)
total = 861960.898391904 : time=0.005001200 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : direct:float[2] ] (* 100000 times repeat)
total = 1276338.625000000 : time=0.035982300 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : dummy:float[2] ] (* 100000 times repeat)
total = 1276338.625000000 : time=0.035007200 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : normal:float[2] ] (* 100000 times repeat)
total = 1276338.625000000 : time=0.036015900 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : sse:float[2] ] (* 100000 times repeat)
total = 1276338.625000000 : time=0.035983200 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : fast:float[2] ] (* 100000 times repeat)
total = 1276338.625000000 : time=0.035001900 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : semifast:float[2] ] (* 100000 times repeat)
total = 1276338.625000000 : time=0.035003400 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : fastest:float[2] ] (* 100000 times repeat)
total = 1276338.625000000 : time=0.036001600 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : direct:float[3] ] (* 100000 times repeat)
total = 1760969.000000000 : time=0.037002200 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : dummy:float[3] ] (* 100000 times repeat)
total = 1760969.000000000 : time=0.038002600 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : normal:float[3] ] (* 100000 times repeat)
total = 1760969.000000000 : time=0.039001300 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : sse:float[3] ] (* 100000 times repeat)
total = 1760969.000000000 : time=0.015000900 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : fast:float[3] ] (* 100000 times repeat)
total = 1760969.000000000 : time=0.014018500 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : semifast:float[3] ] (* 100000 times repeat)
total = 1760969.000000000 : time=0.014003300 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : fastest:float[3] ] (* 100000 times repeat)
total = 1760969.000000000 : time=0.014981900 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : direct:float[4] ] (* 100000 times repeat)
total = 1760969.000000000 : time=0.037002000 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : dummy:float[4] ] (* 100000 times repeat)
total = 1760969.000000000 : time=0.039002200 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : normal:float[4] ] (* 100000 times repeat)
total = 1760969.000000000 : time=0.039002200 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : sse:float[4] ] (* 100000 times repeat)
total = 1760969.000000000 : time=0.016001500 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : fast:float[4] ] (* 100000 times repeat)
total = 1760969.000000000 : time=0.016001300 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : semifast:float[4] ] (* 100000 times repeat)
total = 1760969.000000000 : time=0.016000600 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : fastest:float[4] ] (* 100000 times repeat)
total = 1760969.000000000 : time=0.015001000 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : direct:double[2] ] (* 100000 times repeat)
total = 1276328.608382450 : time=0.038002500 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : dummy:double[2] ] (* 100000 times repeat)
total = 1276328.608382450 : time=0.037000100 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : normal:double[2] ] (* 100000 times repeat)
total = 1276328.608382450 : time=0.037004000 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : sse:double[2] ] (* 100000 times repeat)
total = 1276328.608382450 : time=0.037002200 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : fast:double[2] ] (* 100000 times repeat)
total = 1276328.608382450 : time=0.037002200 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : semifast:double[2] ] (* 100000 times repeat)
total = 1276328.608382450 : time=0.037001900 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : fastest:double[2] ] (* 100000 times repeat)
total = 1276328.608382450 : time=0.037002500 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : direct:double[3] ] (* 100000 times repeat)
total = 1760971.680145730 : time=0.041002600 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : dummy:double[3] ] (* 100000 times repeat)
total = 1760971.680145730 : time=0.040022400 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : normal:double[3] ] (* 100000 times repeat)
total = 1760971.680145730 : time=0.040001000 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : sse:double[3] ] (* 100000 times repeat)
total = 1760971.680145730 : time=0.039982900 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : fast:double[3] ] (* 100000 times repeat)
total = 1760971.680145730 : time=0.040002000 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : semifast:double[3] ] (* 100000 times repeat)
total = 1760971.680145730 : time=0.040002200 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : fastest:double[3] ] (* 100000 times repeat)
total = 1760971.680145730 : time=0.041003100 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : direct:double[4] ] (* 100000 times repeat)
total = 1760971.680145730 : time=0.011000100 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : dummy:double[4] ] (* 100000 times repeat)
total = 1760971.680145730 : time=0.012001500 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : normal:double[4] ] (* 100000 times repeat)
total = 1760971.680145730 : time=0.014000600 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : sse:double[4] ] (* 100000 times repeat)
total = 1760971.680145730 : time=0.013002400 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : fast:double[4] ] (* 100000 times repeat)
total = 1760971.680145730 : time=0.014018800 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : semifast:double[4] ] (* 100000 times repeat)
total = 1760971.680145730 : time=0.013981900 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : fastest:double[4] ] (* 100000 times repeat)
total = 1760971.680145730 : time=0.013000700 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : diredt:float[2][2] ] (* 100000 times repeat)
total = 1274982.500000000 : time=0.007000600 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : diredt(RU):float[2][2](RU) ] (* 100000 times repeat)
total = 1274982.500000000 : time=0.006000300 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : dummy:float[2][2] ] (* 100000 times repeat)
total = 1274982.500000000 : time=0.007000300 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : normal:float[2][2] ] (* 100000 times repeat)
total = 1274982.500000000 : time=0.007000300 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : sse:float[2][2] ] (* 100000 times repeat)
total = 1274982.500000000 : time=0.006000400 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : fast:float[2][2] ] (* 100000 times repeat)
total = 1274982.500000000 : time=0.007000600 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : fastest:float[2][2] ] (* 100000 times repeat)
total = 1274982.500000000 : time=0.006000300 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : semifast:float[2][2] ] (* 100000 times repeat)
total = 1274982.500000000 : time=0.007000300 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : diredt:float[3][3] ] (* 100000 times repeat)
total = 3376328.750000000 : time=0.013001800 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : diredt(RU):float[3][3](RU) ] (* 100000 times repeat)
total = 3376328.750000000 : time=0.011999800 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : dummy:float[3][3] ] (* 100000 times repeat)
total = 3376328.750000000 : time=0.013000600 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : normal:float[3][3] ] (* 100000 times repeat)
total = 3376328.750000000 : time=0.017001600 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : sse:float[3][3] ] (* 100000 times repeat)
total = 3376328.750000000 : time=0.018000600 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : fast:float[3][3] ] (* 100000 times repeat)
total = 3376328.750000000 : time=0.018001300 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : fastest:float[3][3] ] (* 100000 times repeat)
total = 3376328.750000000 : time=0.018000900 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : semifast:float[3][3] ] (* 100000 times repeat)
total = 3376328.750000000 : time=0.018001300 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : diredt:float[4][4] ] (* 100000 times repeat)
total = 6901432.500000000 : time=0.033001900 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : diredt(RU):float[4][4](RU) ] (* 100000 times repeat)
total = 6901433.000000000 : time=0.032000400 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : dummy:float[4][4] ] (* 100000 times repeat)
total = 6901432.500000000 : time=0.034002500 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : normal:float[4][4] ] (* 100000 times repeat)
total = 6901432.500000000 : time=0.034003100 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : sse:float[4][4] ] (* 100000 times repeat)
total = 6001979.500000000 : time=0.028001600 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : fast:float[4][4] ] (* 100000 times repeat)
total = 6001979.500000000 : time=0.029000400 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : fastest:float[4][4] ] (* 100000 times repeat)
total = 6001979.500000000 : time=0.029001600 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : semifast:float[4][4] ] (* 100000 times repeat)
total = 6001979.500000000 : time=0.028003000 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : diredt:double[2][2] ] (* 100000 times repeat)
total = 1274985.451236097 : time=0.012001800 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : diredt(RU):double[2][2](RU) ] (* 100000 times repeat)
total = 1274985.451236097 : time=0.005000400 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : dummy:double[2][2] ] (* 100000 times repeat)
total = 1274985.451236097 : time=0.011000300 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : normal:double[2][2] ] (* 100000 times repeat)
total = 1274985.451236097 : time=0.009000600 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : sse:double[2][2] ] (* 100000 times repeat)
total = 1274985.451236097 : time=0.010017900 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : fast:double[2][2] ] (* 100000 times repeat)
total = 1274985.451236097 : time=0.009002700 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : fastest:double[2][2] ] (* 100000 times repeat)
total = 1274985.451236097 : time=0.008998900 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : semifast:double[2][2] ] (* 100000 times repeat)
total = 1274985.451236097 : time=0.009999700 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : diredt:double[3][3] ] (* 100000 times repeat)
total = 3376320.291303343 : time=0.013982500 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : diredt(RU):double[3][3](RU) ] (* 100000 times repeat)
total = 3376320.291303343 : time=0.014001500 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : dummy:double[3][3] ] (* 100000 times repeat)
total = 3376320.291303343 : time=0.015000400 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : normal:double[3][3] ] (* 100000 times repeat)
total = 3376320.291303343 : time=0.020021700 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : sse:double[3][3] ] (* 100000 times repeat)
total = 3376320.291303343 : time=0.018980800 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : fast:double[3][3] ] (* 100000 times repeat)
total = 3376320.291303343 : time=0.020002700 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : fastest:double[3][3] ] (* 100000 times repeat)
total = 3376320.291303343 : time=0.019000400 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : semifast:double[3][3] ] (* 100000 times repeat)
total = 3376320.291303343 : time=0.019000100 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : diredt:double[4][4] ] (* 100000 times repeat)
total = 6901625.928097707 : time=0.041041700 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : diredt(RU):double[4][4](RU) ] (* 100000 times repeat)
total = 6901625.928097707 : time=0.030963600 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : dummy:double[4][4] ] (* 100000 times repeat)
total = 6901625.928097707 : time=0.034001600 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : normal:double[4][4] ] (* 100000 times repeat)
total = 6901625.928097707 : time=0.035001600 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : sse:double[4][4] ] (* 100000 times repeat)
total = 6901625.928097707 : time=0.035002200 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : fast:double[4][4] ] (* 100000 times repeat)
total = 6901625.928097707 : time=0.036001900 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : fastest:double[4][4] ] (* 100000 times repeat)
total = 6901625.928097707 : time=0.035002500 sec
--------------------------------------------------------------------------------
[ Test for performance of matrix : semifast:double[4][4] ] (* 100000 times repeat)
total = 6901625.928097707 : time=0.035002200 sec
