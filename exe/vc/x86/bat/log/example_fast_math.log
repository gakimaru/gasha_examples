--------------------------------------------------------------------------------
[ Test for fast operation (basic) ]
[direct  ] 0.77441 + 0.796422 - 0.85759 * 0.92213 / 0.80138 = 0.58401
[dummy   ] 0.77441 + 0.796422 - 0.85759 * 0.92213 / 0.80138 = 0.58401
[normal  ] 0.77441 + 0.796422 - 0.85759 * 0.92213 / 0.80138 = 0.58401
[sse     ] 0.77441 + 0.796422 - 0.85759 * 0.92213 / 0.80138 = 0.58401
[fast    ] 0.77441 + 0.796422 - 0.85759 * 0.92213 / 0.80138 = 0.58401
[semifast] 0.77441 + 0.796422 - 0.85759 * 0.92213 / 0.80138 = 0.58401
[fastest ] 0.77441 + 0.796422 - 0.85759 * 0.92213 / 0.80138 = 0.58405
--------------------------------------------------------------------------------
[ Test for fast operation ]

10.f + 1.f                  = 11.000 (11.000000000)
dummyArith_f(10.f) + 1.f    = 11.000 (11.000000000)
normalArith_f(10.f) + 1.f   = 11.000 (11.000000000)
sseArith_f(10.f) + 1.f      = 11.000 (11.000000000)
fastArith_f(10.f) + 1.f     = 11.000 (11.000000000)
semifastArith_f(10.f) + 1.f = 11.000 (11.000000000)
fastestArith_f(10.f) + 1.f  = 11.000 (11.000000000)
dummyArith_d(lvalue_d) + rvalue_d    = 11.000 (11.000000000)
normalArith_d(lvalue_d) + rvalue_d   = 11.000 (11.000000000)
sseArith_d(lvalue_d) + rvalue_d      = 11.000 (11.000000000)
fastArith_d(lvalue_d) + rvalue_d     = 11.000 (11.000000000)
semifastArith_d(lvalue_d) + rvalue_d = 11.000 (11.000000000)
fastestArith_d(lvalue_d) + rvalue_d  = 11.000 (11.000000000)

10.f + 2.f                  = 12.000 (12.000000000)
dummyArith_f(10.f) + 2.f    = 12.000 (12.000000000)
normalArith_f(10.f) + 2.f   = 12.000 (12.000000000)
sseArith_f(10.f) + 2.f      = 12.000 (12.000000000)
fastArith_f(10.f) + 2.f     = 12.000 (12.000000000)
semifastArith_f(10.f) + 2.f = 12.000 (12.000000000)
fastestArith_f(10.f) + 2.f  = 12.000 (12.000000000)
dummyArith_d(lvalue_d) + rvalue_d    = 12.000 (12.000000000)
normalArith_d(lvalue_d) + rvalue_d   = 12.000 (12.000000000)
sseArith_d(lvalue_d) + rvalue_d      = 12.000 (12.000000000)
fastArith_d(lvalue_d) + rvalue_d     = 12.000 (12.000000000)
semifastArith_d(lvalue_d) + rvalue_d = 12.000 (12.000000000)
fastestArith_d(lvalue_d) + rvalue_d  = 12.000 (12.000000000)

10.f + 3.f                  = 13.000 (13.000000000)
dummyArith_f(10.f) + 3.f    = 13.000 (13.000000000)
normalArith_f(10.f) + 3.f   = 13.000 (13.000000000)
sseArith_f(10.f) + 3.f      = 13.000 (13.000000000)
fastArith_f(10.f) + 3.f     = 13.000 (13.000000000)
semifastArith_f(10.f) + 3.f = 13.000 (13.000000000)
fastestArith_f(10.f) + 3.f  = 13.000 (13.000000000)
dummyArith_d(lvalue_d) + rvalue_d    = 13.000 (13.000000000)
normalArith_d(lvalue_d) + rvalue_d   = 13.000 (13.000000000)
sseArith_d(lvalue_d) + rvalue_d      = 13.000 (13.000000000)
fastArith_d(lvalue_d) + rvalue_d     = 13.000 (13.000000000)
semifastArith_d(lvalue_d) + rvalue_d = 13.000 (13.000000000)
fastestArith_d(lvalue_d) + rvalue_d  = 13.000 (13.000000000)

10.f + 4.f                  = 14.000 (14.000000000)
dummyArith_f(10.f) + 4.f    = 14.000 (14.000000000)
normalArith_f(10.f) + 4.f   = 14.000 (14.000000000)
sseArith_f(10.f) + 4.f      = 14.000 (14.000000000)
fastArith_f(10.f) + 4.f     = 14.000 (14.000000000)
semifastArith_f(10.f) + 4.f = 14.000 (14.000000000)
fastestArith_f(10.f) + 4.f  = 14.000 (14.000000000)
dummyArith_d(lvalue_d) + rvalue_d    = 14.000 (14.000000000)
normalArith_d(lvalue_d) + rvalue_d   = 14.000 (14.000000000)
sseArith_d(lvalue_d) + rvalue_d      = 14.000 (14.000000000)
fastArith_d(lvalue_d) + rvalue_d     = 14.000 (14.000000000)
semifastArith_d(lvalue_d) + rvalue_d = 14.000 (14.000000000)
fastestArith_d(lvalue_d) + rvalue_d  = 14.000 (14.000000000)

10.f + 5.f                  = 15.000 (15.000000000)
dummyArith_f(10.f) + 5.f    = 15.000 (15.000000000)
normalArith_f(10.f) + 5.f   = 15.000 (15.000000000)
sseArith_f(10.f) + 5.f      = 15.000 (15.000000000)
fastArith_f(10.f) + 5.f     = 15.000 (15.000000000)
semifastArith_f(10.f) + 5.f = 15.000 (15.000000000)
fastestArith_f(10.f) + 5.f  = 15.000 (15.000000000)
dummyArith_d(lvalue_d) + rvalue_d    = 15.000 (15.000000000)
normalArith_d(lvalue_d) + rvalue_d   = 15.000 (15.000000000)
sseArith_d(lvalue_d) + rvalue_d      = 15.000 (15.000000000)
fastArith_d(lvalue_d) + rvalue_d     = 15.000 (15.000000000)
semifastArith_d(lvalue_d) + rvalue_d = 15.000 (15.000000000)
fastestArith_d(lvalue_d) + rvalue_d  = 15.000 (15.000000000)

10.f + 10.f                  = 20.000 (20.000000000)
dummyArith_f(10.f) + 10.f    = 20.000 (20.000000000)
normalArith_f(10.f) + 10.f   = 20.000 (20.000000000)
sseArith_f(10.f) + 10.f      = 20.000 (20.000000000)
fastArith_f(10.f) + 10.f     = 20.000 (20.000000000)
semifastArith_f(10.f) + 10.f = 20.000 (20.000000000)
fastestArith_f(10.f) + 10.f  = 20.000 (20.000000000)
dummyArith_d(lvalue_d) + rvalue_d    = 20.000 (20.000000000)
normalArith_d(lvalue_d) + rvalue_d   = 20.000 (20.000000000)
sseArith_d(lvalue_d) + rvalue_d      = 20.000 (20.000000000)
fastArith_d(lvalue_d) + rvalue_d     = 20.000 (20.000000000)
semifastArith_d(lvalue_d) + rvalue_d = 20.000 (20.000000000)
fastestArith_d(lvalue_d) + rvalue_d  = 20.000 (20.000000000)

10.f + 100.f                  = 110.000 (110.000000000)
dummyArith_f(10.f) + 100.f    = 110.000 (110.000000000)
normalArith_f(10.f) + 100.f   = 110.000 (110.000000000)
sseArith_f(10.f) + 100.f      = 110.000 (110.000000000)
fastArith_f(10.f) + 100.f     = 110.000 (110.000000000)
semifastArith_f(10.f) + 100.f = 110.000 (110.000000000)
fastestArith_f(10.f) + 100.f  = 110.000 (110.000000000)
dummyArith_d(lvalue_d) + rvalue_d    = 110.000 (110.000000000)
normalArith_d(lvalue_d) + rvalue_d   = 110.000 (110.000000000)
sseArith_d(lvalue_d) + rvalue_d      = 110.000 (110.000000000)
fastArith_d(lvalue_d) + rvalue_d     = 110.000 (110.000000000)
semifastArith_d(lvalue_d) + rvalue_d = 110.000 (110.000000000)
fastestArith_d(lvalue_d) + rvalue_d  = 110.000 (110.000000000)

10.f + 1000.f                  = 1010.000 (1010.000000000)
dummyArith_f(10.f) + 1000.f    = 1010.000 (1010.000000000)
normalArith_f(10.f) + 1000.f   = 1010.000 (1010.000000000)
sseArith_f(10.f) + 1000.f      = 1010.000 (1010.000000000)
fastArith_f(10.f) + 1000.f     = 1010.000 (1010.000000000)
semifastArith_f(10.f) + 1000.f = 1010.000 (1010.000000000)
fastestArith_f(10.f) + 1000.f  = 1010.000 (1010.000000000)
dummyArith_d(lvalue_d) + rvalue_d    = 1010.000 (1010.000000000)
normalArith_d(lvalue_d) + rvalue_d   = 1010.000 (1010.000000000)
sseArith_d(lvalue_d) + rvalue_d      = 1010.000 (1010.000000000)
fastArith_d(lvalue_d) + rvalue_d     = 1010.000 (1010.000000000)
semifastArith_d(lvalue_d) + rvalue_d = 1010.000 (1010.000000000)
fastestArith_d(lvalue_d) + rvalue_d  = 1010.000 (1010.000000000)

10.f + 10000.f                  = 10010.000 (10010.000000000)
dummyArith_f(10.f) + 10000.f    = 10010.000 (10010.000000000)
normalArith_f(10.f) + 10000.f   = 10010.000 (10010.000000000)
sseArith_f(10.f) + 10000.f      = 10010.000 (10010.000000000)
fastArith_f(10.f) + 10000.f     = 10010.000 (10010.000000000)
semifastArith_f(10.f) + 10000.f = 10010.000 (10010.000000000)
fastestArith_f(10.f) + 10000.f  = 10010.000 (10010.000000000)
dummyArith_d(lvalue_d) + rvalue_d    = 10010.000 (10010.000000000)
normalArith_d(lvalue_d) + rvalue_d   = 10010.000 (10010.000000000)
sseArith_d(lvalue_d) + rvalue_d      = 10010.000 (10010.000000000)
fastArith_d(lvalue_d) + rvalue_d     = 10010.000 (10010.000000000)
semifastArith_d(lvalue_d) + rvalue_d = 10010.000 (10010.000000000)
fastestArith_d(lvalue_d) + rvalue_d  = 10010.000 (10010.000000000)

10.f + 100000.f                  = 100010.000 (100010.000000000)
dummyArith_f(10.f) + 100000.f    = 100010.000 (100010.000000000)
normalArith_f(10.f) + 100000.f   = 100010.000 (100010.000000000)
sseArith_f(10.f) + 100000.f      = 100010.000 (100010.000000000)
fastArith_f(10.f) + 100000.f     = 100010.000 (100010.000000000)
semifastArith_f(10.f) + 100000.f = 100010.000 (100010.000000000)
fastestArith_f(10.f) + 100000.f  = 100010.000 (100010.000000000)
dummyArith_d(lvalue_d) + rvalue_d    = 100010.000 (100010.000000000)
normalArith_d(lvalue_d) + rvalue_d   = 100010.000 (100010.000000000)
sseArith_d(lvalue_d) + rvalue_d      = 100010.000 (100010.000000000)
fastArith_d(lvalue_d) + rvalue_d     = 100010.000 (100010.000000000)
semifastArith_d(lvalue_d) + rvalue_d = 100010.000 (100010.000000000)
fastestArith_d(lvalue_d) + rvalue_d  = 100010.000 (100010.000000000)

10.f + 1000000.f                  = 1000010.000 (1000010.000000000)
dummyArith_f(10.f) + 1000000.f    = 1000010.000 (1000010.000000000)
normalArith_f(10.f) + 1000000.f   = 1000010.000 (1000010.000000000)
sseArith_f(10.f) + 1000000.f      = 1000010.000 (1000010.000000000)
fastArith_f(10.f) + 1000000.f     = 1000010.000 (1000010.000000000)
semifastArith_f(10.f) + 1000000.f = 1000010.000 (1000010.000000000)
fastestArith_f(10.f) + 1000000.f  = 1000010.000 (1000010.000000000)
dummyArith_d(lvalue_d) + rvalue_d    = 1000010.000 (1000010.000000000)
normalArith_d(lvalue_d) + rvalue_d   = 1000010.000 (1000010.000000000)
sseArith_d(lvalue_d) + rvalue_d      = 1000010.000 (1000010.000000000)
fastArith_d(lvalue_d) + rvalue_d     = 1000010.000 (1000010.000000000)
semifastArith_d(lvalue_d) + rvalue_d = 1000010.000 (1000010.000000000)
fastestArith_d(lvalue_d) + rvalue_d  = 1000010.000 (1000010.000000000)

10.f - 1.f                  = 9.000 (9.000000000)
dummyArith_f(10.f) - 1.f    = 9.000 (9.000000000)
normalArith_f(10.f) - 1.f   = 9.000 (9.000000000)
sseArith_f(10.f) - 1.f      = 9.000 (9.000000000)
fastArith_f(10.f) - 1.f     = 9.000 (9.000000000)
semifastArith_f(10.f) - 1.f = 9.000 (9.000000000)
fastestArith_f(10.f) - 1.f  = 9.000 (9.000000000)
dummyArith_d(lvalue_d) - rvalue_d    = 9.000 (9.000000000)
normalArith_d(lvalue_d) - rvalue_d   = 9.000 (9.000000000)
sseArith_d(lvalue_d) - rvalue_d      = 9.000 (9.000000000)
fastArith_d(lvalue_d) - rvalue_d     = 9.000 (9.000000000)
semifastArith_d(lvalue_d) - rvalue_d = 9.000 (9.000000000)
fastestArith_d(lvalue_d) - rvalue_d  = 9.000 (9.000000000)

10.f - 2.f                  = 8.000 (8.000000000)
dummyArith_f(10.f) - 2.f    = 8.000 (8.000000000)
normalArith_f(10.f) - 2.f   = 8.000 (8.000000000)
sseArith_f(10.f) - 2.f      = 8.000 (8.000000000)
fastArith_f(10.f) - 2.f     = 8.000 (8.000000000)
semifastArith_f(10.f) - 2.f = 8.000 (8.000000000)
fastestArith_f(10.f) - 2.f  = 8.000 (8.000000000)
dummyArith_d(lvalue_d) - rvalue_d    = 8.000 (8.000000000)
normalArith_d(lvalue_d) - rvalue_d   = 8.000 (8.000000000)
sseArith_d(lvalue_d) - rvalue_d      = 8.000 (8.000000000)
fastArith_d(lvalue_d) - rvalue_d     = 8.000 (8.000000000)
semifastArith_d(lvalue_d) - rvalue_d = 8.000 (8.000000000)
fastestArith_d(lvalue_d) - rvalue_d  = 8.000 (8.000000000)

10.f - 3.f                  = 7.000 (7.000000000)
dummyArith_f(10.f) - 3.f    = 7.000 (7.000000000)
normalArith_f(10.f) - 3.f   = 7.000 (7.000000000)
sseArith_f(10.f) - 3.f      = 7.000 (7.000000000)
fastArith_f(10.f) - 3.f     = 7.000 (7.000000000)
semifastArith_f(10.f) - 3.f = 7.000 (7.000000000)
fastestArith_f(10.f) - 3.f  = 7.000 (7.000000000)
dummyArith_d(lvalue_d) - rvalue_d    = 7.000 (7.000000000)
normalArith_d(lvalue_d) - rvalue_d   = 7.000 (7.000000000)
sseArith_d(lvalue_d) - rvalue_d      = 7.000 (7.000000000)
fastArith_d(lvalue_d) - rvalue_d     = 7.000 (7.000000000)
semifastArith_d(lvalue_d) - rvalue_d = 7.000 (7.000000000)
fastestArith_d(lvalue_d) - rvalue_d  = 7.000 (7.000000000)

10.f - 4.f                  = 6.000 (6.000000000)
dummyArith_f(10.f) - 4.f    = 6.000 (6.000000000)
normalArith_f(10.f) - 4.f   = 6.000 (6.000000000)
sseArith_f(10.f) - 4.f      = 6.000 (6.000000000)
fastArith_f(10.f) - 4.f     = 6.000 (6.000000000)
semifastArith_f(10.f) - 4.f = 6.000 (6.000000000)
fastestArith_f(10.f) - 4.f  = 6.000 (6.000000000)
dummyArith_d(lvalue_d) - rvalue_d    = 6.000 (6.000000000)
normalArith_d(lvalue_d) - rvalue_d   = 6.000 (6.000000000)
sseArith_d(lvalue_d) - rvalue_d      = 6.000 (6.000000000)
fastArith_d(lvalue_d) - rvalue_d     = 6.000 (6.000000000)
semifastArith_d(lvalue_d) - rvalue_d = 6.000 (6.000000000)
fastestArith_d(lvalue_d) - rvalue_d  = 6.000 (6.000000000)

10.f - 5.f                  = 5.000 (5.000000000)
dummyArith_f(10.f) - 5.f    = 5.000 (5.000000000)
normalArith_f(10.f) - 5.f   = 5.000 (5.000000000)
sseArith_f(10.f) - 5.f      = 5.000 (5.000000000)
fastArith_f(10.f) - 5.f     = 5.000 (5.000000000)
semifastArith_f(10.f) - 5.f = 5.000 (5.000000000)
fastestArith_f(10.f) - 5.f  = 5.000 (5.000000000)
dummyArith_d(lvalue_d) - rvalue_d    = 5.000 (5.000000000)
normalArith_d(lvalue_d) - rvalue_d   = 5.000 (5.000000000)
sseArith_d(lvalue_d) - rvalue_d      = 5.000 (5.000000000)
fastArith_d(lvalue_d) - rvalue_d     = 5.000 (5.000000000)
semifastArith_d(lvalue_d) - rvalue_d = 5.000 (5.000000000)
fastestArith_d(lvalue_d) - rvalue_d  = 5.000 (5.000000000)

10.f - 10.f                  = 0.000 (0.000000000)
dummyArith_f(10.f) - 10.f    = 0.000 (0.000000000)
normalArith_f(10.f) - 10.f   = 0.000 (0.000000000)
sseArith_f(10.f) - 10.f      = 0.000 (0.000000000)
fastArith_f(10.f) - 10.f     = 0.000 (0.000000000)
semifastArith_f(10.f) - 10.f = 0.000 (0.000000000)
fastestArith_f(10.f) - 10.f  = 0.000 (0.000000000)
dummyArith_d(lvalue_d) - rvalue_d    = 0.000 (0.000000000)
normalArith_d(lvalue_d) - rvalue_d   = 0.000 (0.000000000)
sseArith_d(lvalue_d) - rvalue_d      = 0.000 (0.000000000)
fastArith_d(lvalue_d) - rvalue_d     = 0.000 (0.000000000)
semifastArith_d(lvalue_d) - rvalue_d = 0.000 (0.000000000)
fastestArith_d(lvalue_d) - rvalue_d  = 0.000 (0.000000000)

10.f - 100.f                  = -90.000 (-90.000000000)
dummyArith_f(10.f) - 100.f    = -90.000 (-90.000000000)
normalArith_f(10.f) - 100.f   = -90.000 (-90.000000000)
sseArith_f(10.f) - 100.f      = -90.000 (-90.000000000)
fastArith_f(10.f) - 100.f     = -90.000 (-90.000000000)
semifastArith_f(10.f) - 100.f = -90.000 (-90.000000000)
fastestArith_f(10.f) - 100.f  = -90.000 (-90.000000000)
dummyArith_d(lvalue_d) - rvalue_d    = -90.000 (-90.000000000)
normalArith_d(lvalue_d) - rvalue_d   = -90.000 (-90.000000000)
sseArith_d(lvalue_d) - rvalue_d      = -90.000 (-90.000000000)
fastArith_d(lvalue_d) - rvalue_d     = -90.000 (-90.000000000)
semifastArith_d(lvalue_d) - rvalue_d = -90.000 (-90.000000000)
fastestArith_d(lvalue_d) - rvalue_d  = -90.000 (-90.000000000)

10.f - 1000.f                  = -990.000 (-990.000000000)
dummyArith_f(10.f) - 1000.f    = -990.000 (-990.000000000)
normalArith_f(10.f) - 1000.f   = -990.000 (-990.000000000)
sseArith_f(10.f) - 1000.f      = -990.000 (-990.000000000)
fastArith_f(10.f) - 1000.f     = -990.000 (-990.000000000)
semifastArith_f(10.f) - 1000.f = -990.000 (-990.000000000)
fastestArith_f(10.f) - 1000.f  = -990.000 (-990.000000000)
dummyArith_d(lvalue_d) - rvalue_d    = -990.000 (-990.000000000)
normalArith_d(lvalue_d) - rvalue_d   = -990.000 (-990.000000000)
sseArith_d(lvalue_d) - rvalue_d      = -990.000 (-990.000000000)
fastArith_d(lvalue_d) - rvalue_d     = -990.000 (-990.000000000)
semifastArith_d(lvalue_d) - rvalue_d = -990.000 (-990.000000000)
fastestArith_d(lvalue_d) - rvalue_d  = -990.000 (-990.000000000)

10.f - 10000.f                  = -9990.000 (-9990.000000000)
dummyArith_f(10.f) - 10000.f    = -9990.000 (-9990.000000000)
normalArith_f(10.f) - 10000.f   = -9990.000 (-9990.000000000)
sseArith_f(10.f) - 10000.f      = -9990.000 (-9990.000000000)
fastArith_f(10.f) - 10000.f     = -9990.000 (-9990.000000000)
semifastArith_f(10.f) - 10000.f = -9990.000 (-9990.000000000)
fastestArith_f(10.f) - 10000.f  = -9990.000 (-9990.000000000)
dummyArith_d(lvalue_d) - rvalue_d    = -9990.000 (-9990.000000000)
normalArith_d(lvalue_d) - rvalue_d   = -9990.000 (-9990.000000000)
sseArith_d(lvalue_d) - rvalue_d      = -9990.000 (-9990.000000000)
fastArith_d(lvalue_d) - rvalue_d     = -9990.000 (-9990.000000000)
semifastArith_d(lvalue_d) - rvalue_d = -9990.000 (-9990.000000000)
fastestArith_d(lvalue_d) - rvalue_d  = -9990.000 (-9990.000000000)

10.f - 100000.f                  = -99990.000 (-99990.000000000)
dummyArith_f(10.f) - 100000.f    = -99990.000 (-99990.000000000)
normalArith_f(10.f) - 100000.f   = -99990.000 (-99990.000000000)
sseArith_f(10.f) - 100000.f      = -99990.000 (-99990.000000000)
fastArith_f(10.f) - 100000.f     = -99990.000 (-99990.000000000)
semifastArith_f(10.f) - 100000.f = -99990.000 (-99990.000000000)
fastestArith_f(10.f) - 100000.f  = -99990.000 (-99990.000000000)
dummyArith_d(lvalue_d) - rvalue_d    = -99990.000 (-99990.000000000)
normalArith_d(lvalue_d) - rvalue_d   = -99990.000 (-99990.000000000)
sseArith_d(lvalue_d) - rvalue_d      = -99990.000 (-99990.000000000)
fastArith_d(lvalue_d) - rvalue_d     = -99990.000 (-99990.000000000)
semifastArith_d(lvalue_d) - rvalue_d = -99990.000 (-99990.000000000)
fastestArith_d(lvalue_d) - rvalue_d  = -99990.000 (-99990.000000000)

10.f - 1000000.f                  = -999990.000 (-999990.000000000)
dummyArith_f(10.f) - 1000000.f    = -999990.000 (-999990.000000000)
normalArith_f(10.f) - 1000000.f   = -999990.000 (-999990.000000000)
sseArith_f(10.f) - 1000000.f      = -999990.000 (-999990.000000000)
fastArith_f(10.f) - 1000000.f     = -999990.000 (-999990.000000000)
semifastArith_f(10.f) - 1000000.f = -999990.000 (-999990.000000000)
fastestArith_f(10.f) - 1000000.f  = -999990.000 (-999990.000000000)
dummyArith_d(lvalue_d) - rvalue_d    = -999990.000 (-999990.000000000)
normalArith_d(lvalue_d) - rvalue_d   = -999990.000 (-999990.000000000)
sseArith_d(lvalue_d) - rvalue_d      = -999990.000 (-999990.000000000)
fastArith_d(lvalue_d) - rvalue_d     = -999990.000 (-999990.000000000)
semifastArith_d(lvalue_d) - rvalue_d = -999990.000 (-999990.000000000)
fastestArith_d(lvalue_d) - rvalue_d  = -999990.000 (-999990.000000000)

10.f * 1.f                  = 10.000 (10.000000000)
dummyArith_f(10.f) * 1.f    = 10.000 (10.000000000)
normalArith_f(10.f) * 1.f   = 10.000 (10.000000000)
sseArith_f(10.f) * 1.f      = 10.000 (10.000000000)
fastArith_f(10.f) * 1.f     = 10.000 (10.000000000)
semifastArith_f(10.f) * 1.f = 10.000 (10.000000000)
fastestArith_f(10.f) * 1.f  = 10.000 (10.000000000)
dummyArith_d(lvalue_d) * rvalue_d    = 10.000 (10.000000000)
normalArith_d(lvalue_d) * rvalue_d   = 10.000 (10.000000000)
sseArith_d(lvalue_d) * rvalue_d      = 10.000 (10.000000000)
fastArith_d(lvalue_d) * rvalue_d     = 10.000 (10.000000000)
semifastArith_d(lvalue_d) * rvalue_d = 10.000 (10.000000000)
fastestArith_d(lvalue_d) * rvalue_d  = 10.000 (10.000000000)

10.f * 2.f                  = 20.000 (20.000000000)
dummyArith_f(10.f) * 2.f    = 20.000 (20.000000000)
normalArith_f(10.f) * 2.f   = 20.000 (20.000000000)
sseArith_f(10.f) * 2.f      = 20.000 (20.000000000)
fastArith_f(10.f) * 2.f     = 20.000 (20.000000000)
semifastArith_f(10.f) * 2.f = 20.000 (20.000000000)
fastestArith_f(10.f) * 2.f  = 20.000 (20.000000000)
dummyArith_d(lvalue_d) * rvalue_d    = 20.000 (20.000000000)
normalArith_d(lvalue_d) * rvalue_d   = 20.000 (20.000000000)
sseArith_d(lvalue_d) * rvalue_d      = 20.000 (20.000000000)
fastArith_d(lvalue_d) * rvalue_d     = 20.000 (20.000000000)
semifastArith_d(lvalue_d) * rvalue_d = 20.000 (20.000000000)
fastestArith_d(lvalue_d) * rvalue_d  = 20.000 (20.000000000)

10.f * 3.f                  = 30.000 (30.000000000)
dummyArith_f(10.f) * 3.f    = 30.000 (30.000000000)
normalArith_f(10.f) * 3.f   = 30.000 (30.000000000)
sseArith_f(10.f) * 3.f      = 30.000 (30.000000000)
fastArith_f(10.f) * 3.f     = 30.000 (30.000000000)
semifastArith_f(10.f) * 3.f = 30.000 (30.000000000)
fastestArith_f(10.f) * 3.f  = 30.000 (30.000000000)
dummyArith_d(lvalue_d) * rvalue_d    = 30.000 (30.000000000)
normalArith_d(lvalue_d) * rvalue_d   = 30.000 (30.000000000)
sseArith_d(lvalue_d) * rvalue_d      = 30.000 (30.000000000)
fastArith_d(lvalue_d) * rvalue_d     = 30.000 (30.000000000)
semifastArith_d(lvalue_d) * rvalue_d = 30.000 (30.000000000)
fastestArith_d(lvalue_d) * rvalue_d  = 30.000 (30.000000000)

10.f * 4.f                  = 40.000 (40.000000000)
dummyArith_f(10.f) * 4.f    = 40.000 (40.000000000)
normalArith_f(10.f) * 4.f   = 40.000 (40.000000000)
sseArith_f(10.f) * 4.f      = 40.000 (40.000000000)
fastArith_f(10.f) * 4.f     = 40.000 (40.000000000)
semifastArith_f(10.f) * 4.f = 40.000 (40.000000000)
fastestArith_f(10.f) * 4.f  = 40.000 (40.000000000)
dummyArith_d(lvalue_d) * rvalue_d    = 40.000 (40.000000000)
normalArith_d(lvalue_d) * rvalue_d   = 40.000 (40.000000000)
sseArith_d(lvalue_d) * rvalue_d      = 40.000 (40.000000000)
fastArith_d(lvalue_d) * rvalue_d     = 40.000 (40.000000000)
semifastArith_d(lvalue_d) * rvalue_d = 40.000 (40.000000000)
fastestArith_d(lvalue_d) * rvalue_d  = 40.000 (40.000000000)

10.f * 5.f                  = 50.000 (50.000000000)
dummyArith_f(10.f) * 5.f    = 50.000 (50.000000000)
normalArith_f(10.f) * 5.f   = 50.000 (50.000000000)
sseArith_f(10.f) * 5.f      = 50.000 (50.000000000)
fastArith_f(10.f) * 5.f     = 50.000 (50.000000000)
semifastArith_f(10.f) * 5.f = 50.000 (50.000000000)
fastestArith_f(10.f) * 5.f  = 50.000 (50.000000000)
dummyArith_d(lvalue_d) * rvalue_d    = 50.000 (50.000000000)
normalArith_d(lvalue_d) * rvalue_d   = 50.000 (50.000000000)
sseArith_d(lvalue_d) * rvalue_d      = 50.000 (50.000000000)
fastArith_d(lvalue_d) * rvalue_d     = 50.000 (50.000000000)
semifastArith_d(lvalue_d) * rvalue_d = 50.000 (50.000000000)
fastestArith_d(lvalue_d) * rvalue_d  = 50.000 (50.000000000)

10.f * 10.f                  = 100.000 (100.000000000)
dummyArith_f(10.f) * 10.f    = 100.000 (100.000000000)
normalArith_f(10.f) * 10.f   = 100.000 (100.000000000)
sseArith_f(10.f) * 10.f      = 100.000 (100.000000000)
fastArith_f(10.f) * 10.f     = 100.000 (100.000000000)
semifastArith_f(10.f) * 10.f = 100.000 (100.000000000)
fastestArith_f(10.f) * 10.f  = 100.000 (100.000000000)
dummyArith_d(lvalue_d) * rvalue_d    = 100.000 (100.000000000)
normalArith_d(lvalue_d) * rvalue_d   = 100.000 (100.000000000)
sseArith_d(lvalue_d) * rvalue_d      = 100.000 (100.000000000)
fastArith_d(lvalue_d) * rvalue_d     = 100.000 (100.000000000)
semifastArith_d(lvalue_d) * rvalue_d = 100.000 (100.000000000)
fastestArith_d(lvalue_d) * rvalue_d  = 100.000 (100.000000000)

10.f * 100.f                  = 1000.000 (1000.000000000)
dummyArith_f(10.f) * 100.f    = 1000.000 (1000.000000000)
normalArith_f(10.f) * 100.f   = 1000.000 (1000.000000000)
sseArith_f(10.f) * 100.f      = 1000.000 (1000.000000000)
fastArith_f(10.f) * 100.f     = 1000.000 (1000.000000000)
semifastArith_f(10.f) * 100.f = 1000.000 (1000.000000000)
fastestArith_f(10.f) * 100.f  = 1000.000 (1000.000000000)
dummyArith_d(lvalue_d) * rvalue_d    = 1000.000 (1000.000000000)
normalArith_d(lvalue_d) * rvalue_d   = 1000.000 (1000.000000000)
sseArith_d(lvalue_d) * rvalue_d      = 1000.000 (1000.000000000)
fastArith_d(lvalue_d) * rvalue_d     = 1000.000 (1000.000000000)
semifastArith_d(lvalue_d) * rvalue_d = 1000.000 (1000.000000000)
fastestArith_d(lvalue_d) * rvalue_d  = 1000.000 (1000.000000000)

10.f * 1000.f                  = 10000.000 (10000.000000000)
dummyArith_f(10.f) * 1000.f    = 10000.000 (10000.000000000)
normalArith_f(10.f) * 1000.f   = 10000.000 (10000.000000000)
sseArith_f(10.f) * 1000.f      = 10000.000 (10000.000000000)
fastArith_f(10.f) * 1000.f     = 10000.000 (10000.000000000)
semifastArith_f(10.f) * 1000.f = 10000.000 (10000.000000000)
fastestArith_f(10.f) * 1000.f  = 10000.000 (10000.000000000)
dummyArith_d(lvalue_d) * rvalue_d    = 10000.000 (10000.000000000)
normalArith_d(lvalue_d) * rvalue_d   = 10000.000 (10000.000000000)
sseArith_d(lvalue_d) * rvalue_d      = 10000.000 (10000.000000000)
fastArith_d(lvalue_d) * rvalue_d     = 10000.000 (10000.000000000)
semifastArith_d(lvalue_d) * rvalue_d = 10000.000 (10000.000000000)
fastestArith_d(lvalue_d) * rvalue_d  = 10000.000 (10000.000000000)

10.f * 10000.f                  = 100000.000 (100000.000000000)
dummyArith_f(10.f) * 10000.f    = 100000.000 (100000.000000000)
normalArith_f(10.f) * 10000.f   = 100000.000 (100000.000000000)
sseArith_f(10.f) * 10000.f      = 100000.000 (100000.000000000)
fastArith_f(10.f) * 10000.f     = 100000.000 (100000.000000000)
semifastArith_f(10.f) * 10000.f = 100000.000 (100000.000000000)
fastestArith_f(10.f) * 10000.f  = 100000.000 (100000.000000000)
dummyArith_d(lvalue_d) * rvalue_d    = 100000.000 (100000.000000000)
normalArith_d(lvalue_d) * rvalue_d   = 100000.000 (100000.000000000)
sseArith_d(lvalue_d) * rvalue_d      = 100000.000 (100000.000000000)
fastArith_d(lvalue_d) * rvalue_d     = 100000.000 (100000.000000000)
semifastArith_d(lvalue_d) * rvalue_d = 100000.000 (100000.000000000)
fastestArith_d(lvalue_d) * rvalue_d  = 100000.000 (100000.000000000)

10.f * 100000.f                  = 1000000.000 (1000000.000000000)
dummyArith_f(10.f) * 100000.f    = 1000000.000 (1000000.000000000)
normalArith_f(10.f) * 100000.f   = 1000000.000 (1000000.000000000)
sseArith_f(10.f) * 100000.f      = 1000000.000 (1000000.000000000)
fastArith_f(10.f) * 100000.f     = 1000000.000 (1000000.000000000)
semifastArith_f(10.f) * 100000.f = 1000000.000 (1000000.000000000)
fastestArith_f(10.f) * 100000.f  = 1000000.000 (1000000.000000000)
dummyArith_d(lvalue_d) * rvalue_d    = 1000000.000 (1000000.000000000)
normalArith_d(lvalue_d) * rvalue_d   = 1000000.000 (1000000.000000000)
sseArith_d(lvalue_d) * rvalue_d      = 1000000.000 (1000000.000000000)
fastArith_d(lvalue_d) * rvalue_d     = 1000000.000 (1000000.000000000)
semifastArith_d(lvalue_d) * rvalue_d = 1000000.000 (1000000.000000000)
fastestArith_d(lvalue_d) * rvalue_d  = 1000000.000 (1000000.000000000)

10.f * 1000000.f                  = 10000000.000 (10000000.000000000)
dummyArith_f(10.f) * 1000000.f    = 10000000.000 (10000000.000000000)
normalArith_f(10.f) * 1000000.f   = 10000000.000 (10000000.000000000)
sseArith_f(10.f) * 1000000.f      = 10000000.000 (10000000.000000000)
fastArith_f(10.f) * 1000000.f     = 10000000.000 (10000000.000000000)
semifastArith_f(10.f) * 1000000.f = 10000000.000 (10000000.000000000)
fastestArith_f(10.f) * 1000000.f  = 10000000.000 (10000000.000000000)
dummyArith_d(lvalue_d) * rvalue_d    = 10000000.000 (10000000.000000000)
normalArith_d(lvalue_d) * rvalue_d   = 10000000.000 (10000000.000000000)
sseArith_d(lvalue_d) * rvalue_d      = 10000000.000 (10000000.000000000)
fastArith_d(lvalue_d) * rvalue_d     = 10000000.000 (10000000.000000000)
semifastArith_d(lvalue_d) * rvalue_d = 10000000.000 (10000000.000000000)
fastestArith_d(lvalue_d) * rvalue_d  = 10000000.000 (10000000.000000000)

10.f / 1.f                  = 10.000 (10.000000000)
dummyArith_f(10.f) / 1.f    = 10.000 (10.000000000)
normalArith_f(10.f) / 1.f   = 10.000 (10.000000000)
sseArith_f(10.f) / 1.f      = 10.000 (10.000000000)
fastArith_f(10.f) / 1.f     = 10.000 (9.999999046)
semifastArith_f(10.f) / 1.f = 10.000 (9.999999046)
fastestArith_f(10.f) / 1.f  = 9.998 (9.997558594)
dummyArith_d(lvalue_d) / rvalue_d    = 10.000 (10.000000000)
normalArith_d(lvalue_d) / rvalue_d   = 10.000 (10.000000000)
sseArith_d(lvalue_d) / rvalue_d      = 10.000 (10.000000000)
fastArith_d(lvalue_d) / rvalue_d     = 10.000 (10.000000000)
semifastArith_d(lvalue_d) / rvalue_d = 10.000 (10.000000000)
fastestArith_d(lvalue_d) / rvalue_d  = 10.000 (10.000000000)

10.f / 2.f                  = 5.000 (5.000000000)
dummyArith_f(10.f) / 2.f    = 5.000 (5.000000000)
normalArith_f(10.f) / 2.f   = 5.000 (5.000000000)
sseArith_f(10.f) / 2.f      = 5.000 (5.000000000)
fastArith_f(10.f) / 2.f     = 5.000 (4.999999523)
semifastArith_f(10.f) / 2.f = 5.000 (4.999999523)
fastestArith_f(10.f) / 2.f  = 4.999 (4.998779297)
dummyArith_d(lvalue_d) / rvalue_d    = 5.000 (5.000000000)
normalArith_d(lvalue_d) / rvalue_d   = 5.000 (5.000000000)
sseArith_d(lvalue_d) / rvalue_d      = 5.000 (5.000000000)
fastArith_d(lvalue_d) / rvalue_d     = 5.000 (5.000000000)
semifastArith_d(lvalue_d) / rvalue_d = 5.000 (5.000000000)
fastestArith_d(lvalue_d) / rvalue_d  = 5.000 (5.000000000)

10.f / 3.f                  = 3.333 (3.333333254)
dummyArith_f(10.f) / 3.f    = 3.333 (3.333333254)
normalArith_f(10.f) / 3.f   = 3.333 (3.333333254)
sseArith_f(10.f) / 3.f      = 3.333 (3.333333254)
fastArith_f(10.f) / 3.f     = 3.333 (3.333333015)
semifastArith_f(10.f) / 3.f = 3.333 (3.333333015)
fastestArith_f(10.f) / 3.f  = 3.333 (3.332519531)
dummyArith_d(lvalue_d) / rvalue_d    = 3.333 (3.333333333)
normalArith_d(lvalue_d) / rvalue_d   = 3.333 (3.333333333)
sseArith_d(lvalue_d) / rvalue_d      = 3.333 (3.333333333)
fastArith_d(lvalue_d) / rvalue_d     = 3.333 (3.333333333)
semifastArith_d(lvalue_d) / rvalue_d = 3.333 (3.333333333)
fastestArith_d(lvalue_d) / rvalue_d  = 3.333 (3.333333333)

10.f / 4.f                  = 2.500 (2.500000000)
dummyArith_f(10.f) / 4.f    = 2.500 (2.500000000)
normalArith_f(10.f) / 4.f   = 2.500 (2.500000000)
sseArith_f(10.f) / 4.f      = 2.500 (2.500000000)
fastArith_f(10.f) / 4.f     = 2.500 (2.499999762)
semifastArith_f(10.f) / 4.f = 2.500 (2.499999762)
fastestArith_f(10.f) / 4.f  = 2.499 (2.499389648)
dummyArith_d(lvalue_d) / rvalue_d    = 2.500 (2.500000000)
normalArith_d(lvalue_d) / rvalue_d   = 2.500 (2.500000000)
sseArith_d(lvalue_d) / rvalue_d      = 2.500 (2.500000000)
fastArith_d(lvalue_d) / rvalue_d     = 2.500 (2.500000000)
semifastArith_d(lvalue_d) / rvalue_d = 2.500 (2.500000000)
fastestArith_d(lvalue_d) / rvalue_d  = 2.500 (2.500000000)

10.f / 5.f                  = 2.000 (2.000000000)
dummyArith_f(10.f) / 5.f    = 2.000 (2.000000000)
normalArith_f(10.f) / 5.f   = 2.000 (2.000000000)
sseArith_f(10.f) / 5.f      = 2.000 (2.000000000)
fastArith_f(10.f) / 5.f     = 2.000 (1.999999881)
semifastArith_f(10.f) / 5.f = 2.000 (1.999999881)
fastestArith_f(10.f) / 5.f  = 2.000 (1.999511719)
dummyArith_d(lvalue_d) / rvalue_d    = 2.000 (2.000000000)
normalArith_d(lvalue_d) / rvalue_d   = 2.000 (2.000000000)
sseArith_d(lvalue_d) / rvalue_d      = 2.000 (2.000000000)
fastArith_d(lvalue_d) / rvalue_d     = 2.000 (2.000000000)
semifastArith_d(lvalue_d) / rvalue_d = 2.000 (2.000000000)
fastestArith_d(lvalue_d) / rvalue_d  = 2.000 (2.000000000)

10.f / 10.f                  = 1.000 (1.000000000)
dummyArith_f(10.f) / 10.f    = 1.000 (1.000000000)
normalArith_f(10.f) / 10.f   = 1.000 (1.000000000)
sseArith_f(10.f) / 10.f      = 1.000 (1.000000000)
fastArith_f(10.f) / 10.f     = 1.000 (0.999999940)
semifastArith_f(10.f) / 10.f = 1.000 (0.999999940)
fastestArith_f(10.f) / 10.f  = 1.000 (0.999755859)
dummyArith_d(lvalue_d) / rvalue_d    = 1.000 (1.000000000)
normalArith_d(lvalue_d) / rvalue_d   = 1.000 (1.000000000)
sseArith_d(lvalue_d) / rvalue_d      = 1.000 (1.000000000)
fastArith_d(lvalue_d) / rvalue_d     = 1.000 (1.000000000)
semifastArith_d(lvalue_d) / rvalue_d = 1.000 (1.000000000)
fastestArith_d(lvalue_d) / rvalue_d  = 1.000 (1.000000000)

10.f / 100.f                  = 0.100 (0.100000001)
dummyArith_f(10.f) / 100.f    = 0.100 (0.100000001)
normalArith_f(10.f) / 100.f   = 0.100 (0.100000001)
sseArith_f(10.f) / 100.f      = 0.100 (0.100000001)
fastArith_f(10.f) / 100.f     = 0.100 (0.099999994)
semifastArith_f(10.f) / 100.f = 0.100 (0.099999994)
fastestArith_f(10.f) / 100.f  = 0.100 (0.099983215)
dummyArith_d(lvalue_d) / rvalue_d    = 0.100 (0.100000000)
normalArith_d(lvalue_d) / rvalue_d   = 0.100 (0.100000000)
sseArith_d(lvalue_d) / rvalue_d      = 0.100 (0.100000000)
fastArith_d(lvalue_d) / rvalue_d     = 0.100 (0.100000000)
semifastArith_d(lvalue_d) / rvalue_d = 0.100 (0.100000000)
fastestArith_d(lvalue_d) / rvalue_d  = 0.100 (0.100000000)

10.f / 1000.f                  = 0.010 (0.010000000)
dummyArith_f(10.f) / 1000.f    = 0.010 (0.010000000)
normalArith_f(10.f) / 1000.f   = 0.010 (0.010000000)
sseArith_f(10.f) / 1000.f      = 0.010 (0.010000000)
fastArith_f(10.f) / 1000.f     = 0.010 (0.010000001)
semifastArith_f(10.f) / 1000.f = 0.010 (0.010000001)
fastestArith_f(10.f) / 1000.f  = 0.010 (0.009999275)
dummyArith_d(lvalue_d) / rvalue_d    = 0.010 (0.010000000)
normalArith_d(lvalue_d) / rvalue_d   = 0.010 (0.010000000)
sseArith_d(lvalue_d) / rvalue_d      = 0.010 (0.010000000)
fastArith_d(lvalue_d) / rvalue_d     = 0.010 (0.010000000)
semifastArith_d(lvalue_d) / rvalue_d = 0.010 (0.010000000)
fastestArith_d(lvalue_d) / rvalue_d  = 0.010 (0.010000000)

10.f / 10000.f                  = 0.001 (0.001000000)
dummyArith_f(10.f) / 10000.f    = 0.001 (0.001000000)
normalArith_f(10.f) / 10000.f   = 0.001 (0.001000000)
sseArith_f(10.f) / 10000.f      = 0.001 (0.001000000)
fastArith_f(10.f) / 10000.f     = 0.001 (0.001000000)
semifastArith_f(10.f) / 10000.f = 0.001 (0.001000000)
fastestArith_f(10.f) / 10000.f  = 0.001 (0.000999868)
dummyArith_d(lvalue_d) / rvalue_d    = 0.001 (0.001000000)
normalArith_d(lvalue_d) / rvalue_d   = 0.001 (0.001000000)
sseArith_d(lvalue_d) / rvalue_d      = 0.001 (0.001000000)
fastArith_d(lvalue_d) / rvalue_d     = 0.001 (0.001000000)
semifastArith_d(lvalue_d) / rvalue_d = 0.001 (0.001000000)
fastestArith_d(lvalue_d) / rvalue_d  = 0.001 (0.001000000)

10.f / 100000.f                  = 0.000 (0.000100000)
dummyArith_f(10.f) / 100000.f    = 0.000 (0.000100000)
normalArith_f(10.f) / 100000.f   = 0.000 (0.000100000)
sseArith_f(10.f) / 100000.f      = 0.000 (0.000100000)
fastArith_f(10.f) / 100000.f     = 0.000 (0.000100000)
semifastArith_f(10.f) / 100000.f = 0.000 (0.000100000)
fastestArith_f(10.f) / 100000.f  = 0.000 (0.000099987)
dummyArith_d(lvalue_d) / rvalue_d    = 0.000 (0.000100000)
normalArith_d(lvalue_d) / rvalue_d   = 0.000 (0.000100000)
sseArith_d(lvalue_d) / rvalue_d      = 0.000 (0.000100000)
fastArith_d(lvalue_d) / rvalue_d     = 0.000 (0.000100000)
semifastArith_d(lvalue_d) / rvalue_d = 0.000 (0.000100000)
fastestArith_d(lvalue_d) / rvalue_d  = 0.000 (0.000100000)

10.f / 1000000.f                  = 0.000 (0.000010000)
dummyArith_f(10.f) / 1000000.f    = 0.000 (0.000010000)
normalArith_f(10.f) / 1000000.f   = 0.000 (0.000010000)
sseArith_f(10.f) / 1000000.f      = 0.000 (0.000010000)
fastArith_f(10.f) / 1000000.f     = 0.000 (0.000010000)
semifastArith_f(10.f) / 1000000.f = 0.000 (0.000010000)
fastestArith_f(10.f) / 1000000.f  = 0.000 (0.000010000)
dummyArith_d(lvalue_d) / rvalue_d    = 0.000 (0.000010000)
normalArith_d(lvalue_d) / rvalue_d   = 0.000 (0.000010000)
sseArith_d(lvalue_d) / rvalue_d      = 0.000 (0.000010000)
fastArith_d(lvalue_d) / rvalue_d     = 0.000 (0.000010000)
semifastArith_d(lvalue_d) / rvalue_d = 0.000 (0.000010000)
fastestArith_d(lvalue_d) / rvalue_d  = 0.000 (0.000010000)
--------------------------------------------------------------------------------
[ Test for fast sqrt ]

std::sqrt(1.f)                = 1.000 (1.000000000)
sqrt(dummyArith_f(1.f))       = 1.000 (1.000000000)
sqrt(normalArith_f(1.f))      = 1.000 (1.000000000)
sqrt(sseArith_f(1.f))         = 1.000 (1.000000000)
sqrt(fastArith_f(1.f))        = 1.000 (0.999999940)
sqrt(semifastArith_f(1.f))    = 1.000 (0.999999940)
sqrt(fastestArith_f(1.f))     = 1.000 (0.999755859)
sqrt(dummyArith_d(value_d))     = 1.000 (1.000000000)
sqrt(normalArith_d(value_d))    = 1.000 (1.000000000)
sqrt(sseArith_d(value_d))       = 1.000 (1.000000000)
sqrt(fastArith_d(value_d))      = 1.000 (1.000000000)
sqrt(semifastArith_d(value_d))  = 1.000 (1.000000000)
sqrt(fastestArith_d(value_d))   = 1.000 (1.000000000)

std::sqrt(2.f)                = 1.414 (1.414213538)
sqrt(dummyArith_f(2.f))       = 1.414 (1.414213538)
sqrt(normalArith_f(2.f))      = 1.414 (1.414213538)
sqrt(sseArith_f(2.f))         = 1.414 (1.414213538)
sqrt(fastArith_f(2.f))        = 1.414 (1.414213419)
sqrt(semifastArith_f(2.f))    = 1.414 (1.414213538)
sqrt(fastestArith_f(2.f))     = 1.414 (1.413818359)
sqrt(dummyArith_d(value_d))     = 1.414 (1.414213562)
sqrt(normalArith_d(value_d))    = 1.414 (1.414213562)
sqrt(sseArith_d(value_d))       = 1.414 (1.414213562)
sqrt(fastArith_d(value_d))      = 1.414 (1.414213562)
sqrt(semifastArith_d(value_d))  = 1.414 (1.414213562)
sqrt(fastestArith_d(value_d))   = 1.414 (1.414213562)

std::sqrt(3.f)                = 1.732 (1.732050776)
sqrt(dummyArith_f(3.f))       = 1.732 (1.732050776)
sqrt(normalArith_f(3.f))      = 1.732 (1.732050776)
sqrt(sseArith_f(3.f))         = 1.732 (1.732050776)
sqrt(fastArith_f(3.f))        = 1.732 (1.732050776)
sqrt(semifastArith_f(3.f))    = 1.732 (1.732050776)
sqrt(fastestArith_f(3.f))     = 1.732 (1.731811523)
sqrt(dummyArith_d(value_d))     = 1.732 (1.732050808)
sqrt(normalArith_d(value_d))    = 1.732 (1.732050808)
sqrt(sseArith_d(value_d))       = 1.732 (1.732050808)
sqrt(fastArith_d(value_d))      = 1.732 (1.732050808)
sqrt(semifastArith_d(value_d))  = 1.732 (1.732050808)
sqrt(fastestArith_d(value_d))   = 1.732 (1.732050808)

std::sqrt(4.f)                = 2.000 (2.000000000)
sqrt(dummyArith_f(4.f))       = 2.000 (2.000000000)
sqrt(normalArith_f(4.f))      = 2.000 (2.000000000)
sqrt(sseArith_f(4.f))         = 2.000 (2.000000000)
sqrt(fastArith_f(4.f))        = 2.000 (1.999999881)
sqrt(semifastArith_f(4.f))    = 2.000 (1.999999881)
sqrt(fastestArith_f(4.f))     = 2.000 (1.999511719)
sqrt(dummyArith_d(value_d))     = 2.000 (2.000000000)
sqrt(normalArith_d(value_d))    = 2.000 (2.000000000)
sqrt(sseArith_d(value_d))       = 2.000 (2.000000000)
sqrt(fastArith_d(value_d))      = 2.000 (2.000000000)
sqrt(semifastArith_d(value_d))  = 2.000 (2.000000000)
sqrt(fastestArith_d(value_d))   = 2.000 (2.000000000)

std::sqrt(5.f)                = 2.236 (2.236068010)
sqrt(dummyArith_f(5.f))       = 2.236 (2.236068010)
sqrt(normalArith_f(5.f))      = 2.236 (2.236068010)
sqrt(sseArith_f(5.f))         = 2.236 (2.236068010)
sqrt(fastArith_f(5.f))        = 2.236 (2.236068010)
sqrt(semifastArith_f(5.f))    = 2.236 (2.236068010)
sqrt(fastestArith_f(5.f))     = 2.236 (2.235717773)
sqrt(dummyArith_d(value_d))     = 2.236 (2.236067977)
sqrt(normalArith_d(value_d))    = 2.236 (2.236067977)
sqrt(sseArith_d(value_d))       = 2.236 (2.236067977)
sqrt(fastArith_d(value_d))      = 2.236 (2.236067977)
sqrt(semifastArith_d(value_d))  = 2.236 (2.236067977)
sqrt(fastestArith_d(value_d))   = 2.236 (2.236067977)

std::sqrt(10.f)                = 3.162 (3.162277699)
sqrt(dummyArith_f(10.f))       = 3.162 (3.162277699)
sqrt(normalArith_f(10.f))      = 3.162 (3.162277699)
sqrt(sseArith_f(10.f))         = 3.162 (3.162277699)
sqrt(fastArith_f(10.f))        = 3.162 (3.162277699)
sqrt(semifastArith_f(10.f))    = 3.162 (3.162277699)
sqrt(fastestArith_f(10.f))     = 3.162 (3.161621094)
sqrt(dummyArith_d(value_d))     = 3.162 (3.162277660)
sqrt(normalArith_d(value_d))    = 3.162 (3.162277660)
sqrt(sseArith_d(value_d))       = 3.162 (3.162277660)
sqrt(fastArith_d(value_d))      = 3.162 (3.162277660)
sqrt(semifastArith_d(value_d))  = 3.162 (3.162277660)
sqrt(fastestArith_d(value_d))   = 3.162 (3.162277660)

std::sqrt(100.f)                = 10.000 (10.000000000)
sqrt(dummyArith_f(100.f))       = 10.000 (10.000000000)
sqrt(normalArith_f(100.f))      = 10.000 (10.000000000)
sqrt(sseArith_f(100.f))         = 10.000 (10.000000000)
sqrt(fastArith_f(100.f))        = 10.000 (10.000000000)
sqrt(semifastArith_f(100.f))    = 10.000 (9.999999046)
sqrt(fastestArith_f(100.f))     = 9.999 (9.999084473)
sqrt(dummyArith_d(value_d))     = 10.000 (10.000000000)
sqrt(normalArith_d(value_d))    = 10.000 (10.000000000)
sqrt(sseArith_d(value_d))       = 10.000 (10.000000000)
sqrt(fastArith_d(value_d))      = 10.000 (10.000000000)
sqrt(semifastArith_d(value_d))  = 10.000 (10.000000000)
sqrt(fastestArith_d(value_d))   = 10.000 (10.000000000)

std::sqrt(1000.f)                = 31.623 (31.622776031)
sqrt(dummyArith_f(1000.f))       = 31.623 (31.622776031)
sqrt(normalArith_f(1000.f))      = 31.623 (31.622776031)
sqrt(sseArith_f(1000.f))         = 31.623 (31.622776031)
sqrt(fastArith_f(1000.f))        = 31.623 (31.622774124)
sqrt(semifastArith_f(1000.f))    = 31.623 (31.622774124)
sqrt(fastestArith_f(1000.f))     = 31.616 (31.616210938)
sqrt(dummyArith_d(value_d))     = 31.623 (31.622776602)
sqrt(normalArith_d(value_d))    = 31.623 (31.622776602)
sqrt(sseArith_d(value_d))       = 31.623 (31.622776602)
sqrt(fastArith_d(value_d))      = 31.623 (31.622776602)
sqrt(semifastArith_d(value_d))  = 31.623 (31.622776602)
sqrt(fastestArith_d(value_d))   = 31.623 (31.622776602)

std::sqrt(10000.f)                = 100.000 (100.000000000)
sqrt(dummyArith_f(10000.f))       = 100.000 (100.000000000)
sqrt(normalArith_f(10000.f))      = 100.000 (100.000000000)
sqrt(sseArith_f(10000.f))         = 100.000 (100.000000000)
sqrt(fastArith_f(10000.f))        = 100.000 (100.000000000)
sqrt(semifastArith_f(10000.f))    = 100.000 (100.000000000)
sqrt(fastestArith_f(10000.f))     = 99.983 (99.983215332)
sqrt(dummyArith_d(value_d))     = 100.000 (100.000000000)
sqrt(normalArith_d(value_d))    = 100.000 (100.000000000)
sqrt(sseArith_d(value_d))       = 100.000 (100.000000000)
sqrt(fastArith_d(value_d))      = 100.000 (100.000000000)
sqrt(semifastArith_d(value_d))  = 100.000 (100.000000000)
sqrt(fastestArith_d(value_d))   = 100.000 (100.000000000)

std::sqrt(100000.f)                = 316.228 (316.227752686)
sqrt(dummyArith_f(100000.f))       = 316.228 (316.227752686)
sqrt(normalArith_f(100000.f))      = 316.228 (316.227752686)
sqrt(sseArith_f(100000.f))         = 316.228 (316.227752686)
sqrt(fastArith_f(100000.f))        = 316.228 (316.227752686)
sqrt(semifastArith_f(100000.f))    = 316.228 (316.227752686)
sqrt(fastestArith_f(100000.f))     = 316.238 (316.238403320)
sqrt(dummyArith_d(value_d))     = 316.228 (316.227766017)
sqrt(normalArith_d(value_d))    = 316.228 (316.227766017)
sqrt(sseArith_d(value_d))       = 316.228 (316.227766017)
sqrt(fastArith_d(value_d))      = 316.228 (316.227766017)
sqrt(semifastArith_d(value_d))  = 316.228 (316.227766017)
sqrt(fastestArith_d(value_d))   = 316.228 (316.227766017)

std::sqrt(1000000.f)                = 1000.000 (1000.000000000)
sqrt(dummyArith_f(1000000.f))       = 1000.000 (1000.000000000)
sqrt(normalArith_f(1000000.f))      = 1000.000 (1000.000000000)
sqrt(sseArith_f(1000000.f))         = 1000.000 (1000.000000000)
sqrt(fastArith_f(1000000.f))        = 1000.000 (1000.000061035)
sqrt(semifastArith_f(1000000.f))    = 1000.000 (999.999938965)
sqrt(fastestArith_f(1000000.f))     = 999.927 (999.927490234)
sqrt(dummyArith_d(value_d))     = 1000.000 (1000.000000000)
sqrt(normalArith_d(value_d))    = 1000.000 (1000.000000000)
sqrt(sseArith_d(value_d))       = 1000.000 (1000.000000000)
sqrt(fastArith_d(value_d))      = 1000.000 (1000.000000000)
sqrt(semifastArith_d(value_d))  = 1000.000 (1000.000000000)
sqrt(fastestArith_d(value_d))   = 1000.000 (1000.000000000)
--------------------------------------------------------------------------------
[ Test for vector operation ]
- 2D vector -
vec2_1=[1.00000][2.00000]
vec2_2=[3.00000][4.00000]
norm(vec2_1)                             = 2.23607
normSq(vec2_1)                           = 5.00000
merge(vec2_result, vec2_1, vec2_2)       = [4.00000][6.00000]
difference(vec2_result, vec2_1, vec2_2)  = [-2.00000][-2.00000]
length(vec2_1, vec2_2)                   = 2.82843
lengthSq(vec2_1, vec2_2)                 = 8.00000
normalize(vec2_result, vec2_1)           = [0.44721][0.89443]
mul(vec2_result, vec2_1, 10.f)           = [10.00000][20.00000]
dot(vec2_1, vec2_2)                      = 11.00000
normalizedDot(vec2_1, vec2_2)            = 0.98387
norm(fastArith_2f(vec2_1))                                                         = 2.23607
normSq(fastArith_2f(vec2_1))                                                       = 5.00000
fastArith_2f vec2_result = merge(fastArith_2f(vec2_1), fastArith_2f(vec2_2))       = [4.00000][6.00000]
fastArith_2f vec2_result = difference(fastArith_2f(vec2_1), fastArith_2f(vec2_2))  = [-2.00000][-2.00000]
length(fastArith_2f(vec2_1), fastArith_2f(vec2_2))                                 = 2.82843
lengthSq(fastArith_2f(vec2_1), fastArith_2f(vec2_2))                               = 8.00000
fastArith_2f vec2_result = normalize(fastArith_2f(vec2_1))                         = [0.44721][0.89443]
fastArith_2f vec2_result = mul(fastArith_2f(vec2_1), 10.f)                         = [10.00000][20.00000]
dot(fastArith_2f(vec2_1), fastArith_2f(vec2_2))                                    = 11.00000
normalizedDot(fastArith_2f(vec2_1), fastArith_2f(vec2_2))                          = 0.98387
norm(fastestArith_2f(vec2_1))                                                               = 2.23607
normSq(fastestArith_2f(vec2_1))                                                             = 5.00000
fastestArith_2f vec2_result = merge(fastestArith_2f(vec2_1), fastestArith_2f(vec2_2))       = [4.00000][6.00000]
fastestArith_2f vec2_result = difference(fastestArith_2f(vec2_1), fastestArith_2f(vec2_2))  = [-2.00000][-2.00000]
length(fastestArith_2f(vec2_1), fastestArith_2f(vec2_2))                                    = 2.82843
lengthSq(fastestArith_2f(vec2_1), fastestArith_2f(vec2_2))                                  = 8.00000
fastestArith_2f vec2_result = normalize(fastestArith_2f(vec2_1))                            = [0.44721][0.89443]
fastestArith_2f vec2_result = mul(fastestArith_2f(vec2_1), 10.f)                            = [10.00000][20.00000]
dot(fastestArith_2f(vec2_1), fastestArith_2f(vec2_2))                                       = 11.00000
normalizedDot(fastestArith_2f(vec2_1), fastestArith_2f(vec2_2))                             = 0.98387
norm(semifastArith_2f(vec2_1))                                                                 = 2.23607
normSq(semifastArith_2f(vec2_1))                                                               = 5.00000
semifastArith_2f vec2_result = merge(semifastArith_2f(vec2_1), semifastArith_2f(vec2_2))       = [4.00000][6.00000]
semifastArith_2f vec2_result = difference(semifastArith_2f(vec2_1), semifastArith_2f(vec2_2))  = [-2.00000][-2.00000]
length(semifastArith_2f(vec2_1), semifastArith_2f(vec2_2))                                     = 2.82843
lengthSq(semifastArith_2f(vec2_1), semifastArith_2f(vec2_2))                                   = 8.00000
semifastArith_2f vec2_result = normalize(semifastArith_2f(vec2_1))                             = [0.44721][0.89443]
semifastArith_2f vec2_result = mul(semifastArith_2f(vec2_1), 10.f)                             = [10.00000][20.00000]
dot(semifastArith_2f(vec2_1), semifastArith_2f(vec2_2))                                        = 11.00000
normalizedDot(semifastArith_2f(vec2_1), semifastArith_2f(vec2_2))                              = 0.98387
norm(sseArith_2f(vec2_1))                                                       = 2.23607
normSq(sseArith_2f(vec2_1))                                                     = 5.00000
sseArith_2f vec2_result = merge(sseArith_2f(vec2_1), sseArith_2f(vec2_2))       = [4.00000][6.00000]
sseArith_2f vec2_result = difference(sseArith_2f(vec2_1), sseArith_2f(vec2_2))  = [-2.00000][-2.00000]
length(sseArith_2f(vec2_1), sseArith_2f(vec2_2))                                = 2.82843
lengthSq(sseArith_2f(vec2_1), sseArith_2f(vec2_2))                              = 8.00000
sseArith_2f vec2_result = normalize(sseArith_2f(vec2_1))                        = [0.44721][0.89443]
sseArith_2f vec2_result = mul(sseArith_2f(vec2_1), 10.f)                        = [10.00000][20.00000]
dot(sseArith_2f(vec2_1), sseArith_2f(vec2_2))                                   = 11.00000
normalizedDot(sseArith_2f(vec2_1), sseArith_2f(vec2_2))                         = 0.98387
norm(normalArith_2f(vec2_1))                                                             = 2.23607
normSq(normalArith_2f(vec2_1))                                                           = 5.00000
normalArith_2f vec2_result = merge(normalArith_2f(vec2_1), normalArith_2f(vec2_2))       = [4.00000][6.00000]
normalArith_2f vec2_result = difference(normalArith_2f(vec2_1), normalArith_2f(vec2_2))  = [-2.00000][-2.00000]
length(normalArith_2f(vec2_1), normalArith_2f(vec2_2))                                   = 2.82843
lengthSq(normalArith_2f(vec2_1), normalArith_2f(vec2_2))                                 = 8.00000
normalArith_2f vec2_result = normalize(normalArith_2f(vec2_1))                           = [0.44721][0.89443]
normalArith_2f vec2_result = mul(normalArith_2f(vec2_1), 10.f)                           = [10.00000][20.00000]
dot(normalArith_2f(vec2_1), normalArith_2f(vec2_2))                                      = 11.00000
normalizedDot(normalArith_2f(vec2_1), normalArith_2f(vec2_2))                            = 0.98387
norm(dummyArith_2f(vec2_1))                                            = 2.23607
normSq(dummyArith_2f(vec2_1))                                          = 5.00000
merge(vec2_result, dummyArith_2f(vec2_1), dummyArith_2f(vec2_2))       = [4.00000][6.00000]
difference(vec2_result, dummyArith_2f(vec2_1), dummyArith_2f(vec2_2))  = [-2.00000][-2.00000]
length(dummyArith_2f(vec2_1), dummyArith_2f(vec2_2))                   = 2.82843
lengthSq(dummyArith_2f(vec2_1), dummyArith_2f(vec2_2))                 = 8.00000
normalize(vec2_result, dummyArith_2f(vec2_1))                          = [0.44721][0.89443]
mul(vec2_result, dummyArith_2f(vec2_1), 10.f)                          = [10.00000][20.00000]
dot(dummyArith_2f(vec2_1), dummyArith_2f(vec2_2))                      = 11.00000
normalizedDot(dummyArith_2f(vec2_1), dummyArith_2f(vec2_2))            = 0.98387
- 3D vector -
vec3_1=[1.00000][2.00000][3.00000]
vec3_2=[4.00000][5.00000][6.00000]
norm(vec3_1)                             = 3.74166
normSq(vec3_1)                           = 14.00000
merge(vec3_result, vec3_1, vec3_2)       = [5.00000][7.00000][9.00000]
difference(vec3_result, vec3_1, vec3_2)  = [-3.00000][-3.00000][-3.00000]
length(vec3_1, vec3_2)                   = 5.19615
lengthSq(vec3_1, vec3_2)                 = 27.00000
normalize(vec3_result, vec3_1)           = [0.26726][0.53452][0.80178]
mul(vec3_result, vec3_1, 10.f)           = [10.00000][20.00000][30.00000]
dot(vec3_1, vec3_2)                      = 32.00000
normalizedDot(vec3_1, vec3_2)            = 0.97463
cross(vec3_result, vec3_1, vec3_2)       = [-3.00000][6.00000][-5.00000]
norm(fastArith_3f(vec3_1))                                                         = 3.74166
normSq(fastArith_3f(vec3_1))                                                       = 14.00000
fastArith_3f vec3_result = merge(fastArith_3f(vec3_1), fastArith_3f(vec3_2))       = [5.00000][7.00000][9.00000]
fastArith_3f vec3_result = difference(fastArith_3f(vec3_1), fastArith_3f(vec3_2))  = [-3.00000][-3.00000][-3.00000]
length(fastArith_3f(vec3_1), fastArith_3f(vec3_2))                                 = 5.19615
lengthSq(fastArith_3f(vec3_1), fastArith_3f(vec3_2))                               = 27.00000
fastArith_3f vec3_result = normalize(fastArith_3f(vec3_1))                         = [0.26726][0.53452][0.80178]
fastArith_3f vec3_result = mul(fastArith_3f(vec3_1), 10.f)                         = [10.00000][20.00000][30.00000]
dot(fastArith_3f(vec3_1), fastArith_3f(vec3_2))                                    = 32.00000
normalizedDot(fastArith_3f(vec3_1), fastArith_3f(vec3_2))                          = 0.97463
fastArith_3f vec3_result = cross(fastArith_3f(vec3_1), fastArith_3f(vec3_2))       = [-3.00000][6.00000][-3.00000]
norm(fastestArith_3f(vec3_1))                                                               = 3.74166
normSq(fastestArith_3f(vec3_1))                                                             = 14.00000
fastestArith_3f vec3_result = merge(fastestArith_3f(vec3_1), fastestArith_3f(vec3_2))       = [5.00000][7.00000][9.00000]
fastestArith_3f vec3_result = difference(fastestArith_3f(vec3_1), fastestArith_3f(vec3_2))  = [-3.00000][-3.00000][-3.00000]
length(fastestArith_3f(vec3_1), fastestArith_3f(vec3_2))                                    = 5.19615
lengthSq(fastestArith_3f(vec3_1), fastestArith_3f(vec3_2))                                  = 27.00000
fastestArith_3f vec3_result = normalize(fastestArith_3f(vec3_1))                            = [0.26726][0.53452][0.80178]
fastestArith_3f vec3_result = mul(fastestArith_3f(vec3_1), 10.f)                            = [10.00000][20.00000][30.00000]
dot(fastestArith_3f(vec3_1), fastestArith_3f(vec3_2))                                       = 32.00000
normalizedDot(fastestArith_3f(vec3_1), fastestArith_3f(vec3_2))                             = 0.97463
fastestArith_3f vec3_result = cross(fastestArith_3f(vec3_1), fastestArith_3f(vec3_2))       = [-3.00000][6.00000][-3.00000]
norm(semifastArith_3f(vec3_1))                                                                 = 3.74166
normSq(semifastArith_3f(vec3_1))                                                               = 14.00000
semifastArith_3f vec3_result = merge(semifastArith_3f(vec3_1), semifastArith_3f(vec3_2))       = [5.00000][7.00000][9.00000]
semifastArith_3f vec3_result = difference(semifastArith_3f(vec3_1), semifastArith_3f(vec3_2))  = [-3.00000][-3.00000][-3.00000]
length(semifastArith_3f(vec3_1), semifastArith_3f(vec3_2))                                     = 5.19615
lengthSq(semifastArith_3f(vec3_1), semifastArith_3f(vec3_2))                                   = 27.00000
semifastArith_3f vec3_result = normalize(semifastArith_3f(vec3_1))                             = [0.26726][0.53452][0.80178]
semifastArith_3f vec3_result = mul(semifastArith_3f(vec3_1), 10.f)                             = [10.00000][20.00000][30.00000]
dot(semifastArith_3f(vec3_1), semifastArith_3f(vec3_2))                                        = 32.00000
normalizedDot(semifastArith_3f(vec3_1), semifastArith_3f(vec3_2))                              = 0.97463
semifastArith_3f vec3_result = cross(semifastArith_3f(vec3_1), semifastArith_3f(vec3_2))       = [-3.00000][6.00000][-3.00000]
norm(sseArith_3f(vec3_1))                                                       = 3.74166
normSq(sseArith_3f(vec3_1))                                                     = 14.00000
sseArith_3f vec3_result = merge(sseArith_3f(vec3_1), sseArith_3f(vec3_2))       = [5.00000][7.00000][9.00000]
sseArith_3f vec3_result = difference(sseArith_3f(vec3_1), sseArith_3f(vec3_2))  = [-3.00000][-3.00000][-3.00000]
length(sseArith_3f(vec3_1), sseArith_3f(vec3_2))                                = 5.19615
lengthSq(sseArith_3f(vec3_1), sseArith_3f(vec3_2))                              = 27.00000
sseArith_3f vec3_result = normalize(sseArith_3f(vec3_1))                        = [0.26726][0.53452][0.80178]
sseArith_3f vec3_result = mul(sseArith_3f(vec3_1), 10.f)                        = [10.00000][20.00000][30.00000]
dot(sseArith_3f(vec3_1), sseArith_3f(vec3_2))                                   = 32.00000
normalizedDot(sseArith_3f(vec3_1), sseArith_3f(vec3_2))                         = 0.97463
sseArith_3f vec3_result = cross(sseArith_3f(vec3_1), sseArith_3f(vec3_2))       = [-3.00000][6.00000][-3.00000]
norm(normalArith_3f(vec3_1))                                                             = 3.74166
normSq(normalArith_3f(vec3_1))                                                           = 14.00000
normalArith_3f vec3_result = merge(normalArith_3f(vec3_1), normalArith_3f(vec3_2))       = [5.00000][7.00000][9.00000]
normalArith_3f vec3_result = difference(normalArith_3f(vec3_1), normalArith_3f(vec3_2))  = [-3.00000][-3.00000][-3.00000]
length(normalArith_3f(vec3_1), normalArith_3f(vec3_2))                                   = 5.19615
lengthSq(normalArith_3f(vec3_1), normalArith_3f(vec3_2))                                 = 27.00000
normalArith_3f vec3_result = normalize(normalArith_3f(vec3_1))                           = [0.26726][0.53452][0.80178]
normalArith_3f vec3_result = mul(normalArith_3f(vec3_1), 10.f)                           = [10.00000][20.00000][30.00000]
dot(normalArith_3f(vec3_1), normalArith_3f(vec3_2))                                      = 32.00000
normalizedDot(normalArith_3f(vec3_1), normalArith_3f(vec3_2))                            = 0.97463
normalArith_3f vec3_result = cross(normalArith_3f(vec3_1), normalArith_3f(vec3_2))       = [-3.00000][6.00000][-5.00000]
norm(dummyArith_3f(vec3_1))                                            = 3.74166
normSq(dummyArith_3f(vec3_1))                                          = 14.00000
merge(vec3_result, dummyArith_3f(vec3_1), dummyArith_3f(vec3_2))       = [5.00000][7.00000][9.00000]
difference(vec3_result, dummyArith_3f(vec3_1), dummyArith_3f(vec3_2))  = [-3.00000][-3.00000][-3.00000]
length(dummyArith_3f(vec3_1), dummyArith_3f(vec3_2))                   = 5.19615
lengthSq(dummyArith_3f(vec3_1), dummyArith_3f(vec3_2))                 = 27.00000
normalize(vec3_result, dummyArith_3f(vec3_1))                          = [0.26726][0.53452][0.80178]
mul(vec3_result, dummyArith_3f(vec3_1), 10.f)                          = [10.00000][20.00000][30.00000]
dot(dummyArith_3f(vec3_1), dummyArith_3f(vec3_2))                      = 32.00000
normalizedDot(dummyArith_3f(vec3_1), dummyArith_3f(vec3_2))            = 0.97463
cross(vec3_result, dummyArith_3f(vec3_1), dummyArith_3f(vec3_2))       = [-3.00000][6.00000][-5.00000]
--------------------------------------------------------------------------------
[ Test for performance of operation : direct:float ] (* 10000000 times repeat)
total = 7200091.000000000 : time=0.393375800 sec
--------------------------------------------------------------------------------
[ Test for performance of operation : dummy:float ] (* 10000000 times repeat)
total = 7200091.000000000 : time=0.278265500 sec
--------------------------------------------------------------------------------
[ Test for performance of operation : normal:float ] (* 10000000 times repeat)
total = 7200091.000000000 : time=0.296280200 sec
--------------------------------------------------------------------------------
[ Test for performance of operation : sse:float ] (* 10000000 times repeat)
total = 7200091.000000000 : time=0.341326500 sec
--------------------------------------------------------------------------------
[ Test for performance of operation : fast:float ] (* 10000000 times repeat)
total = 7200091.000000000 : time=0.314299800 sec
--------------------------------------------------------------------------------
[ Test for performance of operation : semifast:float ] (* 10000000 times repeat)
total = 7200091.000000000 : time=0.321305100 sec
--------------------------------------------------------------------------------
[ Test for performance of operation : fastest:float ] (* 10000000 times repeat)
total = 7200136.000000000 : time=0.319305100 sec
--------------------------------------------------------------------------------
[ Test for performance of operation : direct:dobule ] (* 10000000 times repeat)
total = 7200563.765478109 : time=0.311296100 sec
--------------------------------------------------------------------------------
[ Test for performance of operation : dummy:dobule ] (* 10000000 times repeat)
total = 7200563.765478109 : time=0.258245800 sec
--------------------------------------------------------------------------------
[ Test for performance of operation : normal:double ] (* 10000000 times repeat)
total = 7200563.765478109 : time=0.271258500 sec
--------------------------------------------------------------------------------
[ Test for performance of operation : sse:double ] (* 10000000 times repeat)
total = 7200563.765478109 : time=0.295281900 sec
--------------------------------------------------------------------------------
[ Test for performance of operation : fast:double ] (* 10000000 times repeat)
total = 7200563.765478109 : time=0.288274600 sec
--------------------------------------------------------------------------------
[ Test for performance of operation : semifast:double ] (* 10000000 times repeat)
total = 7200563.765478109 : time=0.264250900 sec
--------------------------------------------------------------------------------
[ Test for performance of operation : fastest:double ] (* 10000000 times repeat)
total = 7200563.765478109 : time=0.296283100 sec
--------------------------------------------------------------------------------
[ Test for performance of sqrt : direct:float ] (* 1000000 times repeat)
total = 862325.812500000 : time=0.009007600 sec
--------------------------------------------------------------------------------
[ Test for performance of sqrt : dummy:float ] (* 1000000 times repeat)
total = 862325.812500000 : time=0.009009400 sec
--------------------------------------------------------------------------------
[ Test for performance of sqrt : normal:float ] (* 1000000 times repeat)
total = 862325.812500000 : time=0.010008500 sec
--------------------------------------------------------------------------------
[ Test for performance of sqrt : sse:float ] (* 1000000 times repeat)
total = 862325.812500000 : time=0.005005900 sec
--------------------------------------------------------------------------------
[ Test for performance of sqrt : fast:float ] (* 1000000 times repeat)
total = 862325.812500000 : time=0.008006400 sec
--------------------------------------------------------------------------------
[ Test for performance of sqrt : semifast:float ] (* 1000000 times repeat)
total = 862325.812500000 : time=0.009009700 sec
--------------------------------------------------------------------------------
[ Test for performance of sqrt : fastest:float ] (* 1000000 times repeat)
total = 862323.375000000 : time=0.006004700 sec
--------------------------------------------------------------------------------
[ Test for performance of sqrt : direct:dobule ] (* 1000000 times repeat)
total = 861960.898391904 : time=0.008008800 sec
--------------------------------------------------------------------------------
[ Test for performance of sqrt : dummy:dobule ] (* 1000000 times repeat)
total = 861960.898391904 : time=0.008006500 sec
--------------------------------------------------------------------------------
[ Test for performance of sqrt : normal:double ] (* 1000000 times repeat)
total = 861960.898391904 : time=0.010010800 sec
--------------------------------------------------------------------------------
[ Test for performance of sqrt : sse:double ] (* 1000000 times repeat)
total = 861960.898391904 : time=0.006005000 sec
--------------------------------------------------------------------------------
[ Test for performance of sqrt : fast:double ] (* 1000000 times repeat)
total = 861960.898391904 : time=0.006005900 sec
--------------------------------------------------------------------------------
[ Test for performance of sqrt : semifast:double ] (* 1000000 times repeat)
total = 861960.898391904 : time=0.006004400 sec
--------------------------------------------------------------------------------
[ Test for performance of sqrt : fastest:double ] (* 1000000 times repeat)
total = 861960.898391904 : time=0.005005000 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : direct:float[3] ] (* 1000000 times repeat)
total = 14083092.000000000 : time=0.078075100 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : dummy:float[3] ] (* 1000000 times repeat)
total = 14083092.000000000 : time=0.079075400 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : normal:float[3] ] (* 1000000 times repeat)
total = 14083092.000000000 : time=0.098093800 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : sse:float[3] ] (* 1000000 times repeat)
total = 14083011.000000000 : time=0.194183400 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : fast:float[3] ] (* 1000000 times repeat)
total = 14083011.000000000 : time=0.179170800 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : semifast:float[3] ] (* 1000000 times repeat)
total = 14083011.000000000 : time=0.183175700 sec
--------------------------------------------------------------------------------
[ Test for performance of vector : fastest:float[3] ] (* 1000000 times repeat)
total = 14083011.000000000 : time=0.181172500 sec
