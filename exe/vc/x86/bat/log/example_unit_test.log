----- Test for UnitTest -----
- gameLoop::gameLoop()
- gameLoop::initialize() [BEGIN] ...
- gameLoop::initialize() [END]
- gameLoop::main() [BEGIN] ...

Start unit test: [Target=All][Attr=0x00000001]
============================================================

----- Start unit test module: "moduleA" (Group=1,Attr=0x00000001) -----
 [OK]  <-- module_a.func1(1, 2) == 3 (ret=3)
 [OK]  <-- module_a.func1(3, 4) == 7 (ret=7)
*[NG!] <-- module_a.func1(4, 5) != 9 (ret=9)
 [OK]  <-- module_a.func2() == true (ret=true)
*[NG!] <-- module_a.func2() != true (ret=true)
*[??]  <-- module_a.func3() == true <EXCEPTION!!:Faile to custom unit-test>
----- Finish unit test module: [test=6, passed=3, missed=3] 0.001000300 sec -----

----- Start unit test module: "moduleB" (Group=2,Attr=0x00000001) -----
 [OK]  <-- module_b.func1(1, 2, 3) == 1+2+3 (ret=6)
*[NG!] <-- module_b.func1(3, 4, 5) != 60 (ret=60)
 [OK]  <-- module_b.func1(5, 6, 7) > 10 (ret=210)
 [OK]  <-- module_b.func1(7, 8, 9) >= 20 (ret=504)
*[NG!] <-- module_b.func1(9, 10, 11) < 30 (ret=990)
*[NG!] <-- module_b.func1(11, 12, 13) <= 40 (ret=1716)
           module_b.func2(1, 2, oparam)
*[NG!] <--     oparam == 2 (ret=0)
           module_b.func2(3, 4, oparam)
 [OK]  <--     oparam != 12 (ret=0)
----- Finish unit test module: [test=8, passed=4, missed=4] 0.000000000 sec -----

============================================================
Finish unit test: Total [test=14, passed=7, missed=7] 0.001000300 sec -----
(registeredNum=3, minStackRemain=1648, minStrRemain=1020, minStrBuffRemain=2013)
- gameLoop::finalize() [BEGIN] ...
- gameLoop::finalize() [END]
- end -
- gameLoop::~gameLoop()
