
================================================================================

--------------------------------------------------
[ Test for polyAllocator with new/delete operator ]

> auto adapter = s_stackAllocator.adapter()
> polyAllocator poly_allocator(adapter);
poly_allocator: name="stackAllocator", mode="ManualClear"
stack:size=0,count=0, pool:size=0,pool=0
> data_t* p101 = new data_t;
data_t::data_t(): m_val=0
> data_t* p102 = new data_t[2];
data_t::data_t(): m_val=0
data_t::data_t(): m_val=0
> data_t* p103 = new data_t[3];
data_t::data_t(): m_val=0
data_t::data_t(): m_val=0
data_t::data_t(): m_val=0
stack:size=128,count=3, pool:size=0,pool=0
***** BEGIN BLOCK *****
> auto nested_adapter = s_poolAllocator.adapter()
> polyAllocator nested_poly_allocator(nested_adapter);
nested_poly_allocator: name="poolAllocator", mode="-"
stack:size=128,count=3, pool:size=0,pool=0
> data_t* p201 = new data_t;
data_t::data_t(): m_val=0
> data_t* p202 = new data_t[2];
data_t::data_t(): m_val=0
data_t::data_t(): m_val=0
> data_t* p203 = new data_t[3];
stack:size=128,count=3, pool:size=96,pool=2
> delete p201;
data_t::~data_t(): m_val=0
> delete[] p202;
data_t::~data_t(): m_val=0
data_t::~data_t(): m_val=0
> delete[] p203;
stack:size=128,count=3, pool:size=0,pool=0
***** END BLOCK *****
> data_t* p104 = new data_t;
data_t::data_t(): m_val=0
stack:size=144,count=4, pool:size=0,pool=0
> delete p101;
data_t::~data_t(): m_val=0
> delete[] p102;
data_t::~data_t(): m_val=0
data_t::~data_t(): m_val=0
> delete[] p103;
data_t::~data_t(): m_val=0
data_t::~data_t(): m_val=0
data_t::~data_t(): m_val=0
> delete[] p104;
----- Debug Info for scopedStackAllocator -----
maxSize=880, size=0, remain=880, count=0 (INIT: buff=00AA1C2C, size=144, count=0)
-----------------------------------------------
data_t::data_t(): m_val=0
----- Debug Info for scopedStackAllocator -----
maxSize=880, size=16, remain=864, count=1 (INIT: buff=00AA1C2C, size=144, count=0)
-----------------------------------------------
data_t::~data_t(): m_val=0
----- Debug Info for scopedStackAllocator -----
maxSize=880, size=16, remain=864, count=0 (INIT: buff=00AA1C2C, size=144, count=0)
-----------------------------------------------
stack:size=144,count=0, pool:size=0,pool=0

--------------------------------------------------
[ Test for polyAllocator with STL ]

> smartStackAllocator_withBuff<2048> stack;
***** BEGIN BLOCK *****
> auto adapter = stack.adapter();
> polyAllocator poly(adapter);
> std::vector<data_t> array;
> data_t data;
data_t::data_t(): m_val=0
> array.push_back(data);
data_t::data_t(const data_t&): m_val=0
> array.push_back(data);
data_t::data_t(data_t&&): m_val=0
data_t::~data_t(): m_val=0
data_t::data_t(const data_t&): m_val=0
> array.push_back(data);
data_t::data_t(data_t&&): m_val=0
data_t::data_t(data_t&&): m_val=0
data_t::~data_t(): m_val=0
data_t::~data_t(): m_val=0
data_t::data_t(const data_t&): m_val=0
> stack.debugInfo(message); printf(message);
----- Debug Info for stackAllocator -----
buff=00BBECAC, maxSize=2048, size=104, remain=1944, count=2
-----------------------------------------
***** END BLOCK *****
data_t::~data_t(): m_val=0
data_t::~data_t(): m_val=0
data_t::~data_t(): m_val=0
data_t::~data_t(): m_val=0
> stack.debugInfo(message); printf(message);
----- Debug Info for stackAllocator -----
buff=00BBECAC, maxSize=2048, size=0, remain=2048, count=0
-----------------------------------------

--------------------------------------------------
[ Test for polyAllocator with GASHA_NEW/GASHA_DELETE ]

> smartStackAllocator_withBuff<2048> stack;
> auto adapter = stack.adapter();
> polyAllocator poly(adapter);
> debugAllocationObserver observer;
> poly.setDebugObserver(observer);
> data_t* p1 = GASHA_NEW(data_t);
[CALLBACK] Operator new(16,16)p=00BBF090, allocator="stackAllocator:AutoClear"
 struct data_t[0], file="example_poly_allocator.cpp(202)[Sat Jul 12 02:31:55 2014]", func="testAdvanced", time=0.002001
data_t::data_t(): m_val=0
> data_t* p2 = GASHA_NEW(data_t[2]);
[CALLBACK] Operator new[](48,16)p=00BBF0A0, allocator="stackAllocator:AutoClear"
 struct data_t[2], file="example_poly_allocator.cpp(205)[Sat Jul 12 02:31:55 2014]", func="testAdvanced", time=0.002001
data_t::data_t(): m_val=0
data_t::data_t(): m_val=0
> data_t* p3 = GASHA_NEW_ARRAY(data_t, 3);
[CALLBACK] Operator new[](64,16)p=00BBF0D0, allocator="stackAllocator:AutoClear"
 struct data_t[3], file="example_poly_allocator.cpp(208)[Sat Jul 12 02:31:55 2014]", func="testAdvanced", time=0.002001
data_t::data_t(): m_val=0
data_t::data_t(): m_val=0
data_t::data_t(): m_val=0
> GASHA_DELETE(p1);
data_t::~data_t(): m_val=0
[CALLBACK] Operator delete(00BBF090), allocator="stackAllocator:AutoClear"
 struct data_t, file="example_poly_allocator.cpp(211)[Sat Jul 12 02:31:55 2014]", func="testAdvanced", time=0.002001
> GASHA_DELETE(p2);
data_t::~data_t(): m_val=0
[CALLBACK] Operator delete(00BBF0B0), allocator="stackAllocator:AutoClear"
 struct data_t, file="example_poly_allocator.cpp(214)[Sat Jul 12 02:31:55 2014]", func="testAdvanced", time=0.002001
> GASHA_DELETE(p3);
data_t::~data_t(): m_val=0
[CALLBACK] Operator delete(00BBF0E0), allocator="stackAllocator:AutoClear"
 struct data_t, file="example_poly_allocator.cpp(215)[Sat Jul 12 02:31:55 2014]", func="testAdvanced", time=0.002001
> std::vector<data_t> array;
[CALLBACK] Operator new(8,4)p=00BBF084, allocator="stackAllocator:AutoClear"
> data_t data;
data_t::data_t(): m_val=0
> array.push_back(data);
[CALLBACK] Operator new(16,4)p=00BBF08C, allocator="stackAllocator:AutoClear"
data_t::data_t(const data_t&): m_val=0
> array.push_back(data);
[CALLBACK] Operator new(32,4)p=00BBF09C, allocator="stackAllocator:AutoClear"
data_t::data_t(data_t&&): m_val=0
data_t::~data_t(): m_val=0
[CALLBACK] Operator delete(00BBF08C), allocator="stackAllocator:AutoClear"
data_t::data_t(const data_t&): m_val=0
> array.push_back(data);
[CALLBACK] Operator new(48,4)p=00BBF0BC, allocator="stackAllocator:AutoClear"
data_t::data_t(data_t&&): m_val=0
data_t::data_t(data_t&&): m_val=0
data_t::~data_t(): m_val=0
data_t::~data_t(): m_val=0
[CALLBACK] Operator delete(00BBF09C), allocator="stackAllocator:AutoClear"
data_t::data_t(const data_t&): m_val=0
***** BEGIN BLOCK *****
> auto nested_adapter = s_poolAllocator.adapter()
> polyAllocator nested_poly_allocator(nested_adapter);
[CALLBACK] Return allocator: "stackAllocator:AutoClear" <- "poolAllocator:-"data_t::~data_t(): m_val=0
data_t::~data_t(): m_val=0
data_t::~data_t(): m_val=0
data_t::~data_t(): m_val=0
[CALLBACK] Operator delete(00BBF0BC), allocator="stackAllocator:AutoClear"
[CALLBACK] Operator delete(00BBF084), allocator="stackAllocator:AutoClear"
