--------------------------------------------------------------------------------
[ Test for fast division ]

10.f / 1.f                 = 10.000 (10.000000000)
10.f / normal_div_f(1.f)   = 10.000 (10.000000000)
10.f / sse_div_f(1.f)      = 10.000 (10.000000000)
10.f / fast_div_f(1.f)     = 10.000 (9.999999046)
10.f / semifast_div_f(1.f) = 10.000 (9.999999046)
10.f / fastest_div_f(1.f)  = 9.998 (9.997558594)

10.f / 2.f                 = 5.000 (5.000000000)
10.f / normal_div_f(2.f)   = 5.000 (5.000000000)
10.f / sse_div_f(2.f)      = 5.000 (5.000000000)
10.f / fast_div_f(2.f)     = 5.000 (4.999999523)
10.f / semifast_div_f(2.f) = 5.000 (4.999999523)
10.f / fastest_div_f(2.f)  = 4.999 (4.998779297)

10.f / 3.f                 = 3.333 (3.333333254)
10.f / normal_div_f(3.f)   = 3.333 (3.333333254)
10.f / sse_div_f(3.f)      = 3.333 (3.333333254)
10.f / fast_div_f(3.f)     = 3.333 (3.333333015)
10.f / semifast_div_f(3.f) = 3.333 (3.333333015)
10.f / fastest_div_f(3.f)  = 3.333 (3.332519531)

10.f / 4.f                 = 2.500 (2.500000000)
10.f / normal_div_f(4.f)   = 2.500 (2.500000000)
10.f / sse_div_f(4.f)      = 2.500 (2.500000000)
10.f / fast_div_f(4.f)     = 2.500 (2.499999762)
10.f / semifast_div_f(4.f) = 2.500 (2.499999762)
10.f / fastest_div_f(4.f)  = 2.499 (2.499389648)

10.f / 5.f                 = 2.000 (2.000000000)
10.f / normal_div_f(5.f)   = 2.000 (2.000000000)
10.f / sse_div_f(5.f)      = 2.000 (2.000000000)
10.f / fast_div_f(5.f)     = 2.000 (1.999999881)
10.f / semifast_div_f(5.f) = 2.000 (1.999999881)
10.f / fastest_div_f(5.f)  = 2.000 (1.999511719)

10.f / 10.f                 = 1.000 (1.000000000)
10.f / normal_div_f(10.f)   = 1.000 (1.000000000)
10.f / sse_div_f(10.f)      = 1.000 (1.000000000)
10.f / fast_div_f(10.f)     = 1.000 (0.999999940)
10.f / semifast_div_f(10.f) = 1.000 (0.999999940)
10.f / fastest_div_f(10.f)  = 1.000 (0.999755859)

10.f / 100.f                 = 0.100 (0.100000001)
10.f / normal_div_f(100.f)   = 0.100 (0.100000001)
10.f / sse_div_f(100.f)      = 0.100 (0.100000001)
10.f / fast_div_f(100.f)     = 0.100 (0.099999994)
10.f / semifast_div_f(100.f) = 0.100 (0.099999994)
10.f / fastest_div_f(100.f)  = 0.100 (0.099983215)

10.f / 1000.f                 = 0.010 (0.010000000)
10.f / normal_div_f(1000.f)   = 0.010 (0.010000000)
10.f / sse_div_f(1000.f)      = 0.010 (0.010000000)
10.f / fast_div_f(1000.f)     = 0.010 (0.010000001)
10.f / semifast_div_f(1000.f) = 0.010 (0.010000001)
10.f / fastest_div_f(1000.f)  = 0.010 (0.009999275)

10.f / 10000.f                 = 0.001 (0.001000000)
10.f / normal_div_f(10000.f)   = 0.001 (0.001000000)
10.f / sse_div_f(10000.f)      = 0.001 (0.001000000)
10.f / fast_div_f(10000.f)     = 0.001 (0.001000000)
10.f / semifast_div_f(10000.f) = 0.001 (0.001000000)
10.f / fastest_div_f(10000.f)  = 0.001 (0.000999868)

10.f / 100000.f                 = 0.000 (0.000100000)
10.f / normal_div_f(100000.f)   = 0.000 (0.000100000)
10.f / sse_div_f(100000.f)      = 0.000 (0.000100000)
10.f / fast_div_f(100000.f)     = 0.000 (0.000100000)
10.f / semifast_div_f(100000.f) = 0.000 (0.000100000)
10.f / fastest_div_f(100000.f)  = 0.000 (0.000099987)

10.f / 1000000.f                 = 0.000 (0.000010000)
10.f / normal_div_f(1000000.f)   = 0.000 (0.000010000)
10.f / sse_div_f(1000000.f)      = 0.000 (0.000010000)
10.f / fast_div_f(1000000.f)     = 0.000 (0.000010000)
10.f / semifast_div_f(1000000.f) = 0.000 (0.000010000)
10.f / fastest_div_f(1000000.f)  = 0.000 (0.000010000)
--------------------------------------------------------------------------------
[ Test for fast sqrt ]

std::sqrt(1.f)     = 1.000 (1.000000000)
normal_sqrt(1.f)   = 1.000 (1.000000000)
sse_sqrt(1.f)      = 1.000 (1.000000000)
fast_sqrt(1.f)     = 1.000 (0.999755859)
semifast_sqrt(1.f) = 1.000 (0.999999940)

std::sqrt(2.f)     = 1.414 (1.414213538)
normal_sqrt(2.f)   = 1.414 (1.414213538)
sse_sqrt(2.f)      = 1.414 (1.414213538)
fast_sqrt(2.f)     = 1.414 (1.413818359)
semifast_sqrt(2.f) = 1.414 (1.414213419)

std::sqrt(3.f)     = 1.732 (1.732050776)
normal_sqrt(3.f)   = 1.732 (1.732050776)
sse_sqrt(3.f)      = 1.732 (1.732050776)
fast_sqrt(3.f)     = 1.732 (1.731811523)
semifast_sqrt(3.f) = 1.732 (1.732050776)

std::sqrt(4.f)     = 2.000 (2.000000000)
normal_sqrt(4.f)   = 2.000 (2.000000000)
sse_sqrt(4.f)      = 2.000 (2.000000000)
fast_sqrt(4.f)     = 2.000 (1.999511719)
semifast_sqrt(4.f) = 2.000 (1.999999881)

std::sqrt(5.f)     = 2.236 (2.236068010)
normal_sqrt(5.f)   = 2.236 (2.236068010)
sse_sqrt(5.f)      = 2.236 (2.236068010)
fast_sqrt(5.f)     = 2.236 (2.235717773)
semifast_sqrt(5.f) = 2.236 (2.236068010)

std::sqrt(10.f)     = 3.162 (3.162277699)
normal_sqrt(10.f)   = 3.162 (3.162277699)
sse_sqrt(10.f)      = 3.162 (3.162277699)
fast_sqrt(10.f)     = 3.162 (3.161621094)
semifast_sqrt(10.f) = 3.162 (3.162277699)

std::sqrt(100.f)     = 10.000 (10.000000000)
normal_sqrt(100.f)   = 10.000 (10.000000000)
sse_sqrt(100.f)      = 10.000 (10.000000000)
fast_sqrt(100.f)     = 9.999 (9.999084473)
semifast_sqrt(100.f) = 10.000 (10.000000000)

std::sqrt(1000.f)     = 31.623 (31.622776031)
normal_sqrt(1000.f)   = 31.623 (31.622776031)
sse_sqrt(1000.f)      = 31.623 (31.622776031)
fast_sqrt(1000.f)     = 31.616 (31.616210938)
semifast_sqrt(1000.f) = 31.623 (31.622774124)

std::sqrt(10000.f)     = 100.000 (100.000000000)
normal_sqrt(10000.f)   = 100.000 (100.000000000)
sse_sqrt(10000.f)      = 100.000 (100.000000000)
fast_sqrt(10000.f)     = 99.983 (99.983215332)
semifast_sqrt(10000.f) = 100.000 (100.000000000)

std::sqrt(100000.f)     = 316.228 (316.227752686)
normal_sqrt(100000.f)   = 316.228 (316.227752686)
sse_sqrt(100000.f)      = 316.228 (316.227752686)
fast_sqrt(100000.f)     = 316.238 (316.238403320)
semifast_sqrt(100000.f) = 316.228 (316.227752686)

std::sqrt(1000000.f)     = 1000.000 (1000.000000000)
normal_sqrt(1000000.f)   = 1000.000 (1000.000000000)
sse_sqrt(1000000.f)      = 1000.000 (1000.000000000)
fast_sqrt(1000000.f)     = 999.927 (999.927490234)
semifast_sqrt(1000000.f) = 1000.000 (1000.000061035)
--------------------------------------------------------------------------------
[ Test for performance of division : normal ] (1000 times division)
total = 1401.060180664 : time=0.000000000 sec
--------------------------------------------------------------------------------
[ Test for performance of division : sse ] (1000 times division)
total = 1401.060180664 : time=0.001000900 sec
--------------------------------------------------------------------------------
[ Test for performance of division : fast ] (1000 times division)
total = 1401.060180664 : time=0.000000000 sec
--------------------------------------------------------------------------------
[ Test for performance of division : semifast ] (1000 times division)
total = 1401.060180664 : time=0.001000900 sec
--------------------------------------------------------------------------------
[ Test for performance of division : fastest ] (1000 times division)
total = 1401.058105469 : time=0.000000000 sec
--------------------------------------------------------------------------------
[ Test for performance of sqrt : normal ] (1000 times sqrt)
total = 718.713745117 : time=0.001000800 sec
--------------------------------------------------------------------------------
[ Test for performance of sqrt : sse ] (1000 times sqrt)
total = 718.713745117 : time=0.000000000 sec
--------------------------------------------------------------------------------
[ Test for performance of sqrt : fast ] (1000 times sqrt)
total = 718.719116211 : time=0.000000000 sec
--------------------------------------------------------------------------------
[ Test for performance of sqrt : semifast ] (1000 times sqrt)
total = 718.713806152 : time=0.000000000 sec
