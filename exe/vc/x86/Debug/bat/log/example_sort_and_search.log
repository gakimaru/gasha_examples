============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=58 / record(s)=100]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=55 / record(s)=100]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=50 / record(s)=100]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=100]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=33 / record(s)=100]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=100]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=48 / record(s)=100]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.000000000 sec.
* Average time     = 0.000000000 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.000000000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.001000900 sec.
* Average time     = 0.000142986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000900 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001002300 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.001002300 sec.
* Average time     = 0.000143186 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001002300 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.001000900 sec.
* Average time     = 0.000142986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000900 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.001000900 sec.
* Average time     = 0.000142986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000900 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=100]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.001001100 sec.
* Average time     = 0.000143014 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001100 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2286 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2467 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2373 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=4851 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001500 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=195 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=3503 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 0.003002700 sec.
* Average time     = 0.000428957 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001500 sec.
* Total Swapped    =     15675 count(s)
* Average  Swapped =      2239 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      4851 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2286 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2467 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2373 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001002900 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=4851 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=195 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=3503 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 0.003004100 sec.
* Average time     = 0.000429157 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001002900 sec.
* Total Swapped    =     15675 count(s)
* Average  Swapped =      2239 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      4851 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000999400 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2286 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000999700 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2467 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2373 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=4851 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=195 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=3503 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.004000900 sec.
* Average time     = 0.000571557 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =     15675 count(s)
* Average  Swapped =      2239 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      4851 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=1154 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=1094 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=1090 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=364 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=1171 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=397 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=1175 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.001000900 sec.
* Average time     = 0.000142986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000900 sec.
* Total Swapped    =      6445 count(s)
* Average  Swapped =       920 count(s)
* Min Swapped      =       364 count(s)
* Max Swapped      =      1175 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=214 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=221 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=200 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=106 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=105 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=209 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.000000000 sec.
* Average time     = 0.000000000 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.000000000 sec.
* Total Swapped    =      1055 count(s)
* Average  Swapped =       150 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =       221 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2286 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2467 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=2373 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=4851 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=195 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=3503 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 0.004003900 sec.
* Average time     = 0.000571986 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =     15675 count(s)
* Average  Swapped =      2239 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      4851 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=174 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=185 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=177 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=33 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=83 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=34 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=211 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.001001100 sec.
* Average time     = 0.000143014 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001100 sec.
* Total Swapped    =       897 count(s)
* Average  Swapped =       128 count(s)
* Min Swapped      =        33 count(s)
* Max Swapped      =       211 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=94 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=92 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=96 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=83 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=90 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.002001800 sec.
* Average time     = 0.000285971 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000900 sec.
* Total Swapped    =       458 count(s)
* Average  Swapped =        65 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =        96 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=629 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=607 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=605 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=876 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=509 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=827 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=564 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.000000000 sec.
* Average time     = 0.000000000 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.000000000 sec.
* Total Swapped    =      4617 count(s)
* Average  Swapped =       659 count(s)
* Min Swapped      =       509 count(s)
* Max Swapped      =       876 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=94 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=93 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=95 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=99 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=99 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=91 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.002001800 sec.
* Average time     = 0.000285971 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000900 sec.
* Total Swapped    =       571 count(s)
* Average  Swapped =        81 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =        99 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=184 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=199 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=182 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=160 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=83 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=190 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.000000000 sec.
* Average time     = 0.000000000 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.000000000 sec.
* Total Swapped    =       998 count(s)
* Average  Swapped =       142 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =       199 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=247 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=257 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=252 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=275 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=102 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=240 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.001001100 sec.
* Average time     = 0.000143014 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001100 sec.
* Total Swapped    =      1373 count(s)
* Average  Swapped =       196 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =       275 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=139 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=146 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=153 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=56 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=8 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is NOT STABLE.
[swapped=171 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.000000000 sec.
* Average time     = 0.000000000 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.000000000 sec.
* Total Swapped    =       673 count(s)
* Average  Swapped =        96 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =       171 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=99 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=98 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=100 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=100 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=100]
Array is stable.
[swapped=99 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.000000000 sec.
* Average time     = 0.000000000 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.000000000 sec.
* Total Swapped    =       500 count(s)
* Average  Swapped =        71 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =       100 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 100 Count(s)
Total Array size   = 8000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.000000000/  0.000000000/  0.000000000/  0.000000000
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.001000900/  0.000142986/  0.000000000/  0.001000900
- std::sort(inline-func):   0.001002300/  0.000143186/  0.000000000/  0.001002300
- std::sort(functor):       0.001000900/  0.000142986/  0.000000000/  0.001000900
- std::sort(lambda):        0.001000900/  0.000142986/  0.000000000/  0.001000900
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.001001100/  0.000143014/  0.000000000/  0.001001100
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           0.003002700/  0.000428957/  0.000000000/  0.001001500      15675/       2239/          0/       4851
- Shaker sort<S>:           0.003004100/  0.000429157/  0.000000000/  0.001002900      15675/       2239/          0/       4851
- Odd-Even sort<S>:         0.004000900/  0.000571557/  0.000000000/  0.001001200      15675/       2239/          0/       4851
- Shear sort:               0.001000900/  0.000142986/  0.000000000/  0.001000900       6445/        920/        364/       1175
- Comb sort:                0.000000000/  0.000000000/  0.000000000/  0.000000000       1055/        150/          0/        221
- Gnome sort<S>:            0.004003900/  0.000571986/  0.000000000/  0.001001200      15675/       2239/          0/       4851
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.001001100/  0.000143014/  0.000000000/  0.001001100        897/        128/         33/        211
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.002001800/  0.000285971/  0.000000000/  0.001000900        458/         65/          0/         96
- Heap sort:                0.000000000/  0.000000000/  0.000000000/  0.000000000       4617/        659/        509/        876
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.002001800/  0.000285971/  0.000000000/  0.001000900        571/         81/          0/         99
- Shell sort:               0.000000000/  0.000000000/  0.000000000/  0.000000000        998/        142/          0/        199
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.001001100/  0.000143014/  0.000000000/  0.001001100       1373/        196/          0/        275
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.000000000/  0.000000000/  0.000000000/  0.000000000        673/         96/          0/        171
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.000000000/  0.000000000/  0.000000000/  0.000000000        500/         71/          0/        100
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=139)
(result1=139)
(result3=139)
(result4=139)
(result5=139)
(result6=139)
(result8=139)
(result9=139)
(result10=139)
(result11=168)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
    (data10_def=00000000)
    (data11_def=00000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=00F3C8B0)
    (data1_def=00F3C8B0)
    (data2_def=00F3C8B0)
    (data3_def=00F3C8B0)
    (data4_def=00F3C8B0)
    (data5_def=00F3C8B0)
    (data8_def=00F3C8B0)
    (data9_def=00F3C8B0)
    (data10_def=00F3C8B0)
    (data11_def=00F3C8B0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00F3C8B0)
    (data1=00F3C8B0)
    (data2=00F3C8B0)
    (data3=00F3C8B0)
    (data4=00F3C8B0)
    (data5=00F3C8B0)
    (data8=00F3C8B0)
    (data9=00F3C8B0)
    (data10=00F3C8B0)
    (data11=00F3C8B0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00F3C8B0)
    (data1_val=00F3C8B0)
    (data2_val=00F3C8B0)
    (data3_val=00F3C8B0)
    (data4_val=00F3C8B0)
    (data5_val=00F3C8B0)
    (data8_val=00F3C8B0)
    (data9_val=00F3C8B0)
    (data10_val=00F3C8B0)
    (data11_val=00F3C8B0)
target=0, linearSearch=[0, 28]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=00F3C7C0)
    (data1_def=00F3C7C0)
    (data2_def=00F3C7C0)
    (data3_def=00F3C7C0)
    (data4_def=00F3C7C0)
    (data5_def=00F3C7C0)
    (data8_def=00F3C7C0)
    (data9_def=00F3C7C0)
    (data10_def=00F3C7C0)
    (data11_def=00F3C7C0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00F3C7C0)
    (data1=00F3C7C0)
    (data2=00F3C7C0)
    (data3=00F3C7C0)
    (data4=00F3C7C0)
    (data5=00F3C7C0)
    (data8=00F3C7C0)
    (data9=00F3C7C0)
    (data10=00F3C7C0)
    (data11=00F3C7C0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00F3C7C0)
    (data1_val=00F3C7C0)
    (data2_val=00F3C7C0)
    (data3_val=00F3C7C0)
    (data4_val=00F3C7C0)
    (data5_val=00F3C7C0)
    (data8_val=00F3C7C0)
    (data9_val=00F3C7C0)
    (data10_val=00F3C7C0)
    (data11_val=00F3C7C0)
target=2, linearSearch=[2, 25]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=00F3C810)
    (data1_def=00F3C810)
    (data2_def=00F3C810)
    (data3_def=00F3C810)
    (data4_def=00F3C810)
    (data5_def=00F3C810)
    (data8_def=00F3C810)
    (data9_def=00F3C810)
    (data10_def=00F3C810)
    (data11_def=00F3C810)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00F3C810)
    (data1=00F3C810)
    (data2=00F3C810)
    (data3=00F3C810)
    (data4=00F3C810)
    (data5=00F3C810)
    (data8=00F3C810)
    (data9=00F3C810)
    (data10=00F3C810)
    (data11=00F3C810)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00F3C810)
    (data1_val=00F3C810)
    (data2_val=00F3C810)
    (data3_val=00F3C810)
    (data4_val=00F3C810)
    (data5_val=00F3C810)
    (data8_val=00F3C810)
    (data9_val=00F3C810)
    (data10_val=00F3C810)
    (data11_val=00F3C810)
target=6, linearSearch=[6, 26]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=00F3C630)
    (data1_def=00F3C630)
    (data2_def=00F3C630)
    (data3_def=00F3C630)
    (data4_def=00F3C630)
    (data5_def=00F3C630)
    (data8_def=00F3C630)
    (data9_def=00F3C630)
    (data10_def=00F3C630)
    (data11_def=00F3C630)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00F3C630)
    (data1=00F3C630)
    (data2=00F3C630)
    (data3=00F3C630)
    (data4=00F3C630)
    (data5=00F3C630)
    (data8=00F3C630)
    (data9=00F3C630)
    (data10=00F3C630)
    (data11=00F3C630)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00F3C630)
    (data1_val=00F3C630)
    (data2_val=00F3C630)
    (data3_val=00F3C630)
    (data4_val=00F3C630)
    (data5_val=00F3C630)
    (data8_val=00F3C630)
    (data9_val=00F3C630)
    (data10_val=00F3C630)
    (data11_val=00F3C630)
target=14, linearSearch=[14, 20]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=00F3C900)
    (data1_def=00F3C900)
    (data2_def=00F3C900)
    (data3_def=00F3C900)
    (data4_def=00F3C900)
    (data5_def=00F3C900)
    (data8_def=00F3C900)
    (data9_def=00F3C900)
    (data10_def=00F3C900)
    (data11_def=00F3C900)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00F3C900)
    (data1=00F3C900)
    (data2=00F3C900)
    (data3=00F3C900)
    (data4=00F3C900)
    (data5=00F3C900)
    (data8=00F3C900)
    (data9=00F3C900)
    (data10=00F3C900)
    (data11=00F3C900)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00F3C900)
    (data1_val=00F3C900)
    (data2_val=00F3C900)
    (data3_val=00F3C900)
    (data4_val=00F3C900)
    (data5_val=00F3C900)
    (data8_val=00F3C900)
    (data9_val=00F3C900)
    (data10_val=00F3C900)
    (data11_val=00F3C900)
target=30, linearSearch=[30, 29]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
    (data10_def=00000000)
    (data11_def=00000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=62, linearSearch=nullptr
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
    (data10_def=00000000)
    (data11_def=00000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=126, linearSearch=nullptr
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
    (data10_def=00000000)
    (data11_def=00000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=254, linearSearch=nullptr

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
   (data10_def=00000000)
    (data11_def=00000000)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=00F3BFF0)
    (data1_def=00F3BFF0)
    (data2_def=00F3BFF0)
    (data3_def=00F3BFF0)
    (data4_def=00F3BFF0)
    (data5_def=00F3BFF0)
    (data8_def=00F3BFF0)
    (data9_def=00F3BFF0)
   (data10_def=00F3BFF0)
    (data11_def=00F3BFF0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00F3BFF0)
    (data1=00F3BFF0)
    (data2=00F3BFF0)
    (data3=00F3BFF0)
    (data4=00F3BFF0)
    (data5=00F3BFF0)
    (data8=00F3BFF0)
    (data9=00F3BFF0)
    (data10=00F3BFF0)
    (data11=00F3BFF0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00F3BFF0)
    (data1_val=00F3BFF0)
    (data2_val=00F3BFF0)
    (data3_val=00F3BFF0)
    (data4_val=00F3BFF0)
    (data5_val=00F3BFF0)
    (data8_val=00F3BFF0)
    (data9_val=00F3BFF0)
    (data10_val=00F3BFF0)
    (data11_val=00F3BFF0)
target=0, binarySearch=[0, 35]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=00F3C1D0)
    (data1_def=00F3C1D0)
    (data2_def=00F3C1D0)
    (data3_def=00F3C1D0)
    (data4_def=00F3C1D0)
    (data5_def=00F3C1D0)
    (data8_def=00F3C1D0)
    (data9_def=00F3C1D0)
   (data10_def=00F3C1D0)
    (data11_def=00F3C1D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00F3C1D0)
    (data1=00F3C1D0)
    (data2=00F3C1D0)
    (data3=00F3C1D0)
    (data4=00F3C1D0)
    (data5=00F3C1D0)
    (data8=00F3C1D0)
    (data9=00F3C1D0)
    (data10=00F3C1D0)
    (data11=00F3C1D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00F3C1D0)
    (data1_val=00F3C1D0)
    (data2_val=00F3C1D0)
    (data3_val=00F3C1D0)
    (data4_val=00F3C1D0)
    (data5_val=00F3C1D0)
    (data8_val=00F3C1D0)
    (data9_val=00F3C1D0)
    (data10_val=00F3C1D0)
    (data11_val=00F3C1D0)
target=2, binarySearch=[2, 97]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=00F3C590)
    (data1_def=00F3C590)
    (data2_def=00F3C590)
    (data3_def=00F3C590)
    (data4_def=00F3C590)
    (data5_def=00F3C590)
    (data8_def=00F3C590)
    (data9_def=00F3C590)
   (data10_def=00F3C590)
    (data11_def=00F3C590)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00F3C590)
    (data1=00F3C590)
    (data2=00F3C590)
    (data3=00F3C590)
    (data4=00F3C590)
    (data5=00F3C590)
    (data8=00F3C590)
    (data9=00F3C590)
    (data10=00F3C590)
    (data11=00F3C590)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00F3C590)
    (data1_val=00F3C590)
    (data2_val=00F3C590)
    (data3_val=00F3C590)
    (data4_val=00F3C590)
    (data5_val=00F3C590)
    (data8_val=00F3C590)
    (data9_val=00F3C590)
    (data10_val=00F3C590)
    (data11_val=00F3C590)
target=6, binarySearch=[6, 48]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=00F3CD10)
    (data1_def=00F3CD10)
    (data2_def=00F3CD10)
    (data3_def=00F3CD10)
    (data4_def=00F3CD10)
    (data5_def=00F3CD10)
    (data8_def=00F3CD10)
    (data9_def=00F3CD10)
   (data10_def=00F3CD10)
    (data11_def=00F3CD10)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00F3CD10)
    (data1=00F3CD10)
    (data2=00F3CD10)
    (data3=00F3CD10)
    (data4=00F3CD10)
    (data5=00F3CD10)
    (data8=00F3CD10)
    (data9=00F3CD10)
    (data10=00F3CD10)
    (data11=00F3CD10)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00F3CD10)
    (data1_val=00F3CD10)
    (data2_val=00F3CD10)
    (data3_val=00F3CD10)
    (data4_val=00F3CD10)
    (data5_val=00F3CD10)
    (data8_val=00F3CD10)
    (data9_val=00F3CD10)
    (data10_val=00F3CD10)
    (data11_val=00F3CD10)
target=14, binarySearch=[14, 81]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=00F3DC10)
    (data1_def=00F3DC10)
    (data2_def=00F3DC10)
    (data3_def=00F3DC10)
    (data4_def=00F3DC10)
    (data5_def=00F3DC10)
    (data8_def=00F3DC10)
    (data9_def=00F3DC10)
   (data10_def=00F3DC10)
    (data11_def=00F3DC10)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00F3DC10)
    (data1=00F3DC10)
    (data2=00F3DC10)
    (data3=00F3DC10)
    (data4=00F3DC10)
    (data5=00F3DC10)
    (data8=00F3DC10)
    (data9=00F3DC10)
    (data10=00F3DC10)
    (data11=00F3DC10)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00F3DC10)
    (data1_val=00F3DC10)
    (data2_val=00F3DC10)
    (data3_val=00F3DC10)
    (data4_val=00F3DC10)
    (data5_val=00F3DC10)
    (data8_val=00F3DC10)
    (data9_val=00F3DC10)
    (data10_val=00F3DC10)
    (data11_val=00F3DC10)
target=30, binarySearch=[30, 37]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
   (data10_def=00000000)
    (data11_def=00000000)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=62, binarySearch=nullptr
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
   (data10_def=00000000)
    (data11_def=00000000)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=126, binarySearch=nullptr
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
   (data10_def=00000000)
    (data11_def=00000000)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=254, binarySearch=nullptr
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=0.039035200 sec.
