============================================================
Initialize
============================================================
----- Make Array(shuffle1) -----
[NG] Array is NOT ordered! [NG=488 / record(s)=1000]
Array is stable.
----- Make Array(shuffle2) -----
[NG] Array is NOT ordered! [NG=499 / record(s)=1000]
Array is stable.
----- Make Array(shuffle3) -----
[NG] Array is NOT ordered! [NG=494 / record(s)=1000]
Array is stable.
----- Make Array(ordered) -----
Array is ordered. [record(s)=1000]
Array is stable.
----- Make Array(reversed) -----
[NG] Array is NOT ordered! [NG=333 / record(s)=1000]
Array is stable.
----- Make Array(ordered_without_both_ends) -----
[NG] Array is NOT ordered! [NG=2 / record(s)=1000]
Array is stable.
----- Make Array(hard_with_quick_sort) -----
[NG] Array is NOT ordered! [NG=507 / record(s)=1000]
Array is stable.


============================================================
Sort type: [C-Library qsort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

============================================================
Sort type: [C-Library qsort]
* Total time       = 0.005005000 sec.
* Average time     = 0.000715000 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
============================================================


============================================================
Sort type: [STL std::sort(with function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.003002900 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=1000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with function)]
* Total time       = 0.012011400 sec.
* Average time     = 0.001715914 sec.
* Min time         = 0.001000800 sec.
* Max time         = 0.003002900 sec.
============================================================


============================================================
Sort type: [STL std::sort(with inline function)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002003000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002002000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=1000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with inline function)]
* Total time       = 0.011011400 sec.
* Average time     = 0.001573057 sec.
* Min time         = 0.001000600 sec.
* Max time         = 0.002003000 sec.
============================================================


============================================================
Sort type: [STL std::sort(with functor)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002001200 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.003002600 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=1000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.002002900 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with functor)]
* Total time       = 0.013012100 sec.
* Average time     = 0.001858871 sec.
* Min time         = 0.001000300 sec.
* Max time         = 0.003002600 sec.
============================================================


============================================================
Sort type: [STL std::sort(with lamda)]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002001400 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002000600 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002002900 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=1000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000993200 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.

============================================================
Sort type: [STL std::sort(with lamda)]
* Total time       = 0.011001700 sec.
* Average time     = 0.001571671 sec.
* Min time         = 0.000993200 sec.
* Max time         = 0.002002900 sec.
============================================================


============================================================
Sort type: [STL std::stable_sort *Not inplace]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=1000]
Array is stable.

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.003002300 sec.
Array is ordered. [record(s)=1000]
Array is stable.

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=1000]
Array is stable.

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.003003600 sec.
Array is ordered. [record(s)=1000]
Array is stable.

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=1000]
Array is stable.

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.003002900 sec.
Array is ordered. [record(s)=1000]
Array is stable.

============================================================
Sort type: [STL std::stable_sort *Not inplace]
* Total time       = 0.014013300 sec.
* Average time     = 0.002001900 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.003003600 sec.
============================================================


============================================================
Sort type: [Bubble sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.048045700 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=247900 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.048045400 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=244992 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.054052500 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=251557 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.117109600 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=498501 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.011010600 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=1995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.064060900 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=373277 count(s)]

============================================================
Sort type: [Bubble sort]
* Total time       = 0.342324700 sec.
* Average time     = 0.048903529 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.117109600 sec.
* Total Swapped    =   1618222 count(s)
* Average  Swapped =    231174 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =    498501 count(s)
============================================================


============================================================
Sort type: [Shaker sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.044042800 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=247900 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.044042200 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=244992 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.052049300 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=251557 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.103098100 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=498501 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=1995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.067063900 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=373277 count(s)]

============================================================
Sort type: [Shaker sort]
* Total time       = 0.310296300 sec.
* Average time     = 0.044328043 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.103098100 sec.
* Total Swapped    =   1618222 count(s)
* Average  Swapped =    231174 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =    498501 count(s)
============================================================


============================================================
Sort type: [Odd-Even sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.021019000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=247900 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.019017900 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=244992 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.020019000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=251557 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.036034000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=498501 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.008007900 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=1995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.027025800 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=373277 count(s)]

============================================================
Sort type: [Odd-Even sort]
* Total time       = 0.131123600 sec.
* Average time     = 0.018731943 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.036034000 sec.
* Total Swapped    =   1618222 count(s)
* Average  Swapped =    231174 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =    498501 count(s)
============================================================


============================================================
Sort type: [Shear sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.004003800 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=48827 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.004003800 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=48914 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.004003800 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=49588 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=14850 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.003002600 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=43102 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=16789 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.003002900 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=48619 count(s)]

============================================================
Sort type: [Shear sort]
* Total time       = 0.021020200 sec.
* Average time     = 0.003002886 sec.
* Min time         = 0.001001200 sec.
* Max time         = 0.004003800 sec.
* Total Swapped    =    270689 count(s)
* Average  Swapped =     38669 count(s)
* Min Swapped      =     14850 count(s)
* Max Swapped      =     49588 count(s)
============================================================


============================================================
Sort type: [Comb sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=3949 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=3942 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002002100 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=3917 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=1401 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=754 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=4108 count(s)]

============================================================
Sort type: [Comb sort]
* Total time       = 0.009008200 sec.
* Average time     = 0.001286886 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.002002100 sec.
* Total Swapped    =     18071 count(s)
* Average  Swapped =      2581 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      4108 count(s)
============================================================


============================================================
Sort type: [Gnome sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.067063900 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=247900 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.071068300 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=244992 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.053050400 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=251557 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.083080300 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=498501 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=1995 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.063059200 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=373277 count(s)]

============================================================
Sort type: [Gnome sort]
* Total time       = 0.338322900 sec.
* Average time     = 0.048331843 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.083080300 sec.
* Total Swapped    =   1618222 count(s)
* Average  Swapped =    231174 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =    498501 count(s)
============================================================


============================================================
Sort type: [Quick sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=2538 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=2552 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=2597 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001001100 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=333 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=833 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.001000300 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=334 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001200 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=2827 count(s)]

============================================================
Sort type: [Quick sort]
* Total time       = 0.006005600 sec.
* Average time     = 0.000857943 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001200 sec.
* Total Swapped    =     12014 count(s)
* Average  Swapped =      1716 count(s)
* Min Swapped      =       333 count(s)
* Max Swapped      =      2827 count(s)
============================================================


============================================================
Sort type: [Selection sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.011010800 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=993 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.012012000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=987 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.011009700 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=995 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.011010300 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.011011700 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=833 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.012010800 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=3 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.011010300 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=994 count(s)]

============================================================
Sort type: [Selection sort]
* Total time       = 0.079075600 sec.
* Average time     = 0.011296514 sec.
* Min time         = 0.011009700 sec.
* Max time         = 0.012012000 sec.
* Total Swapped    =      4805 count(s)
* Average  Swapped =       686 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =       995 count(s)
============================================================


============================================================
Sort type: [Heap sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.002001700 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=9605 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.002002400 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=9644 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.002002300 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=9619 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.003002900 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=15116 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=8312 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.003003200 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=14570 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.002001800 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=8926 count(s)]

============================================================
Sort type: [Heap sort]
* Total time       = 0.016016100 sec.
* Average time     = 0.002288014 sec.
* Min time         = 0.002001700 sec.
* Max time         = 0.003003200 sec.
* Total Swapped    =     75792 count(s)
* Average  Swapped =     10827 count(s)
* Min Swapped      =      8312 count(s)
* Max Swapped      =     15116 count(s)
============================================================


============================================================
Sort type: [Insertion sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.014013200 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=989 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.013010500 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=988 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.013014400 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=993 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.027025400 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=999 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=999 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.024022900 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=994 count(s)]

============================================================
Sort type: [Insertion sort]
* Total time       = 0.091086400 sec.
* Average time     = 0.013012343 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.027025400 sec.
* Total Swapped    =      5962 count(s)
* Average  Swapped =       851 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =       999 count(s)
============================================================


============================================================
Sort type: [Shell sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=3268 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=3343 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=3339 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=2652 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=704 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001001700 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=3428 count(s)]

============================================================
Sort type: [Shell sort]
* Total time       = 0.005004600 sec.
* Average time     = 0.000714943 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001001700 sec.
* Total Swapped    =     16734 count(s)
* Average  Swapped =      2390 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      3428 count(s)
============================================================


============================================================
Sort type: [Inplace Merge sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.010009700 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=4278 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.009008500 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=4290 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.009008500 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=4295 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.017016100 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=4516 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=1006 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.013012300 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=4303 count(s)]

============================================================
Sort type: [Inplace Merge sort]
* Total time       = 0.058055100 sec.
* Average time     = 0.008293586 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.017016100 sec.
* Total Swapped    =     22688 count(s)
* Average  Swapped =      3241 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      4516 count(s)
============================================================


============================================================
Sort type: [Intro sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=2296 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=2321 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=2327 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.001000800 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=576 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=78 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000600 sec.
Array is ordered. [record(s)=1000]
Array is NOT STABLE.
[swapped=2578 count(s)]

============================================================
Sort type: [Intro sort]
* Total time       = 0.003002300 sec.
* Average time     = 0.000428900 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001000900 sec.
* Total Swapped    =     10176 count(s)
* Average  Swapped =      1453 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      2578 count(s)
============================================================


============================================================
Sort type: [Radix sort]
============================================================

------------------------------
Sort array(shuffle1)
------------------------------
*elapsed time=0.001006200 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=1000 count(s)]

------------------------------
Sort array(shuffle2)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=999 count(s)]

------------------------------
Sort array(shuffle3)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=1000 count(s)]

------------------------------
Sort array(ordered)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=0 count(s)]

------------------------------
Sort array(reversed)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=1000 count(s)]

------------------------------
Sort array(ordered_without_both_ends)
------------------------------
*elapsed time=0.000000000 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=4 count(s)]

------------------------------
Sort array(hard_with_quick_sort)
------------------------------
*elapsed time=0.001000900 sec.
Array is ordered. [record(s)=1000]
Array is stable.
[swapped=999 count(s)]

============================================================
Sort type: [Radix sort]
* Total time       = 0.003008000 sec.
* Average time     = 0.000429714 sec.
* Min time         = 0.000000000 sec.
* Max time         = 0.001006200 sec.
* Total Swapped    =      5002 count(s)
* Average  Swapped =       714 count(s)
* Min Swapped      =         0 count(s)
* Max Swapped      =      1000 count(s)
============================================================


============================================================
Result(Summary)
============================================================
Array Element size = 80 Bytes
Array Element(s)   = 1000 Count(s)
Total Array size   = 80000 Bytes
--------------------------------------------------------------------------------------------------------------------------------
- Sort name:                Elapsed Time (Sum/Average/Min/Max) [sec.]             Swapped (Sum/Average/Min/Max) [count(s)]
--------------------------------------------------------------------------------------------------------------------------------
[C-Library sort](Quick sort)
- qsort(inline-function):   0.005005000/  0.000715000/  0.000000000/  0.001001200
--------------------------------------------------------------------------------------------------------------------------------
[STL sort](Intro sort)
- std::sort(function):      0.012011400/  0.001715914/  0.001000800/  0.003002900
- std::sort(inline-func):   0.011011400/  0.001573057/  0.001000600/  0.002003000
- std::sort(functor):       0.013012100/  0.001858871/  0.001000300/  0.003002600
- std::sort(lambda):        0.011001700/  0.001571671/  0.000993200/  0.002002900
--------------------------------------------------------------------------------------------------------------------------------
[STL stable sort](Merge sort) *Not In-place sort
- std::stable_sort<S>:      0.014013300/  0.002001900/  0.000000000/  0.003003600
--------------------------------------------------------------------------------------------------------------------------------
[Exchange sorts]
- Bubble sort<S>:           0.342324700/  0.048903529/  0.000000000/  0.117109600    1618222/     231174/          0/     498501
- Shaker sort<S>:           0.310296300/  0.044328043/  0.000000000/  0.103098100    1618222/     231174/          0/     498501
- Odd-Even sort<S>:         0.131123600/  0.018731943/  0.000000000/  0.036034000    1618222/     231174/          0/     498501
- Shear sort:               0.021020200/  0.003002886/  0.001001200/  0.004003800     270689/      38669/      14850/      49588
- Comb sort:                0.009008200/  0.001286886/  0.000000000/  0.002002100      18071/       2581/          0/       4108
- Gnome sort<S>:            0.338322900/  0.048331843/  0.000000000/  0.083080300    1618222/     231174/          0/     498501
--------------------------------------------------------------------------------------------------------------------------------
[Partition-exchange sorts]
- Quick sort:               0.006005600/  0.000857943/  0.000000000/  0.001001200      12014/       1716/        333/       2827
--------------------------------------------------------------------------------------------------------------------------------
[Selection sorts]
- Selection sort:           0.079075600/  0.011296514/  0.011009700/  0.012012000       4805/        686/          0/        995
- Heap sort:                0.016016100/  0.002288014/  0.002001700/  0.003003200      75792/      10827/       8312/      15116
--------------------------------------------------------------------------------------------------------------------------------
[Insertion sorts]
- Insertion sort<S>:        0.091086400/  0.013012343/  0.000000000/  0.027025400       5962/        851/          0/        999
- Shell sort:               0.005004600/  0.000714943/  0.000000000/  0.001001700      16734/       2390/          0/       3428
--------------------------------------------------------------------------------------------------------------------------------
[Merge sorts]
- Inplace-Merge sort<S>:    0.058055100/  0.008293586/  0.000000000/  0.017016100      22688/       3241/          0/       4516
--------------------------------------------------------------------------------------------------------------------------------
[Hybrid sorts]
- Intro sort:               0.003002300/  0.000428900/  0.000000000/  0.001000900      10176/       1453/          0/       2578
--------------------------------------------------------------------------------------------------------------------------------
[Distribution sorts] *Not In-place sort
- Radix sort<S>:            0.003008000/  0.000429714/  0.000000000/  0.001006200       5002/        714/          0/       1000
--------------------------------------------------------------------------------------------------------------------------------
* <S> ... Stable sort algorithm.

--------------------------------------------------------------------------------------------------------------------------------
Functoin variation test for sort and search.
--------------------------------------------------------------------------------------------------------------------------------

[Variation test for sort(intro-sort)]
(result=2296)
(result1=2296)
(result3=2296)
(result4=2296)
(result5=2296)
(result6=2296)
(result8=2296)
(result9=2296)
(result10=2296)
(result11=2316)

[Variation test for linear-search]
target=-1
  linearSearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
    (data10_def=00000000)
    (data11_def=00000000)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, linearSearch=nullptr
target=0
  linearSearchValue(*array_shuffle1, target);
    (data_def=00471EF0)
    (data1_def=00471EF0)
    (data2_def=00471EF0)
    (data3_def=00471EF0)
    (data4_def=00471EF0)
    (data5_def=00471EF0)
    (data8_def=00471EF0)
    (data9_def=00471EF0)
    (data10_def=00471EF0)
    (data11_def=00471EF0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00471EF0)
    (data1=00471EF0)
    (data2=00471EF0)
    (data3=00471EF0)
    (data4=00471EF0)
    (data5=00471EF0)
    (data8=00471EF0)
    (data9=00471EF0)
    (data10=00471EF0)
    (data11=00471EF0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00471EF0)
    (data1_val=00471EF0)
    (data2_val=00471EF0)
    (data3_val=00471EF0)
    (data4_val=00471EF0)
    (data5_val=00471EF0)
    (data8_val=00471EF0)
    (data9_val=00471EF0)
    (data10_val=00471EF0)
    (data11_val=00471EF0)
target=0, linearSearch=[0, 304]
target=2
  linearSearchValue(*array_shuffle1, target);
    (data_def=00471540)
    (data1_def=00471540)
    (data2_def=00471540)
    (data3_def=00471540)
    (data4_def=00471540)
    (data5_def=00471540)
    (data8_def=00471540)
    (data9_def=00471540)
    (data10_def=00471540)
    (data11_def=00471540)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00471540)
    (data1=00471540)
    (data2=00471540)
    (data3=00471540)
    (data4=00471540)
    (data5=00471540)
    (data8=00471540)
    (data9=00471540)
    (data10=00471540)
    (data11=00471540)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00471540)
    (data1_val=00471540)
    (data2_val=00471540)
    (data3_val=00471540)
    (data4_val=00471540)
    (data5_val=00471540)
    (data8_val=00471540)
    (data9_val=00471540)
    (data10_val=00471540)
    (data11_val=00471540)
target=2, linearSearch=[2, 273]
target=6
  linearSearchValue(*array_shuffle1, target);
    (data_def=00472B20)
    (data1_def=00472B20)
    (data2_def=00472B20)
    (data3_def=00472B20)
    (data4_def=00472B20)
    (data5_def=00472B20)
    (data8_def=00472B20)
    (data9_def=00472B20)
    (data10_def=00472B20)
    (data11_def=00472B20)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00472B20)
    (data1=00472B20)
    (data2=00472B20)
    (data3=00472B20)
    (data4=00472B20)
    (data5=00472B20)
    (data8=00472B20)
    (data9=00472B20)
    (data10=00472B20)
    (data11=00472B20)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00472B20)
    (data1_val=00472B20)
    (data2_val=00472B20)
    (data3_val=00472B20)
    (data4_val=00472B20)
    (data5_val=00472B20)
    (data8_val=00472B20)
    (data9_val=00472B20)
    (data10_val=00472B20)
    (data11_val=00472B20)
target=6, linearSearch=[6, 343]
target=14
  linearSearchValue(*array_shuffle1, target);
    (data_def=0046C630)
    (data1_def=0046C630)
    (data2_def=0046C630)
    (data3_def=0046C630)
    (data4_def=0046C630)
    (data5_def=0046C630)
    (data8_def=0046C630)
    (data9_def=0046C630)
    (data10_def=0046C630)
    (data11_def=0046C630)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0046C630)
    (data1=0046C630)
    (data2=0046C630)
    (data3=0046C630)
    (data4=0046C630)
    (data5=0046C630)
    (data8=0046C630)
    (data9=0046C630)
    (data10=0046C630)
    (data11=0046C630)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0046C630)
    (data1_val=0046C630)
    (data2_val=0046C630)
    (data3_val=0046C630)
    (data4_val=0046C630)
    (data5_val=0046C630)
    (data8_val=0046C630)
    (data9_val=0046C630)
    (data10_val=0046C630)
    (data11_val=0046C630)
target=14, linearSearch=[14, 20]
target=30
  linearSearchValue(*array_shuffle1, target);
    (data_def=00474560)
    (data1_def=00474560)
    (data2_def=00474560)
    (data3_def=00474560)
    (data4_def=00474560)
    (data5_def=00474560)
    (data8_def=00474560)
    (data9_def=00474560)
    (data10_def=00474560)
    (data11_def=00474560)
  linearSearch(*array_shuffle1, search_predicate);
    (data=00474560)
    (data1=00474560)
    (data2=00474560)
    (data3=00474560)
    (data4=00474560)
    (data5=00474560)
    (data8=00474560)
    (data9=00474560)
    (data10=00474560)
    (data11=00474560)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=00474560)
    (data1_val=00474560)
    (data2_val=00474560)
    (data3_val=00474560)
    (data4_val=00474560)
    (data5_val=00474560)
    (data8_val=00474560)
    (data9_val=00474560)
    (data10_val=00474560)
    (data11_val=00474560)
target=30, linearSearch=[30, 427]
target=62
  linearSearchValue(*array_shuffle1, target);
    (data_def=004783E0)
    (data1_def=004783E0)
    (data2_def=004783E0)
    (data3_def=004783E0)
    (data4_def=004783E0)
    (data5_def=004783E0)
    (data8_def=004783E0)
    (data9_def=004783E0)
    (data10_def=004783E0)
    (data11_def=004783E0)
  linearSearch(*array_shuffle1, search_predicate);
    (data=004783E0)
    (data1=004783E0)
    (data2=004783E0)
    (data3=004783E0)
    (data4=004783E0)
    (data5=004783E0)
    (data8=004783E0)
    (data9=004783E0)
    (data10=004783E0)
    (data11=004783E0)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=004783E0)
    (data1_val=004783E0)
    (data2_val=004783E0)
    (data3_val=004783E0)
    (data4_val=004783E0)
    (data5_val=004783E0)
    (data8_val=004783E0)
    (data9_val=004783E0)
    (data10_val=004783E0)
    (data11_val=004783E0)
target=62, linearSearch=[62, 627]
target=126
  linearSearchValue(*array_shuffle1, target);
    (data_def=0046FB00)
    (data1_def=0046FB00)
    (data2_def=0046FB00)
    (data3_def=0046FB00)
    (data4_def=0046FB00)
    (data5_def=0046FB00)
    (data8_def=0046FB00)
    (data9_def=0046FB00)
    (data10_def=0046FB00)
    (data11_def=0046FB00)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0046FB00)
    (data1=0046FB00)
    (data2=0046FB00)
    (data3=0046FB00)
    (data4=0046FB00)
    (data5=0046FB00)
    (data8=0046FB00)
    (data9=0046FB00)
    (data10=0046FB00)
    (data11=0046FB00)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0046FB00)
    (data1_val=0046FB00)
    (data2_val=0046FB00)
    (data3_val=0046FB00)
    (data4_val=0046FB00)
    (data5_val=0046FB00)
    (data8_val=0046FB00)
    (data9_val=0046FB00)
    (data10_val=0046FB00)
    (data11_val=0046FB00)
target=126, linearSearch=[126, 189]
target=254
  linearSearchValue(*array_shuffle1, target);
    (data_def=0046F150)
    (data1_def=0046F150)
    (data2_def=0046F150)
    (data3_def=0046F150)
    (data4_def=0046F150)
    (data5_def=0046F150)
    (data8_def=0046F150)
    (data9_def=0046F150)
    (data10_def=0046F150)
    (data11_def=0046F150)
  linearSearch(*array_shuffle1, search_predicate);
    (data=0046F150)
    (data1=0046F150)
    (data2=0046F150)
    (data3=0046F150)
    (data4=0046F150)
    (data5=0046F150)
    (data8=0046F150)
    (data9=0046F150)
    (data10=0046F150)
    (data11=0046F150)
  linearSearchValue(*array_shuffle1, target, search_predicate_val);
    (data_val=0046F150)
    (data1_val=0046F150)
    (data2_val=0046F150)
    (data3_val=0046F150)
    (data4_val=0046F150)
    (data5_val=0046F150)
    (data8_val=0046F150)
    (data9_val=0046F150)
    (data10_val=0046F150)
    (data11_val=0046F150)
target=254, linearSearch=[254, 158]

[Variation test for binary-search]
target=-1
  binarySearchValue(*array_shuffle1, target);
    (data_def=00000000)
    (data1_def=00000000)
    (data2_def=00000000)
    (data3_def=00000000)
    (data4_def=00000000)
    (data5_def=00000000)
    (data8_def=00000000)
    (data9_def=00000000)
   (data10_def=00000000)
    (data11_def=00000000)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00000000)
    (data1=00000000)
    (data2=00000000)
    (data3=00000000)
    (data4=00000000)
    (data5=00000000)
    (data8=00000000)
    (data9=00000000)
    (data10=00000000)
    (data11=00000000)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00000000)
    (data1_val=00000000)
    (data2_val=00000000)
    (data3_val=00000000)
    (data4_val=00000000)
    (data5_val=00000000)
    (data8_val=00000000)
    (data9_val=00000000)
    (data10_val=00000000)
    (data11_val=00000000)
target=-1, binarySearch=nullptr
target=0
  binarySearchValue(*array_shuffle1, target);
    (data_def=0046BFF0)
    (data1_def=0046BFF0)
    (data2_def=0046BFF0)
    (data3_def=0046BFF0)
    (data4_def=0046BFF0)
    (data5_def=0046BFF0)
    (data8_def=0046BFF0)
    (data9_def=0046BFF0)
   (data10_def=0046BFF0)
    (data11_def=0046BFF0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0046BFF0)
    (data1=0046BFF0)
    (data2=0046BFF0)
    (data3=0046BFF0)
    (data4=0046BFF0)
    (data5=0046BFF0)
    (data8=0046BFF0)
    (data9=0046BFF0)
    (data10=0046BFF0)
    (data11=0046BFF0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0046BFF0)
    (data1_val=0046BFF0)
    (data2_val=0046BFF0)
    (data3_val=0046BFF0)
    (data4_val=0046BFF0)
    (data5_val=0046BFF0)
    (data8_val=0046BFF0)
    (data9_val=0046BFF0)
    (data10_val=0046BFF0)
    (data11_val=0046BFF0)
target=0, binarySearch=[0, 471]
target=2
  binarySearchValue(*array_shuffle1, target);
    (data_def=0046C1D0)
    (data1_def=0046C1D0)
    (data2_def=0046C1D0)
    (data3_def=0046C1D0)
    (data4_def=0046C1D0)
    (data5_def=0046C1D0)
    (data8_def=0046C1D0)
    (data9_def=0046C1D0)
   (data10_def=0046C1D0)
    (data11_def=0046C1D0)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0046C1D0)
    (data1=0046C1D0)
    (data2=0046C1D0)
    (data3=0046C1D0)
    (data4=0046C1D0)
    (data5=0046C1D0)
    (data8=0046C1D0)
    (data9=0046C1D0)
    (data10=0046C1D0)
    (data11=0046C1D0)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0046C1D0)
    (data1_val=0046C1D0)
    (data2_val=0046C1D0)
    (data3_val=0046C1D0)
    (data4_val=0046C1D0)
    (data5_val=0046C1D0)
    (data8_val=0046C1D0)
    (data9_val=0046C1D0)
    (data10_val=0046C1D0)
    (data11_val=0046C1D0)
target=2, binarySearch=[2, 575]
target=6
  binarySearchValue(*array_shuffle1, target);
    (data_def=0046C590)
    (data1_def=0046C590)
    (data2_def=0046C590)
    (data3_def=0046C590)
    (data4_def=0046C590)
    (data5_def=0046C590)
    (data8_def=0046C590)
    (data9_def=0046C590)
   (data10_def=0046C590)
    (data11_def=0046C590)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0046C590)
    (data1=0046C590)
    (data2=0046C590)
    (data3=0046C590)
    (data4=0046C590)
    (data5=0046C590)
    (data8=0046C590)
    (data9=0046C590)
    (data10=0046C590)
    (data11=0046C590)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0046C590)
    (data1_val=0046C590)
    (data2_val=0046C590)
    (data3_val=0046C590)
    (data4_val=0046C590)
    (data5_val=0046C590)
    (data8_val=0046C590)
    (data9_val=0046C590)
    (data10_val=0046C590)
    (data11_val=0046C590)
target=6, binarySearch=[6, 681]
target=14
  binarySearchValue(*array_shuffle1, target);
    (data_def=0046CD10)
    (data1_def=0046CD10)
    (data2_def=0046CD10)
    (data3_def=0046CD10)
    (data4_def=0046CD10)
    (data5_def=0046CD10)
    (data8_def=0046CD10)
    (data9_def=0046CD10)
   (data10_def=0046CD10)
    (data11_def=0046CD10)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0046CD10)
    (data1=0046CD10)
    (data2=0046CD10)
    (data3=0046CD10)
    (data4=0046CD10)
    (data5=0046CD10)
    (data8=0046CD10)
    (data9=0046CD10)
    (data10=0046CD10)
    (data11=0046CD10)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0046CD10)
    (data1_val=0046CD10)
    (data2_val=0046CD10)
    (data3_val=0046CD10)
    (data4_val=0046CD10)
    (data5_val=0046CD10)
    (data8_val=0046CD10)
    (data9_val=0046CD10)
    (data10_val=0046CD10)
    (data11_val=0046CD10)
target=14, binarySearch=[14, 260]
target=30
  binarySearchValue(*array_shuffle1, target);
    (data_def=0046DC10)
    (data1_def=0046DC10)
    (data2_def=0046DC10)
    (data3_def=0046DC10)
    (data4_def=0046DC10)
    (data5_def=0046DC10)
    (data8_def=0046DC10)
    (data9_def=0046DC10)
   (data10_def=0046DC10)
    (data11_def=0046DC10)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0046DC10)
    (data1=0046DC10)
    (data2=0046DC10)
    (data3=0046DC10)
    (data4=0046DC10)
    (data5=0046DC10)
    (data8=0046DC10)
    (data9=0046DC10)
    (data10=0046DC10)
    (data11=0046DC10)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0046DC10)
    (data1_val=0046DC10)
    (data2_val=0046DC10)
    (data3_val=0046DC10)
    (data4_val=0046DC10)
    (data5_val=0046DC10)
    (data8_val=0046DC10)
    (data9_val=0046DC10)
    (data10_val=0046DC10)
    (data11_val=0046DC10)
target=30, binarySearch=[30, 915]
target=62
  binarySearchValue(*array_shuffle1, target);
    (data_def=0046FA10)
    (data1_def=0046FA10)
    (data2_def=0046FA10)
    (data3_def=0046FA10)
    (data4_def=0046FA10)
    (data5_def=0046FA10)
    (data8_def=0046FA10)
    (data9_def=0046FA10)
   (data10_def=0046FA10)
    (data11_def=0046FA10)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0046FA10)
    (data1=0046FA10)
    (data2=0046FA10)
    (data3=0046FA10)
    (data4=0046FA10)
    (data5=0046FA10)
    (data8=0046FA10)
    (data9=0046FA10)
    (data10=0046FA10)
    (data11=0046FA10)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0046FA10)
    (data1_val=0046FA10)
    (data2_val=0046FA10)
    (data3_val=0046FA10)
    (data4_val=0046FA10)
    (data5_val=0046FA10)
    (data8_val=0046FA10)
    (data9_val=0046FA10)
    (data10_val=0046FA10)
    (data11_val=0046FA10)
target=62, binarySearch=[62, 627]
target=126
  binarySearchValue(*array_shuffle1, target);
    (data_def=00473610)
    (data1_def=00473610)
    (data2_def=00473610)
    (data3_def=00473610)
    (data4_def=00473610)
    (data5_def=00473610)
    (data8_def=00473610)
    (data9_def=00473610)
   (data10_def=00473610)
    (data11_def=00473610)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=00473610)
    (data1=00473610)
    (data2=00473610)
    (data3=00473610)
    (data4=00473610)
    (data5=00473610)
    (data8=00473610)
    (data9=00473610)
    (data10=00473610)
    (data11=00473610)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=00473610)
    (data1_val=00473610)
    (data2_val=00473610)
    (data3_val=00473610)
    (data4_val=00473610)
    (data5_val=00473610)
    (data8_val=00473610)
    (data9_val=00473610)
    (data10_val=00473610)
    (data11_val=00473610)
target=126, binarySearch=[126, 728]
target=254
  binarySearchValue(*array_shuffle1, target);
    (data_def=0047AE10)
    (data1_def=0047AE10)
    (data2_def=0047AE10)
    (data3_def=0047AE10)
    (data4_def=0047AE10)
    (data5_def=0047AE10)
    (data8_def=0047AE10)
    (data9_def=0047AE10)
   (data10_def=0047AE10)
    (data11_def=0047AE10)
  binarySearch(*array_shuffle1, comparisonForSearch);
    (data=0047AE10)
    (data1=0047AE10)
    (data2=0047AE10)
    (data3=0047AE10)
    (data4=0047AE10)
    (data5=0047AE10)
    (data8=0047AE10)
    (data9=0047AE10)
    (data10=0047AE10)
    (data11=0047AE10)
  binarySearchValue(*array_shuffle1, target, search_comparison_val);
    (data_val=0047AE10)
    (data1_val=0047AE10)
    (data2_val=0047AE10)
    (data3_val=0047AE10)
    (data4_val=0047AE10)
    (data5_val=0047AE10)
    (data8_val=0047AE10)
    (data9_val=0047AE10)
    (data10_val=0047AE10)
    (data11_val=0047AE10)
target=254, binarySearch=[254, 756]
============================================================
Finalize
============================================================
----- Delete array(shuffle1) -----
----- Delete array(shuffle2) -----
----- Delete array(shuffle3) -----
----- Delete array(ordered) -----
----- Delete array(reversed) -----
----- Delete array(ordered_without_both_ends) -----
----- Delete array(hard_with_quick_sort) -----


============================================================
End
============================================================
*elapsed time=1.529459200 sec.
