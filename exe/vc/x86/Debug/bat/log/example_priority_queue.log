--------------------------------------------------------------------------------
[Test for priority_queue::containerAdapter(Priority Queue)]

--- Enqueue ---
[3: 0(seq=0)]
[5: 1(seq=1)]
[5: 2(seq=2)]
[4: 3(seq=3)]
[1: 4(seq=4)]
[4: 5(seq=5)]
[5: 6(seq=6)]
[3: 7(seq=7)]
[4: 8(seq=8)]
[3: 9(seq=9)]
[4:10(seq=10)]
[2:11(seq=11)]
[2:12(seq=12)]
[2:13(seq=13)]
[5:14(seq=14)]
[4:15(seq=15)]
[2:16(seq=16)]
[2:17(seq=17)]
[4:18(seq=18)]
[5:19(seq=19)]
*elapsed_time=0.000000000 sec

--- Show tree (count=20) ---
depth_max=4 (limit for showing=4)
                      .----------------------{5: 1}----------------------.                      
          .----------{5:19}----------.                    .----------{5: 2}----------.          
    .----{4: 8}----.        .----{4: 3}----.        .----{4: 5}----.        .----{5: 6}----.    
 .-{4:15}-.  .-{4:18}-.  .-{4:10]      [3: 9]      [2:11]      [2:12]      [2:13]      [5:14]   
[3: 7][2:16][2:17][3: 0][1: 4]                                                                  

--- Print Queue List ---
 [5,1:1] [5,19:19] [5,2:2] [4,8:8] [4,3:3] [4,5:5] [5,6:6] [4,15:15] [4,18:18] [4,10:10] [3,9:9] [2,11:11] [2,12:12] [2,13:13] [5,14:14] [3,7:7] [2,16:16] [2,17:17] [3,0:0] [1,4:4]

--- Print Queue List (reverse) ---
 [1,4:4] [3,0:0] [2,17:17] [2,16:16] [3,7:7] [5,14:14] [2,13:13] [2,12:12] [2,11:11] [3,9:9] [4,10:10] [4,18:18] [4,15:15] [5,6:6] [4,5:5] [4,3:3] [4,8:8] [5,2:2] [5,19:19] [5,1:1]

--------------------[iterator operattion:begin]
[constructor]
ite:[0] priority=5, seqNo=1, value=1
rite:[19] priority=1, seqNo=4, value=4
ite2_end:[0] priority=5, seqNo=1, value=1
rite2_end:[19] priority=1, seqNo=4, value=4
ite_end - ite = 20
ite - ite_end = -20
rite_end - rite = 20
rite - rite_end = -20
ite2 - ite = 20
ite - ite2 = -20
rite2 - rite = 20
rite - rite2 = -20
[copy operator]
ite:[0] priority=5, seqNo=1, value=1
rite:[19] priority=1, seqNo=4, value=4
ite2_end:[0] priority=5, seqNo=1, value=1
rite2_end:[19] priority=1, seqNo=4, value=4
[rite.base()]
ite2_end:[0] priority=5, seqNo=1, value=1
[++ite,--ie_end]
ite:[1] priority=5, seqNo=19, value=19
rite:[18] priority=3, seqNo=0, value=0
ite_end:[19] priority=1, seqNo=4, value=4
rite_end:[0] priority=5, seqNo=1, value=1
[--ite,++ie_end]
ite:[0] priority=5, seqNo=1, value=1
rite:[19] priority=1, seqNo=4, value=4
[ite[0]]
ite:[0] priority=5, seqNo=1, value=1
rite:[19] priority=1, seqNo=4, value=4
[ite[1]]
ite:[1] priority=5, seqNo=19, value=19
rite:[18] priority=3, seqNo=0, value=0
[ite[2]]
ite:[3] priority=4, seqNo=8, value=8
rite:[16] priority=2, seqNo=16, value=16
[ite+=3]
ite:[6] priority=5, seqNo=6, value=6
rite:[13] priority=2, seqNo=13, value=13
[ite-=3]
ite:[3] priority=4, seqNo=8, value=8
rite:[16] priority=2, seqNo=16, value=16
ite_end - ite = 17
ite - ite_end = -17
rite_end - rite = 17
rite - rite_end = -17
[ite2-=2]
ite2 - ite = 15
ite - ite2 = -15
rite2 - rite = 15
rite - rite2 = -15
[++ite_end]
ite_end - ite = 0
ite - ite_end = 0
rite_end - rite = 0
rite - rite_end = 0
--------------------[iterator operattion:end]
--------------------[lock operation:begin]
.lockScoped() ... OK
.lockUnique() ... OK
.lockUnique(with_lock) ... OK
.lockUnique(try_lock) ... OK
.lockUnique(adopt_lock) ... OK
.lockUnique(defer_lock) ... OK
--------------------[lock operation:end]

--- Dequeue ---
[5: 1] [5: 2] [5: 6] 
*elapsed_time=0.000000000 sec

--- Show tree (count=17) ---
depth_max=4 (limit for showing=4)
                      .----------------------{5:14}----------------------.                      
          .----------{5:19}----------.                    .----------{4: 5}----------.          
    .----{4: 8}----.        .----{4: 3}----.        .----{2:11}----.        .----{3: 0}----.    
 .-{4:15}-.    [4:18]      [4:10]      [3: 9]      [2:17]      [2:12]      [2:13]      [1: 4]   
[3: 7][2:16]                                                                                    

--- Change Priority ---
[5:14(seq=14)] -> [5:14(seq=20)]
*elapsed_time=0.000000000 sec

--- Change Priority ---
[5:19(seq=19)] -> [2:19(seq=21)]
*elapsed_time=0.000000000 sec

--- Change Priority ---
[5:14(seq=20)] -> [4:14(seq=22)]
*elapsed_time=0.000000000 sec

--- Show tree (count=17) ---
depth_max=4 (limit for showing=4)
                      .----------------------{4: 3}----------------------.                      
          .----------{4: 8}----------.                    .----------{4: 5}----------.          
    .----{4:15}----.        .----{4:10}----.        .----{2:11}----.        .----{3: 0}----.    
 .-{4:14}-.    [4:18]      [2:19]      [3: 9]      [2:17]      [2:12]      [2:13]      [1: 4]   
[3: 7][2:16]                                                                                    

--- Dequeue ---
[4: 3] [4: 5] [4: 8] [4:10] [4:15] [4:18] [4:14] [3: 0] [3: 7] [3: 9] 
*elapsed_time=0.000000000 sec

--- Show tree (count=7) ---
depth_max=2 (limit for showing=4)
    .----{2:11}----.    
 .-{2:12}-.  .-{2:13}-. 
[2:16][2:19][2:17][1: 4]

--- Dequeue ---
[2:11] [2:12] [2:13] [2:16] [2:17] [2:19] [1: 4] 
*elapsed_time=0.000000000 sec

--- Show tree (count=0) ---
depth_max=-1 (limit for showing=4)

--------------------------------------------------------------------------------
[Test for priority_queue::containerAdapter(Priority Queue)] *Clear

--- Enqueue ---
[3: 0(seq=0)]
[5: 1(seq=1)]
[5: 2(seq=2)]
[4: 3(seq=3)]
[1: 4(seq=4)]
[4: 5(seq=5)]
[5: 6(seq=6)]
[3: 7(seq=7)]
[4: 8(seq=8)]
[3: 9(seq=9)]
[4:10(seq=10)]
[2:11(seq=11)]
[2:12(seq=12)]
[2:13(seq=13)]
[5:14(seq=14)]
[4:15(seq=15)]
[2:16(seq=16)]
[2:17(seq=17)]
[4:18(seq=18)]
[5:19(seq=19)]
*elapsed_time=0.000000000 sec

--- Show tree (count=20) ---
depth_max=4 (limit for showing=4)
                      .----------------------{5: 1}----------------------.                      
          .----------{5:19}----------.                    .----------{5: 2}----------.          
    .----{4: 8}----.        .----{4: 3}----.        .----{4: 5}----.        .----{5: 6}----.    
 .-{4:15}-.  .-{4:18}-.  .-{4:10]      [3: 9]      [2:11]      [2:12]      [2:13]      [5:14]   
[3: 7][2:16][2:17][3: 0][1: 4]                                                                  

--- Clear ---
OK
*elapsed_time=0.000000000 sec

--- Show tree (count=0) ---
depth_max=-1 (limit for showing=4)

--------------------------------------------------------------------------------
[Test for priority_queue::containerAdapter(Priority Queue)] *Pointer

pop: [5: 4](seq=3)
pop: [4: 2](seq=1)
pop: [3: 1](seq=0)
pop: [2: 3](seq=2)
pop: [1: 5](seq=4)

--------------------------------------------------------------------------------
[Test for priority_queue::containerAdapter(Priority Queue)] *Second time

--- Enqueue ---
[3: 0(seq=0)]
[5: 1(seq=1)]
[5: 2(seq=2)]
[4: 3(seq=3)]
[1: 4(seq=4)]
[4: 5(seq=5)]
[5: 6(seq=6)]
[3: 7(seq=7)]
[4: 8(seq=8)]
[3: 9(seq=9)]
[4:10(seq=10)]
[2:11(seq=11)]
[2:12(seq=12)]
[2:13(seq=13)]
[5:14(seq=14)]
[4:15(seq=15)]
[2:16(seq=16)]
[2:17(seq=17)]
[4:18(seq=18)]
[5:19(seq=19)]
*elapsed_time=0.001000800 sec

--- Show tree (count=20) ---
depth_max=4 (limit for showing=4)
                      .----------------------{5: 1}----------------------.                      
          .----------{5:19}----------.                    .----------{5: 2}----------.          
    .----{4: 8}----.        .----{4: 3}----.        .----{4: 5}----.        .----{5: 6}----.    
 .-{4:15}-.  .-{4:18}-.  .-{4:10]      [3: 9]      [2:11]      [2:12]      [2:13]      [5:14]   
[3: 7][2:16][2:17][3: 0][1: 4]                                                                  

--- Dequeue ---
[5: 1] [5: 2] [5: 6] [5:14] [5:19] [4: 3] [4: 5] [4: 8] [4:10] [4:15] 
*elapsed_time=0.000000000 sec

--- Show tree (count=10) ---
depth_max=3 (limit for showing=4)
          .----------{4:18}----------.          
    .----{3: 7}----.        .----{3: 0}----.    
 .-{2:12}-.  .-{3: 9]      [2:11]      [2:13]   
[2:17][1: 4][2:16]                              

--- Dequeue ---
[4:18] [3: 0] [3: 7] [3: 9] [2:11] [2:12] [2:13] [2:16] [2:17] [1: 4] 
*elapsed_time=0.000000000 sec

--- Show tree (count=0) ---
depth_max=-1 (limit for showing=4)

--- end ---
*elapsed_time=0.002000800 sec

--------------------------------------------------------------------------------
[Test for binary_heap::container(Binary Heap)]

--- Push nodes(Binary Heap) ---
[3: 0]
[5: 1]
[5: 2]
[4: 3]
[1: 4]
[4: 5]
[5: 6]
[3: 7]
[4: 8]
[3: 9]
[4:10]
[2:11]
[2:12]
[2:13]
[5:14]
[4:15]
[2:16]
[2:17]
[4:18]
[5:19]
*elapsed_time=0.000000000 sec

--- Show tree (count=20) ---
depth_max=4 (limit for showing=4)
                      .----------------------{5: 1}----------------------.                      
          .----------{5:19}----------.                    .----------{5: 2}----------.          
    .----{4: 8}----.        .----{4: 3}----.        .----{4: 5}----.        .----{5: 6}----.    
 .-{4:15}-.  .-{4:18}-.  .-{4:10]      [3: 9]      [2:11]      [2:12]      [2:13]      [5:14]   
[3: 7][2:16][2:17][3: 0][1: 4]                                                                  

--- Print Queue List ---
 [5,0:1] [5,0:19] [5,0:2] [4,0:8] [4,0:3] [4,0:5] [5,0:6] [4,0:15] [4,0:18] [4,0:10] [3,0:9] [2,0:11] [2,0:12] [2,0:13] [5,0:14] [3,0:7] [2,0:16] [2,0:17] [3,0:0] [1,0:4]

--- Print Queue List (reverse) ---
 [1,0:4] [3,0:0] [2,0:17] [2,0:16] [3,0:7] [5,0:14] [2,0:13] [2,0:12] [2,0:11] [3,0:9] [4,0:10] [4,0:18] [4,0:15] [5,0:6] [4,0:5] [4,0:3] [4,0:8] [5,0:2] [5,0:19] [5,0:1]

--------------------[iterator operattion:begin]
[constructor]
ite:[0] priority=5, seqNo=0, value=1
rite:[19] priority=1, seqNo=0, value=4
ite2_end:[0] priority=5, seqNo=0, value=1
rite2_end:[19] priority=1, seqNo=0, value=4
ite_end - ite = 20
ite - ite_end = -20
rite_end - rite = 20
rite - rite_end = -20
ite2 - ite = 20
ite - ite2 = -20
rite2 - rite = 20
rite - rite2 = -20
[copy operator]
ite:[0] priority=5, seqNo=0, value=1
rite:[19] priority=1, seqNo=0, value=4
ite2_end:[0] priority=5, seqNo=0, value=1
rite2_end:[19] priority=1, seqNo=0, value=4
[rite.base()]
ite2_end:[0] priority=5, seqNo=0, value=1
[++ite,--ie_end]
ite:[1] priority=5, seqNo=0, value=19
rite:[18] priority=3, seqNo=0, value=0
ite_end:[19] priority=1, seqNo=0, value=4
rite_end:[0] priority=5, seqNo=0, value=1
[--ite,++ie_end]
ite:[0] priority=5, seqNo=0, value=1
rite:[19] priority=1, seqNo=0, value=4
[ite[0]]
ite:[0] priority=5, seqNo=0, value=1
rite:[19] priority=1, seqNo=0, value=4
[ite[1]]
ite:[1] priority=5, seqNo=0, value=19
rite:[18] priority=3, seqNo=0, value=0
[ite[2]]
ite:[3] priority=4, seqNo=0, value=8
rite:[16] priority=2, seqNo=0, value=16
[ite+=3]
ite:[6] priority=5, seqNo=0, value=6
rite:[13] priority=2, seqNo=0, value=13
[ite-=3]
ite:[3] priority=4, seqNo=0, value=8
rite:[16] priority=2, seqNo=0, value=16
ite_end - ite = 17
ite - ite_end = -17
rite_end - rite = 17
rite - rite_end = -17
[ite2-=2]
ite2 - ite = 15
ite - ite2 = -15
rite2 - rite = 15
rite - rite2 = -15
[++ite_end]
ite_end - ite = 0
ite - ite_end = 0
rite_end - rite = 0
rite - rite_end = 0
--------------------[iterator operattion:end]
--------------------[lock operation:begin]
.lockScoped() ... OK
.lockUnique() ... OK
.lockUnique(with_lock) ... OK
.lockUnique(try_lock) ... OK
.lockUnique(adopt_lock) ... OK
.lockUnique(defer_lock) ... OK
--------------------[lock operation:end]

--- Pop nodes(Binary Heap) ---
[5: 1] [5: 2] [5: 6] [5:14] [5:19] [4: 5] [4: 3] [4:10] [4: 8] [4:18] 
*elapsed_time=0.000000000 sec

--- Show tree (count=10) ---
depth_max=3 (limit for showing=4)
          .----------{4:15}----------.          
    .----{3: 9}----.        .----{3: 0}----.    
 .-{2:13}-.  .-{2:16]      [2:12]      [3: 7]   
[2:17][2:11][1: 4]                              

--- Pop nodes(Binary Heap) ---
[4:15] [3: 0] [3: 7] [3: 9] [2:12] [2:11] [2:16] [2:13] [2:17] [1: 4] 
*elapsed_time=0.000000000 sec

--- Show tree (count=0) ---
depth_max=-1 (limit for showing=4)

--------------------------------------------------------------------------------
[Test for std::priority_queue(STL)]

--- Push nodes(STL) ---
[3: 0]
[5: 1]
[5: 2]
[4: 3]
[1: 4]
[4: 5]
[5: 6]
[3: 7]
[4: 8]
[3: 9]
[4:10]
[2:11]
[2:12]
[2:13]
[5:14]
[4:15]
[2:16]
[2:17]
[4:18]
[5:19]
*elapsed_time=0.001000900 sec

--- Pop nodes(STL) ---
[5: 1] [5: 2] [5: 6] [5:14] [5:19] [4: 5] [4: 3] [4:10] [4: 8] [4:18] 
*elapsed_time=0.000000000 sec

--- Pop nodes(STL) ---
[4:15] [3: 0] [3: 7] [3: 9] [2:12] [2:11] [2:16] [2:13] [2:17] [1: 4] 
*elapsed_time=0.000000000 sec

--- end ---
*elapsed_time=0.001000900 sec

--- example_simple_priority_queue ---
data = 0 0 0
data = {5, {0,0}} {3, {0,0}} {1, {0,2}}

--- example_simple_binary_heap ---
data = 5 3 1
data = {5,6} {3,4} {1,2}
