--------------------------------------------------------------------------------
[Test for priority_queue::containerAdapter(Priority Queue)]

--- Enqueue ---
[3: 0(seq=0)]
[5: 1(seq=1)]
[5: 2(seq=2)]
[4: 3(seq=3)]
[1: 4(seq=4)]
[4: 5(seq=5)]
[5: 6(seq=6)]
[3: 7(seq=7)]
[4: 8(seq=8)]
[3: 9(seq=9)]
[4:10(seq=10)]
[2:11(seq=11)]
[2:12(seq=12)]
[2:13(seq=13)]
[5:14(seq=14)]
[4:15(seq=15)]
[2:16(seq=16)]
[2:17(seq=17)]
[4:18(seq=18)]
[5:19(seq=19)]
*elapsed_time=0.000000000 sec

--- Show tree (count=20) ---
depth_max=4 (limit for showing=4)
                      .----------------------{1: 4}----------------------.                      
          .----------{2:17}----------.                    .----------{2:13}----------.          
    .----{2:16}----.        .----{3: 7}----.        .----{2:11}----.        .----{2:12}----.    
 .-{3: 0}-.  .-{3: 9}-.  .-{4: 3]      [4:10]      [5: 2]      [4: 5]      [5: 6]      [5:14]   
[5: 1][4:15][4: 8][4:18][5:19]                                                                  

--- Dequeue ---
[1: 4] [2:17] [2:16] 
*elapsed_time=0.000000000 sec

--- Show tree (count=17) ---
depth_max=4 (limit for showing=4)
                      .----------------------{2:13}----------------------.                      
          .----------{3: 9}----------.                    .----------{2:12}----------.          
    .----{3: 0}----.        .----{3: 7}----.        .----{2:11}----.        .----{4: 8}----.    
 .-{4:15}-.    [4:18]      [4: 3]      [4:10]      [5: 2]      [4: 5]      [5: 6]      [5:14]   
[5: 1][5:19]                                                                                    

--- Change Priority ---
[2:13(seq=13)] -> [5:13(seq=20)]
*elapsed_time=0.000000000 sec

--- Change Priority ---
[2:12(seq=12)] -> [2:12(seq=21)]
*elapsed_time=0.000000000 sec

--- Change Priority ---
[2:12(seq=21)] -> [4:12(seq=22)]
*elapsed_time=0.000000000 sec

--- Show tree (count=17) ---
depth_max=4 (limit for showing=4)
                      .----------------------{2:11}----------------------.                      
          .----------{3: 9}----------.                    .----------{4:12}----------.          
    .----{3: 0}----.        .----{3: 7}----.        .----{4: 5}----.        .----{4: 8}----.    
 .-{4:15}-.    [4:18]      [4: 3]      [4:10]      [5: 2]      [5:13]      [5: 6]      [5:14]   
[5: 1][5:19]                                                                                    

--- Dequeue ---
[2:11] [3: 9] [3: 7] [3: 0] [4:12] [4:18] [4:15] [4:10] [4: 8] [4: 5] 
*elapsed_time=0.000000000 sec

--- Show tree (count=7) ---
depth_max=2 (limit for showing=4)
    .----{4: 3}----.    
 .-{5:13}-.  .-{5: 6}-. 
[5:14][5:19][5: 2][5: 1]

--- Dequeue ---
[4: 3] [5:13] [5:19] [5:14] [5: 6] [5: 2] [5: 1] 
*elapsed_time=0.000000000 sec

--- Show tree (count=0) ---
depth_max=-1 (limit for showing=4)

--------------------------------------------------------------------------------
[Test for priority_queue::containerAdapter(Priority Queue)] *Clear

--- Enqueue ---
[3: 0(seq=0)]
[5: 1(seq=1)]
[5: 2(seq=2)]
[4: 3(seq=3)]
[1: 4(seq=4)]
[4: 5(seq=5)]
[5: 6(seq=6)]
[3: 7(seq=7)]
[4: 8(seq=8)]
[3: 9(seq=9)]
[4:10(seq=10)]
[2:11(seq=11)]
[2:12(seq=12)]
[2:13(seq=13)]
[5:14(seq=14)]
[4:15(seq=15)]
[2:16(seq=16)]
[2:17(seq=17)]
[4:18(seq=18)]
[5:19(seq=19)]
*elapsed_time=0.000000000 sec

--- Show tree (count=20) ---
depth_max=4 (limit for showing=4)
                      .----------------------{1: 4}----------------------.                      
          .----------{2:17}----------.                    .----------{2:13}----------.          
    .----{2:16}----.        .----{3: 7}----.        .----{2:11}----.        .----{2:12}----.    
 .-{3: 0}-.  .-{3: 9}-.  .-{4: 3]      [4:10]      [5: 2]      [4: 5]      [5: 6]      [5:14]   
[5: 1][4:15][4: 8][4:18][5:19]                                                                  

--- Clear ---
OK
*elapsed_time=0.000000000 sec

--- Show tree (count=0) ---
depth_max=-1 (limit for showing=4)

--------------------------------------------------------------------------------
[Test for priority_queue::containerAdapter(Priority Queue)] *Pointer

pop: [1: 5](seq=4)
pop: [2: 3](seq=2)
pop: [3: 1](seq=0)
pop: [4: 2](seq=1)
pop: [5: 4](seq=3)

--------------------------------------------------------------------------------
[Test for priority_queue::containerAdapter(Priority Queue)] *Second time

--- Enqueue ---
[3: 0(seq=0)]
[5: 1(seq=1)]
[5: 2(seq=2)]
[4: 3(seq=3)]
[1: 4(seq=4)]
[4: 5(seq=5)]
[5: 6(seq=6)]
[3: 7(seq=7)]
[4: 8(seq=8)]
[3: 9(seq=9)]
[4:10(seq=10)]
[2:11(seq=11)]
[2:12(seq=12)]
[2:13(seq=13)]
[5:14(seq=14)]
[4:15(seq=15)]
[2:16(seq=16)]
[2:17(seq=17)]
[4:18(seq=18)]
[5:19(seq=19)]
*elapsed_time=0.000000000 sec

--- Show tree (count=20) ---
depth_max=4 (limit for showing=4)
                      .----------------------{1: 4}----------------------.                      
          .----------{2:17}----------.                    .----------{2:13}----------.          
    .----{2:16}----.        .----{3: 7}----.        .----{2:11}----.        .----{2:12}----.    
 .-{3: 0}-.  .-{3: 9}-.  .-{4: 3]      [4:10]      [5: 2]      [4: 5]      [5: 6]      [5:14]   
[5: 1][4:15][4: 8][4:18][5:19]                                                                  

--- Dequeue ---
[1: 4] [2:17] [2:16] [2:13] [2:12] [2:11] [3: 9] [3: 7] [3: 0] [4:18] 
*elapsed_time=0.000000000 sec

--- Show tree (count=10) ---
depth_max=3 (limit for showing=4)
          .----------{4:15}----------.          
    .----{4:10}----.        .----{4: 8}----.    
 .-{5:19}-.  .-{4: 3]      [4: 5]      [5:14]   
[5: 2][5: 6][5: 1]                              

--- Dequeue ---
[4:15] [4:10] [4: 8] [4: 5] [4: 3] [5:19] [5:14] [5: 6] [5: 2] [5: 1] 
*elapsed_time=0.000000000 sec

--- Show tree (count=0) ---
depth_max=-1 (limit for showing=4)

--- end ---
*elapsed_time=0.001001700 sec

--------------------------------------------------------------------------------
[Test for binary_heap::container(Binary Heap)]

--- Push nodes(Binary Heap) ---
[3: 0]
[5: 1]
[5: 2]
[4: 3]
[1: 4]
[4: 5]
[5: 6]
[3: 7]
[4: 8]
[3: 9]
[4:10]
[2:11]
[2:12]
[2:13]
[5:14]
[4:15]
[2:16]
[2:17]
[4:18]
[5:19]
*elapsed_time=0.000000000 sec

--- Show tree (count=20) ---
depth_max=4 (limit for showing=4)
                      .----------------------{5: 1}----------------------.                      
          .----------{5:19}----------.                    .----------{5: 2}----------.          
    .----{4: 8}----.        .----{4: 3}----.        .----{4: 5}----.        .----{5: 6}----.    
 .-{4:15}-.  .-{4:18}-.  .-{4:10]      [3: 9]      [2:11]      [2:12]      [2:13]      [5:14]   
[3: 7][2:16][2:17][3: 0][1: 4]                                                                  

--- Pop nodes(Binary Heap) ---
[5: 1] [5: 2] [5: 6] [5:14] [5:19] [4: 5] [4: 3] [4:10] [4: 8] [4:18] 
*elapsed_time=0.000000000 sec

--- Show tree (count=10) ---
depth_max=3 (limit for showing=4)
          .----------{4:15}----------.          
    .----{3: 9}----.        .----{3: 0}----.    
 .-{2:13}-.  .-{2:16]      [2:12]      [3: 7]   
[2:17][2:11][1: 4]                              

--- Pop nodes(Binary Heap) ---
[4:15] [3: 0] [3: 7] [3: 9] [2:12] [2:11] [2:16] [2:13] [2:17] [1: 4] 
*elapsed_time=0.000000000 sec

--- Show tree (count=0) ---
depth_max=-1 (limit for showing=4)

--------------------------------------------------------------------------------
[Test for std::priority_queue(STL)]

--- Push nodes(STL) ---
[3: 0]
[5: 1]
[5: 2]
[4: 3]
[1: 4]
[4: 5]
[5: 6]
[3: 7]
[4: 8]
[3: 9]
[4:10]
[2:11]
[2:12]
[2:13]
[5:14]
[4:15]
[2:16]
[2:17]
[4:18]
[5:19]
*elapsed_time=0.000000000 sec

--- Pop nodes(STL) ---
[5: 1] [5: 2] [5: 6] [5:14] [5:19] [4: 5] [4: 3] [4:10] [4: 8] [4:18] 
*elapsed_time=0.000000000 sec

--- Pop nodes(STL) ---
[4:15] [3: 0] [3: 7] [3: 9] [2:12] [2:11] [2:16] [2:13] [2:17] [1: 4] 
*elapsed_time=0.000000000 sec

--- end ---
*elapsed_time=0.001000900 sec

--- example_simple_priority_queue ---
data = 0 0 0
data = {1, {0,2}} {3, {0,0}} {5, {0,0}}

--- example_simple_binary_heap ---
data = 5 3 1
data = {5,6} {3,4} {1,2}
